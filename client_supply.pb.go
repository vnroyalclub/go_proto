// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_supply.proto

package VK_Proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 游戏服务请求
type SupplyOps int32

const (
	// 询问是否中暗补
	SupplyOps_Req_Ask SupplyOps = 1
	// 开奖
	SupplyOps_Req_Open SupplyOps = 2
	// 开奖确认
	SupplyOps_Req_Confirm SupplyOps = 3
	// 日排行榜
	SupplyOps_Req_DailyRank SupplyOps = 4
	// 周排行榜
	SupplyOps_Req_WeeklyRank SupplyOps = 5
)

var SupplyOps_name = map[int32]string{
	1: "Req_Ask",
	2: "Req_Open",
	3: "Req_Confirm",
	4: "Req_DailyRank",
	5: "Req_WeeklyRank",
}
var SupplyOps_value = map[string]int32{
	"Req_Ask":        1,
	"Req_Open":       2,
	"Req_Confirm":    3,
	"Req_DailyRank":  4,
	"Req_WeeklyRank": 5,
}

func (x SupplyOps) Enum() *SupplyOps {
	p := new(SupplyOps)
	*p = x
	return p
}
func (x SupplyOps) String() string {
	return proto.EnumName(SupplyOps_name, int32(x))
}
func (x *SupplyOps) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SupplyOps_value, data, "SupplyOps")
	if err != nil {
		return err
	}
	*x = SupplyOps(value)
	return nil
}
func (SupplyOps) EnumDescriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

// 查询是否有暗补 返回体
type SpAskResp struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Exist            *bool  `protobuf:"varint,2,req,name=Exist" json:"Exist,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SpAskResp) Reset()                    { *m = SpAskResp{} }
func (m *SpAskResp) String() string            { return proto.CompactTextString(m) }
func (*SpAskResp) ProtoMessage()               {}
func (*SpAskResp) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func (m *SpAskResp) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *SpAskResp) GetExist() bool {
	if m != nil && m.Exist != nil {
		return *m.Exist
	}
	return false
}

// 开奖请求
type SpOpenReq struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SpOpenReq) Reset()                    { *m = SpOpenReq{} }
func (m *SpOpenReq) String() string            { return proto.CompactTextString(m) }
func (*SpOpenReq) ProtoMessage()               {}
func (*SpOpenReq) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{1} }

func (m *SpOpenReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

// 开奖请求 返回体
type SpOpenResp struct {
	Points           []int32 `protobuf:"varint,1,rep,name=Points" json:"Points,omitempty"`
	Score            *int64  `protobuf:"varint,2,req,name=Score" json:"Score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SpOpenResp) Reset()                    { *m = SpOpenResp{} }
func (m *SpOpenResp) String() string            { return proto.CompactTextString(m) }
func (*SpOpenResp) ProtoMessage()               {}
func (*SpOpenResp) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{2} }

func (m *SpOpenResp) GetPoints() []int32 {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *SpOpenResp) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 开奖请求
type SpConfirmReq struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	GameId           *int64 `protobuf:"varint,2,req,name=GameId" json:"GameId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SpConfirmReq) Reset()                    { *m = SpConfirmReq{} }
func (m *SpConfirmReq) String() string            { return proto.CompactTextString(m) }
func (*SpConfirmReq) ProtoMessage()               {}
func (*SpConfirmReq) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{3} }

func (m *SpConfirmReq) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *SpConfirmReq) GetGameId() int64 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

// 排行榜
type SpRankInfo struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Nick             *string `protobuf:"bytes,2,opt,name=Nick" json:"Nick,omitempty"`
	Level            *int32  `protobuf:"varint,3,opt,name=Level" json:"Level,omitempty"`
	Portrait         *string `protobuf:"bytes,4,opt,name=Portrait" json:"Portrait,omitempty"`
	Rank             *int64  `protobuf:"varint,5,req,name=Rank" json:"Rank,omitempty"`
	Score            *int64  `protobuf:"varint,6,req,name=Score" json:"Score,omitempty"`
	GameId           *int64  `protobuf:"varint,7,opt,name=GameId" json:"GameId,omitempty"`
	TimeAT           *int64  `protobuf:"varint,8,opt,name=TimeAT" json:"TimeAT,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SpRankInfo) Reset()                    { *m = SpRankInfo{} }
func (m *SpRankInfo) String() string            { return proto.CompactTextString(m) }
func (*SpRankInfo) ProtoMessage()               {}
func (*SpRankInfo) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{4} }

func (m *SpRankInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *SpRankInfo) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *SpRankInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SpRankInfo) GetPortrait() string {
	if m != nil && m.Portrait != nil {
		return *m.Portrait
	}
	return ""
}

func (m *SpRankInfo) GetRank() int64 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *SpRankInfo) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *SpRankInfo) GetGameId() int64 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *SpRankInfo) GetTimeAT() int64 {
	if m != nil && m.TimeAT != nil {
		return *m.TimeAT
	}
	return 0
}

// 排行榜
type SpRanksResp struct {
	Ranks            []*SpRankInfo `protobuf:"bytes,1,rep,name=Ranks" json:"Ranks,omitempty"`
	MyRank           *SpRankInfo   `protobuf:"bytes,2,opt,name=MyRank" json:"MyRank,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SpRanksResp) Reset()                    { *m = SpRanksResp{} }
func (m *SpRanksResp) String() string            { return proto.CompactTextString(m) }
func (*SpRanksResp) ProtoMessage()               {}
func (*SpRanksResp) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{5} }

func (m *SpRanksResp) GetRanks() []*SpRankInfo {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *SpRanksResp) GetMyRank() *SpRankInfo {
	if m != nil {
		return m.MyRank
	}
	return nil
}

func init() {
	proto.RegisterType((*SpAskResp)(nil), "VK.Proto.SpAskResp")
	proto.RegisterType((*SpOpenReq)(nil), "VK.Proto.SpOpenReq")
	proto.RegisterType((*SpOpenResp)(nil), "VK.Proto.SpOpenResp")
	proto.RegisterType((*SpConfirmReq)(nil), "VK.Proto.SpConfirmReq")
	proto.RegisterType((*SpRankInfo)(nil), "VK.Proto.SpRankInfo")
	proto.RegisterType((*SpRanksResp)(nil), "VK.Proto.SpRanksResp")
	proto.RegisterEnum("VK.Proto.SupplyOps", SupplyOps_name, SupplyOps_value)
}

func init() { proto.RegisterFile("client_supply.proto", fileDescriptor17) }

var fileDescriptor17 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcb, 0x6f, 0xa3, 0x30,
	0x10, 0xc6, 0x05, 0x84, 0x84, 0x0c, 0xd9, 0x5d, 0xd6, 0x1b, 0xad, 0xac, 0x3d, 0x21, 0x2e, 0x8b,
	0xa2, 0x8a, 0x43, 0x8f, 0x95, 0x7a, 0x48, 0x1f, 0xaa, 0xa2, 0x3e, 0x12, 0x99, 0xa8, 0xbd, 0x35,
	0x42, 0x89, 0x53, 0x59, 0x10, 0x70, 0x30, 0xad, 0x9a, 0xff, 0xb0, 0x7f, 0x56, 0x35, 0x86, 0x3c,
	0x2e, 0x4d, 0x6f, 0xf3, 0x1b, 0x0d, 0xdf, 0x7c, 0x9f, 0x07, 0xf8, 0x33, 0xcf, 0x04, 0xcf, 0xab,
	0x99, 0x7a, 0x95, 0x32, 0xdb, 0x44, 0xb2, 0x2c, 0xaa, 0x82, 0x38, 0x8f, 0xb7, 0xd1, 0x04, 0xab,
	0xe0, 0x1c, 0xba, 0xb1, 0x1c, 0xaa, 0x94, 0x71, 0x25, 0xc9, 0x3f, 0x70, 0x26, 0x59, 0xb2, 0xe1,
	0xe5, 0x68, 0x41, 0x0d, 0xdf, 0x0c, 0x2d, 0xb6, 0x63, 0xd2, 0x07, 0xfb, 0xfa, 0x5d, 0xa8, 0x8a,
	0x9a, 0xbe, 0x19, 0x3a, 0xac, 0x86, 0xe0, 0x3f, 0x7e, 0x3e, 0x96, 0x3c, 0x67, 0x7c, 0x7d, 0xec,
	0xf3, 0xe0, 0x0c, 0x60, 0x3b, 0xa8, 0x24, 0xf9, 0x0b, 0xed, 0x49, 0x21, 0xf2, 0x4a, 0x51, 0xc3,
	0xb7, 0x42, 0x9b, 0x35, 0x84, 0x4b, 0xe2, 0x79, 0x51, 0x72, 0xbd, 0xc4, 0x62, 0x35, 0x04, 0x17,
	0xd0, 0x8b, 0xe5, 0x65, 0x91, 0x2f, 0x45, 0xb9, 0xfa, 0x66, 0x0f, 0x2a, 0xdf, 0x24, 0x2b, 0x3e,
	0x5a, 0x34, 0x12, 0x0d, 0x05, 0x1f, 0x06, 0x1a, 0x60, 0x49, 0x9e, 0x8e, 0xf2, 0x65, 0x71, 0x54,
	0x82, 0x40, 0xeb, 0x41, 0xcc, 0x53, 0x6a, 0xfa, 0x46, 0xd8, 0x65, 0xba, 0x46, 0x63, 0x77, 0xfc,
	0x8d, 0x67, 0xd4, 0xf2, 0x8d, 0xd0, 0x66, 0x35, 0x68, 0x95, 0xa2, 0xac, 0xca, 0x44, 0x54, 0xb4,
	0xa5, 0xa7, 0x77, 0x8c, 0x2a, 0xb8, 0x8d, 0xda, 0x5a, 0x5d, 0xd7, 0xfb, 0x78, 0xed, 0x83, 0x78,
	0x07, 0x96, 0x3b, 0xbe, 0xb1, 0xb7, 0x8c, 0xfd, 0xa9, 0x58, 0xf1, 0xe1, 0x94, 0x3a, 0x75, 0xbf,
	0xa6, 0xe0, 0x05, 0xdc, 0x3a, 0x89, 0xd2, 0x6f, 0x39, 0x00, 0x5b, 0x83, 0x7e, 0x4a, 0xf7, 0xb4,
	0x1f, 0x6d, 0x6f, 0x1b, 0xed, 0xf3, 0xb2, 0x7a, 0x84, 0x9c, 0x40, 0xfb, 0x7e, 0xa3, 0x6d, 0x61,
	0xb8, 0xaf, 0x86, 0x9b, 0x99, 0xc1, 0x33, 0x74, 0x63, 0xfd, 0xd7, 0x8c, 0xa5, 0x22, 0x2e, 0x74,
	0x18, 0x5f, 0xcf, 0x86, 0x2a, 0xf5, 0x0c, 0xd2, 0x03, 0x07, 0x01, 0xef, 0xe9, 0x99, 0xe4, 0x17,
	0xb8, 0x48, 0xcd, 0x85, 0x3c, 0x8b, 0xfc, 0x86, 0x1f, 0xd8, 0xb8, 0x4a, 0x44, 0xa6, 0x95, 0xbc,
	0x16, 0x21, 0xf0, 0x13, 0x5b, 0x4f, 0x9c, 0xa7, 0x4d, 0xcf, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0x9b, 0x1a, 0x4b, 0x9b, 0x02, 0x00, 0x00,
}
