// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_luckyturntable.proto

package VK_Proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RewardInfo struct {
	Type             *int32      `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`
	Index            *int32      `protobuf:"varint,2,req,name=Index" json:"Index,omitempty"`
	Reward           []*PropData `protobuf:"bytes,3,rep,name=Reward" json:"Reward,omitempty"`
	TimeStamp        *int64      `protobuf:"varint,4,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RewardInfo) Reset()                    { *m = RewardInfo{} }
func (m *RewardInfo) String() string            { return proto.CompactTextString(m) }
func (*RewardInfo) ProtoMessage()               {}
func (*RewardInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RewardInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *RewardInfo) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *RewardInfo) GetReward() []*PropData {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RewardInfo) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

// 越南转盘老虎机信息
type LuckyTurntableInfo struct {
	Jackpot            *int64        `protobuf:"varint,1,req,name=Jackpot" json:"Jackpot,omitempty"`
	SpinTimes          *int64        `protobuf:"varint,2,req,name=SpinTimes" json:"SpinTimes,omitempty"`
	PlayerId           *int64        `protobuf:"varint,4,req,name=PlayerId" json:"PlayerId,omitempty"`
	CostSpinTimes      *int64        `protobuf:"varint,5,opt,name=CostSpinTimes" json:"CostSpinTimes,omitempty"`
	CostCnt            *int64        `protobuf:"varint,6,opt,name=CostCnt" json:"CostCnt,omitempty"`
	LockSpinTimes      *int64        `protobuf:"varint,7,opt,name=LockSpinTimes" json:"LockSpinTimes,omitempty"`
	IsOpen             *bool         `protobuf:"varint,8,opt,name=IsOpen" json:"IsOpen,omitempty"`
	HitSpecial         *bool         `protobuf:"varint,9,opt,name=HitSpecial" json:"HitSpecial,omitempty"`
	GoldSpinTimes      *int64        `protobuf:"varint,10,opt,name=GoldSpinTimes" json:"GoldSpinTimes,omitempty"`
	RewardInfo         []*RewardInfo `protobuf:"bytes,11,rep,name=RewardInfo" json:"RewardInfo,omitempty"`
	FreeSpinTotalTimes *int64        `protobuf:"varint,12,opt,name=FreeSpinTotalTimes" json:"FreeSpinTotalTimes,omitempty"`
	XXX_unrecognized   []byte        `json:"-"`
}

func (m *LuckyTurntableInfo) Reset()                    { *m = LuckyTurntableInfo{} }
func (m *LuckyTurntableInfo) String() string            { return proto.CompactTextString(m) }
func (*LuckyTurntableInfo) ProtoMessage()               {}
func (*LuckyTurntableInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *LuckyTurntableInfo) GetJackpot() int64 {
	if m != nil && m.Jackpot != nil {
		return *m.Jackpot
	}
	return 0
}

func (m *LuckyTurntableInfo) GetSpinTimes() int64 {
	if m != nil && m.SpinTimes != nil {
		return *m.SpinTimes
	}
	return 0
}

func (m *LuckyTurntableInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LuckyTurntableInfo) GetCostSpinTimes() int64 {
	if m != nil && m.CostSpinTimes != nil {
		return *m.CostSpinTimes
	}
	return 0
}

func (m *LuckyTurntableInfo) GetCostCnt() int64 {
	if m != nil && m.CostCnt != nil {
		return *m.CostCnt
	}
	return 0
}

func (m *LuckyTurntableInfo) GetLockSpinTimes() int64 {
	if m != nil && m.LockSpinTimes != nil {
		return *m.LockSpinTimes
	}
	return 0
}

func (m *LuckyTurntableInfo) GetIsOpen() bool {
	if m != nil && m.IsOpen != nil {
		return *m.IsOpen
	}
	return false
}

func (m *LuckyTurntableInfo) GetHitSpecial() bool {
	if m != nil && m.HitSpecial != nil {
		return *m.HitSpecial
	}
	return false
}

func (m *LuckyTurntableInfo) GetGoldSpinTimes() int64 {
	if m != nil && m.GoldSpinTimes != nil {
		return *m.GoldSpinTimes
	}
	return 0
}

func (m *LuckyTurntableInfo) GetRewardInfo() []*RewardInfo {
	if m != nil {
		return m.RewardInfo
	}
	return nil
}

func (m *LuckyTurntableInfo) GetFreeSpinTotalTimes() int64 {
	if m != nil && m.FreeSpinTotalTimes != nil {
		return *m.FreeSpinTotalTimes
	}
	return 0
}

type LuckyTurntableReq struct {
	LuckyTurntableCount *int64 `protobuf:"varint,1,req,name=LuckyTurntableCount" json:"LuckyTurntableCount,omitempty"`
	PropConfigId        *int32 `protobuf:"varint,2,req,name=PropConfigId" json:"PropConfigId,omitempty"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *LuckyTurntableReq) Reset()                    { *m = LuckyTurntableReq{} }
func (m *LuckyTurntableReq) String() string            { return proto.CompactTextString(m) }
func (*LuckyTurntableReq) ProtoMessage()               {}
func (*LuckyTurntableReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *LuckyTurntableReq) GetLuckyTurntableCount() int64 {
	if m != nil && m.LuckyTurntableCount != nil {
		return *m.LuckyTurntableCount
	}
	return 0
}

func (m *LuckyTurntableReq) GetPropConfigId() int32 {
	if m != nil && m.PropConfigId != nil {
		return *m.PropConfigId
	}
	return 0
}

func init() {
	proto.RegisterType((*RewardInfo)(nil), "VK.Proto.RewardInfo")
	proto.RegisterType((*LuckyTurntableInfo)(nil), "VK.Proto.LuckyTurntableInfo")
	proto.RegisterType((*LuckyTurntableReq)(nil), "VK.Proto.LuckyTurntableReq")
}

func init() { proto.RegisterFile("client_luckyturntable.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x8a, 0xdb, 0x30,
	0x10, 0xc6, 0x71, 0x9c, 0x3f, 0xce, 0x24, 0x3d, 0x74, 0x12, 0x8a, 0x48, 0x4b, 0x31, 0xa6, 0x07,
	0xd3, 0x83, 0x29, 0xa5, 0x6f, 0xe0, 0xd2, 0xd6, 0x6d, 0xa0, 0x41, 0x09, 0xbd, 0x06, 0xd5, 0x56,
	0x5a, 0x13, 0x5b, 0xd2, 0xda, 0x0a, 0xbb, 0xb9, 0xed, 0x33, 0xec, 0x13, 0x2f, 0x92, 0xe3, 0x75,
	0x0c, 0xb9, 0x18, 0xcd, 0xef, 0xf3, 0x7c, 0xf3, 0xa1, 0x11, 0xbc, 0x4d, 0x8b, 0x9c, 0x0b, 0xbd,
	0x2f, 0x4e, 0xe9, 0xf1, 0xac, 0x4f, 0x95, 0xd0, 0xec, 0x6f, 0xc1, 0x23, 0x55, 0x49, 0x2d, 0xd1,
	0xfb, 0xf3, 0x2b, 0xda, 0x98, 0xd3, 0x6a, 0x51, 0xff, 0x67, 0x15, 0xcf, 0xf6, 0xa9, 0x2c, 0x4b,
	0x29, 0x1a, 0x39, 0x78, 0x74, 0x00, 0x28, 0xbf, 0x67, 0x55, 0x96, 0x88, 0x83, 0x44, 0x84, 0xe1,
	0xee, 0xac, 0x38, 0x71, 0xfc, 0x41, 0x38, 0xa2, 0xf6, 0x8c, 0x4b, 0x18, 0x25, 0x22, 0xe3, 0x0f,
	0x64, 0x60, 0x61, 0x53, 0xe0, 0x47, 0x18, 0x37, 0x7d, 0xc4, 0xf5, 0xdd, 0x70, 0xf6, 0x19, 0xa3,
	0x76, 0x90, 0xf9, 0xaa, 0xaf, 0x4c, 0x33, 0x7a, 0xf9, 0x03, 0xdf, 0xc1, 0x74, 0x97, 0x97, 0x7c,
	0xab, 0x59, 0xa9, 0xc8, 0xd0, 0x77, 0x42, 0x97, 0x76, 0x20, 0x78, 0x72, 0x01, 0xd7, 0x26, 0xfa,
	0xae, 0x8d, 0x6e, 0xa3, 0x10, 0x98, 0xfc, 0x64, 0xe9, 0x51, 0x49, 0x6d, 0xd3, 0xb8, 0xb4, 0x2d,
	0x8d, 0xdd, 0x56, 0xe5, 0xc2, 0x38, 0xd4, 0x36, 0x94, 0x4b, 0x3b, 0x80, 0x2b, 0xf0, 0x36, 0x05,
	0x3b, 0xf3, 0x2a, 0xc9, 0xc8, 0xd0, 0x8a, 0x2f, 0x35, 0x7e, 0x80, 0x57, 0xb1, 0xac, 0x75, 0xd7,
	0x3d, 0xb2, 0x61, 0xfa, 0xd0, 0x4c, 0x36, 0x20, 0x16, 0x9a, 0x8c, 0xad, 0xde, 0x96, 0xa6, 0x7f,
	0x2d, 0xd3, 0x63, 0xd7, 0x3f, 0x69, 0xfa, 0x7b, 0x10, 0xdf, 0xc0, 0x38, 0xa9, 0x7f, 0x2b, 0x2e,
	0x88, 0xe7, 0x3b, 0xa1, 0x47, 0x2f, 0x15, 0xbe, 0x07, 0xf8, 0x91, 0xeb, 0xad, 0xe2, 0x69, 0xce,
	0x0a, 0x32, 0xb5, 0xda, 0x15, 0x31, 0xee, 0xdf, 0x65, 0x91, 0x75, 0xee, 0xd0, 0xb8, 0xf7, 0x20,
	0x7e, 0xb9, 0x5e, 0x18, 0x99, 0xd9, 0xcb, 0x5f, 0x76, 0x97, 0xdf, 0x69, 0xf4, 0x7a, 0xb1, 0x11,
	0xe0, 0xb7, 0x8a, 0x73, 0x6b, 0x23, 0x35, 0x2b, 0x9a, 0x01, 0x73, 0x3b, 0xe0, 0x86, 0x12, 0xe4,
	0xf0, 0xba, 0xbf, 0x13, 0xca, 0xef, 0xf0, 0x13, 0x2c, 0xfa, 0x30, 0x96, 0x27, 0xd1, 0xae, 0xe7,
	0x96, 0x84, 0x01, 0xcc, 0xcd, 0x6b, 0x88, 0xa5, 0x38, 0xe4, 0xff, 0x92, 0xec, 0xf2, 0x84, 0x7a,
	0xec, 0x39, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x28, 0xc3, 0x1d, 0xbf, 0x02, 0x00, 0x00,
}
