// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shared_enums.proto

package VK_Proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sex int32

const (
	Sex_S_Empty  Sex = 0
	Sex_S_Male   Sex = 1
	Sex_S_Female Sex = 2
)

var Sex_name = map[int32]string{
	0: "S_Empty",
	1: "S_Male",
	2: "S_Female",
}
var Sex_value = map[string]int32{
	"S_Empty":  0,
	"S_Male":   1,
	"S_Female": 2,
}

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}
func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (x *Sex) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sex_value, data, "Sex")
	if err != nil {
		return err
	}
	*x = Sex(value)
	return nil
}
func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

type PlayerType int32

const (
	PlayerType_P_Empty  PlayerType = 0
	PlayerType_p_Normal PlayerType = 1
	PlayerType_P_Robot  PlayerType = 2
)

var PlayerType_name = map[int32]string{
	0: "P_Empty",
	1: "p_Normal",
	2: "P_Robot",
}
var PlayerType_value = map[string]int32{
	"P_Empty":  0,
	"p_Normal": 1,
	"P_Robot":  2,
}

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}
func (x PlayerType) String() string {
	return proto.EnumName(PlayerType_name, int32(x))
}
func (x *PlayerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlayerType_value, data, "PlayerType")
	if err != nil {
		return err
	}
	*x = PlayerType(value)
	return nil
}
func (PlayerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

// 服务器类型
type PeerType int32

const (
	PeerType_PT_Invalid   PeerType = 0
	PeerType_PT_Client    PeerType = 1
	PeerType_PT_Publisher PeerType = 2
	PeerType_PT_Cache     PeerType = 3
	PeerType_PT_Auth      PeerType = 4
	PeerType_PT_Global    PeerType = 5
	PeerType_PT_Exchanger PeerType = 6
	PeerType_PT_Web       PeerType = 7
)

var PeerType_name = map[int32]string{
	0: "PT_Invalid",
	1: "PT_Client",
	2: "PT_Publisher",
	3: "PT_Cache",
	4: "PT_Auth",
	5: "PT_Global",
	6: "PT_Exchanger",
	7: "PT_Web",
}
var PeerType_value = map[string]int32{
	"PT_Invalid":   0,
	"PT_Client":    1,
	"PT_Publisher": 2,
	"PT_Cache":     3,
	"PT_Auth":      4,
	"PT_Global":    5,
	"PT_Exchanger": 6,
	"PT_Web":       7,
}

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}
func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (x *PeerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerType_value, data, "PeerType")
	if err != nil {
		return err
	}
	*x = PeerType(value)
	return nil
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

// 节点类型
type NodeType int32

const (
	NodeType_NT_Game         NodeType = 1
	NodeType_NT_Room         NodeType = 2
	NodeType_NT_Arena        NodeType = 3
	NodeType_NT_Match        NodeType = 4
	NodeType_NT_Coordination NodeType = 5
)

var NodeType_name = map[int32]string{
	1: "NT_Game",
	2: "NT_Room",
	3: "NT_Arena",
	4: "NT_Match",
	5: "NT_Coordination",
}
var NodeType_value = map[string]int32{
	"NT_Game":         1,
	"NT_Room":         2,
	"NT_Arena":        3,
	"NT_Match":        4,
	"NT_Coordination": 5,
}

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}
func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (x *NodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NodeType_value, data, "NodeType")
	if err != nil {
		return err
	}
	*x = NodeType(value)
	return nil
}
func (NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{3} }

// 任务模块类型
type GameType int32

const (
	GameType_GT_Invalid GameType = 0
	GameType_GT_Hall    GameType = 1
	GameType_GT_SM      GameType = 2
	GameType_GT_Others  GameType = 3
)

var GameType_name = map[int32]string{
	0: "GT_Invalid",
	1: "GT_Hall",
	2: "GT_SM",
	3: "GT_Others",
}
var GameType_value = map[string]int32{
	"GT_Invalid": 0,
	"GT_Hall":    1,
	"GT_SM":      2,
	"GT_Others":  3,
}

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}
func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}
func (x *GameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameType_value, data, "GameType")
	if err != nil {
		return err
	}
	*x = GameType(value)
	return nil
}
func (GameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{4} }

// 任务分类
type TaskCategory int32

const (
	// 道具
	TaskCategory_TC_Prop TaskCategory = 1
	// 组合
	TaskCategory_TC_Combo TaskCategory = 2
)

var TaskCategory_name = map[int32]string{
	1: "TC_Prop",
	2: "TC_Combo",
}
var TaskCategory_value = map[string]int32{
	"TC_Prop":  1,
	"TC_Combo": 2,
}

func (x TaskCategory) Enum() *TaskCategory {
	p := new(TaskCategory)
	*p = x
	return p
}
func (x TaskCategory) String() string {
	return proto.EnumName(TaskCategory_name, int32(x))
}
func (x *TaskCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskCategory_value, data, "TaskCategory")
	if err != nil {
		return err
	}
	*x = TaskCategory(value)
	return nil
}
func (TaskCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{5} }

// 子游戏类型
type GameSort int32

const (
	// 其他
	GameSort_GS_Invalid GameSort = 0
	// 棋牌
	GameSort_GS_Chess GameSort = 1
	// 电子
	GameSort_GS_Slots GameSort = 2
	// 体育
	GameSort_GS_Sports GameSort = 3
	// 真人
	GameSort_GS_Real GameSort = 4
	// 彩票
	GameSort_GS_Lottery GameSort = 5
	// 捕鱼
	GameSort_GS_Fishing GameSort = 6
)

var GameSort_name = map[int32]string{
	0: "GS_Invalid",
	1: "GS_Chess",
	2: "GS_Slots",
	3: "GS_Sports",
	4: "GS_Real",
	5: "GS_Lottery",
	6: "GS_Fishing",
}
var GameSort_value = map[string]int32{
	"GS_Invalid": 0,
	"GS_Chess":   1,
	"GS_Slots":   2,
	"GS_Sports":  3,
	"GS_Real":    4,
	"GS_Lottery": 5,
	"GS_Fishing": 6,
}

func (x GameSort) Enum() *GameSort {
	p := new(GameSort)
	*p = x
	return p
}
func (x GameSort) String() string {
	return proto.EnumName(GameSort_name, int32(x))
}
func (x *GameSort) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameSort_value, data, "GameSort")
	if err != nil {
		return err
	}
	*x = GameSort(value)
	return nil
}
func (GameSort) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{6} }

// 效果类型
type EffectCategory int32

const (
	// 道具
	EffectCategory_EC_Prop EffectCategory = 1
	// Buf
	EffectCategory_EC_Buf EffectCategory = 2
	// 修改Buf冷却
	EffectCategory_EC_ModBufCD EffectCategory = 3
	// 在线奖励
	EffectCategory_EC_OnlineReward EffectCategory = 4
	// 乐透
	EffectCategory_EC_Lottery EffectCategory = 5
	// 效果组合
	EffectCategory_EC_Combo EffectCategory = 10
)

var EffectCategory_name = map[int32]string{
	1:  "EC_Prop",
	2:  "EC_Buf",
	3:  "EC_ModBufCD",
	4:  "EC_OnlineReward",
	5:  "EC_Lottery",
	10: "EC_Combo",
}
var EffectCategory_value = map[string]int32{
	"EC_Prop":         1,
	"EC_Buf":          2,
	"EC_ModBufCD":     3,
	"EC_OnlineReward": 4,
	"EC_Lottery":      5,
	"EC_Combo":        10,
}

func (x EffectCategory) Enum() *EffectCategory {
	p := new(EffectCategory)
	*p = x
	return p
}
func (x EffectCategory) String() string {
	return proto.EnumName(EffectCategory_name, int32(x))
}
func (x *EffectCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EffectCategory_value, data, "EffectCategory")
	if err != nil {
		return err
	}
	*x = EffectCategory(value)
	return nil
}
func (EffectCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{7} }

// Buf类型
type BufCategory int32

const (
	// 普通
	BufCategory_BC_OnlineReward BufCategory = 1
	// 修改产出
	BufCategory_BC_ModProp BufCategory = 2
	// 商店奖励
	BufCategory_BC_ShopReward BufCategory = 3
	// 乐透奖励
	BufCategory_BC_LottoReward BufCategory = 4
	// VIP
	BufCategory_BC_VipReward BufCategory = 5
)

var BufCategory_name = map[int32]string{
	1: "BC_OnlineReward",
	2: "BC_ModProp",
	3: "BC_ShopReward",
	4: "BC_LottoReward",
	5: "BC_VipReward",
}
var BufCategory_value = map[string]int32{
	"BC_OnlineReward": 1,
	"BC_ModProp":      2,
	"BC_ShopReward":   3,
	"BC_LottoReward":  4,
	"BC_VipReward":    5,
}

func (x BufCategory) Enum() *BufCategory {
	p := new(BufCategory)
	*p = x
	return p
}
func (x BufCategory) String() string {
	return proto.EnumName(BufCategory_name, int32(x))
}
func (x *BufCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BufCategory_value, data, "BufCategory")
	if err != nil {
		return err
	}
	*x = BufCategory(value)
	return nil
}
func (BufCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{8} }

// 道具类型
type PropType int32

const (
	// 财富
	PropType_EPT_Wealth PropType = 1
	// 头衔
	PropType_EPT_Title PropType = 2
	// 商城
	PropType_EPT_Shop PropType = 3
	// 乐透
	PropType_EPT_Lot PropType = 4
	// 礼物
	PropType_EPT_Gift PropType = 6
	// 统计
	PropType_EPT_Statistic PropType = 7
)

var PropType_name = map[int32]string{
	1: "EPT_Wealth",
	2: "EPT_Title",
	3: "EPT_Shop",
	4: "EPT_Lot",
	6: "EPT_Gift",
	7: "EPT_Statistic",
}
var PropType_value = map[string]int32{
	"EPT_Wealth":    1,
	"EPT_Title":     2,
	"EPT_Shop":      3,
	"EPT_Lot":       4,
	"EPT_Gift":      6,
	"EPT_Statistic": 7,
}

func (x PropType) Enum() *PropType {
	p := new(PropType)
	*p = x
	return p
}
func (x PropType) String() string {
	return proto.EnumName(PropType_name, int32(x))
}
func (x *PropType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PropType_value, data, "PropType")
	if err != nil {
		return err
	}
	*x = PropType(value)
	return nil
}
func (PropType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{9} }

// 道具ID
type PropConfigID int32

const (
	// 等级
	PropConfigID_EPC_Level PropConfigID = 1
	// 筹码
	PropConfigID_EPC_ChouMa PropConfigID = 2
	// 钻石
	PropConfigID_EPC_ZuanShi PropConfigID = 3
	// 经验
	PropConfigID_EPC_Experience PropConfigID = 4
	// Vip计费点
	PropConfigID_EPC_VIPPoint PropConfigID = 5
	// 荣誉
	PropConfigID_EPC_Honor PropConfigID = 6
	// 喇叭
	PropConfigID_EPC_Speaker PropConfigID = 7
	// 对别人的点赞
	PropConfigID_EPC_LikeOthers PropConfigID = 8
	// 绑定筹码
	PropConfigID_EPC_BindedChouMa PropConfigID = 9
	// 体验券
	PropConfigID_EPC_TestTicket PropConfigID = 11
	// 累积充值
	PropConfigID_EPC_TotalRecharge PropConfigID = 12
	// 秤砣
	PropConfigID_EPC_ChengTuo PropConfigID = 13
	// 标记
	PropConfigID_EPC_Flag PropConfigID = 14
	// C值
	PropConfigID_EPC_CValue PropConfigID = 15
	// 七天登录礼包
	PropConfigID_EPC_Seven PropConfigID = 16
	// VIP礼包
	PropConfigID_EPC_VIPGiftPackage PropConfigID = 17
	// 新年祝福
	PropConfigID_EPC_NewYearFarewell PropConfigID = 18
	// 代理等级
	PropConfigID_EPC_AgentLevel PropConfigID = 19
	// 活动币
	PropConfigID_EPC_ActivityCurrency PropConfigID = 20
	// 虚拟活动币(只用于统计充值获得活动币数量)
	PropConfigID_EPC_ActivityCurrency_Virtual PropConfigID = 21
	// 礼券
	PropConfigID_EPC_GiftVoucher PropConfigID = 22
	// 房卡
	PropConfigID_EPC_RoomCard PropConfigID = 23
	// 积分
	PropConfigID_EPC_Score PropConfigID = 24
	// 刮刮卡
	PropConfigID_EPC_ScratchCard PropConfigID = 25
	// 鸡蛋花
	PropConfigID_EPC_Plumeria PropConfigID = 26
	// mini筹码
	PropConfigID_EPC_MiniChouMa PropConfigID = 27
	// 改名卡
	PropConfigID_EPC_Mod_Name_Card PropConfigID = 28
	// 点卡碎片
	PropConfigID_EPC_PointCard_Fragment PropConfigID = 29
	// 活跃度
	PropConfigID_EPC_Liveness PropConfigID = 30
	// 试玩筹码
	PropConfigID_EPC_TryChouMa PropConfigID = 31
	// 试玩筹码兑换额度
	PropConfigID_EPC_TryChouMaQuota PropConfigID = 32
	// 试玩秤砣
	PropConfigID_EPC_TrialChengTuo PropConfigID = 33
	// 大奖票
	PropConfigID_EPC_Big_Reward_Ticket PropConfigID = 34
	// 税收
	PropConfigID_EPC_Tax PropConfigID = 35
	// 理论流水
	PropConfigID_EPC_Theoretical_TotalLose PropConfigID = 36
	// 保险箱
	PropConfigID_EPC_SafeBox PropConfigID = 37
	// 月充值
	PropConfigID_EPC_MonthRecharge PropConfigID = 38
	// 月流水
	PropConfigID_EPC_MonthLose PropConfigID = 39
	// 累计提款
	PropConfigID_EPC_TotalWithdrawal PropConfigID = 40
	// 累计点卡兑换
	PropConfigID_EPC_TotalCardExchange PropConfigID = 41
	// 累计系统赠送
	PropConfigID_EPC_TotalSystemGive PropConfigID = 42
	// 返利积分
	PropConfigID_EPC_RebateScore PropConfigID = 43
	// 适用电子/捕鱼类游戏
	PropConfigID_EPC_Video_Catch_Game PropConfigID = 51
	// 适用真人类游戏
	PropConfigID_EPC_Live_Game PropConfigID = 52
	// 适用体育类游戏
	PropConfigID_EPC_Sports_Game PropConfigID = 53
	// 适用棋牌类游戏
	PropConfigID_EPC_Card_Game PropConfigID = 54
	// 捕鱼大乱斗 - 青铜鱼雷
	PropConfigID_EPC_FishV1 PropConfigID = 1001
	// 捕鱼大乱斗 - 白银鱼雷
	PropConfigID_EPC_FishV2 PropConfigID = 1002
	// 捕鱼大乱斗 - 黄金鱼雷
	PropConfigID_EPC_FishV3 PropConfigID = 1003
	// 捕鱼大乱斗 - 天使鱼雷
	PropConfigID_EPC_FishV4 PropConfigID = 1004
	// 捕鱼大乱斗 - 火龙鱼雷
	PropConfigID_EPC_FishV5 PropConfigID = 1005
	// 捕鱼大乱斗 - 白银鱼雷（赠送）
	PropConfigID_EPC_GiftFishV2 PropConfigID = 1006
	// 捕鱼大乱斗 - 黄金鱼雷（赠送）
	PropConfigID_EPC_GiftFishV3 PropConfigID = 1007
	// 捕鱼大乱斗 - 白银鱼雷（赠送）奖励
	PropConfigID_EPC_GiftFishV2Chouma PropConfigID = 1008
	// 捕鱼大乱斗 - 黄金鱼雷（赠送）奖励
	PropConfigID_EPC_GiftFishV3Chouma PropConfigID = 1009
	// 捕鱼大乱斗 - 奖池中奖奖励
	PropConfigID_EPC_Jackpot PropConfigID = 1010
	// 捕鱼大乱斗 - 大象炮台
	PropConfigID_EPC_Fish_Battery_One PropConfigID = 1011
	// 捕鱼大乱斗 - 火箭炮1
	PropConfigID_EPC_Fish_RocketLauncher_One PropConfigID = 1012
	// 捕鱼大乱斗 - 火箭炮2
	PropConfigID_EPC_Fish_RocketLauncher_Two PropConfigID = 1013
	// 捕鱼大乱斗 - 火箭炮3
	PropConfigID_EPC_Fish_RocketLauncher_Three PropConfigID = 1014
	// 捕鱼大乱斗 - 火箭炮4
	PropConfigID_EPC_Fish_RocketLauncher_Four PropConfigID = 1015
	// 青铜鱼雷(赠)
	PropConfigID_EPC_Torpedo_1016 PropConfigID = 1016
	// 天使鱼雷(赠)
	PropConfigID_EPC_Torpedo_1017 PropConfigID = 1017
	// 火龙鱼雷(赠)
	PropConfigID_EPC_Torpedo_1018 PropConfigID = 1018
	// 青铜鱼雷（赠送）奖励
	PropConfigID_EPC_Torpedo_1019 PropConfigID = 1019
	// 天使鱼雷（赠送）奖励
	PropConfigID_EPC_Torpedo_1020 PropConfigID = 1020
	// 火龙鱼雷（赠送）奖励
	PropConfigID_EPC_Torpedo_1021 PropConfigID = 1021
	// 火箭炮1(赠)
	PropConfigID_EPC_RocketGun_1022 PropConfigID = 1022
	// 火箭炮2(赠)
	PropConfigID_EPC_RocketGun_1023 PropConfigID = 1023
	// 火箭炮3(赠)
	PropConfigID_EPC_RocketGun_1024 PropConfigID = 1024
	// 火箭炮4(赠)
	PropConfigID_EPC_RocketGun_1025 PropConfigID = 1025
	// 火箭炮1（赠送）奖励
	PropConfigID_EPC_RocketGun_1026 PropConfigID = 1026
	// 火箭炮2（赠送）奖励
	PropConfigID_EPC_RocketGun_1027 PropConfigID = 1027
	// 火箭炮3（赠送）奖励
	PropConfigID_EPC_RocketGun_1028 PropConfigID = 1028
	// 火箭炮4（赠送）奖励
	PropConfigID_EPC_RocketGun_1029 PropConfigID = 1029
	// 召唤道具
	PropConfigID_EPC_Summon_1030 PropConfigID = 1030
	// 青铜核弹头
	PropConfigID_EPC_Nuclear_Bomb_1031 PropConfigID = 1031
	// 白银核弹头
	PropConfigID_EPC_Nuclear_Bomb_1032 PropConfigID = 1032
	// 黄金核弹头
	PropConfigID_EPC_Nuclear_Bomb_1033 PropConfigID = 1033
	// 铂金核弹头
	PropConfigID_EPC_Nuclear_Bomb_1034 PropConfigID = 1034
	// 青铜核弹头(赠)
	PropConfigID_EPC_Nuclear_Bomb_1035 PropConfigID = 1035
	// 白银核弹头(赠)
	PropConfigID_EPC_Nuclear_Bomb_1036 PropConfigID = 1036
	// 黄金核弹头(赠)
	PropConfigID_EPC_Nuclear_Bomb_1037 PropConfigID = 1037
	// 铂金核弹头(赠)
	PropConfigID_EPC_Nuclear_Bomb_1038 PropConfigID = 1038
	// 青铜核弹头（赠送）奖励
	PropConfigID_EPC_Nuclear_Bomb_1039 PropConfigID = 1039
	// 白银核弹头（赠送）奖励
	PropConfigID_EPC_Nuclear_Bomb_1040 PropConfigID = 1040
	// 黄金核弹头（赠送）奖励
	PropConfigID_EPC_Nuclear_Bomb_1041 PropConfigID = 1041
	// 铂金核弹头（赠送）奖励
	PropConfigID_EPC_Nuclear_Bomb_1042 PropConfigID = 1042
	// 飞机召唤道具
	PropConfigID_EPC_Summon_1043 PropConfigID = 1043
	// 捕鱼大乱斗 - 青铜鱼雷（体验）
	PropConfigID_EPC_FishV1_1044 PropConfigID = 1044
	// 捕鱼大乱斗 - 白银鱼雷（体验）
	PropConfigID_EPC_FishV2_1045 PropConfigID = 1045
	// 捕鱼大乱斗 - 黄金鱼雷（体验）
	PropConfigID_EPC_FishV3_1046 PropConfigID = 1046
	// 捕鱼大乱斗 - 天使鱼雷（体验）
	PropConfigID_EPC_FishV4_1047 PropConfigID = 1047
	// 捕鱼大乱斗 - 火龙鱼雷（体验）
	PropConfigID_EPC_FishV5_1048 PropConfigID = 1048
	// 火箭炮1(体验)
	PropConfigID_EPC_RocketGun_1049 PropConfigID = 1049
	// 火箭炮2(体验)
	PropConfigID_EPC_RocketGun_1050 PropConfigID = 1050
	// 火箭炮3(体验)
	PropConfigID_EPC_RocketGun_1051 PropConfigID = 1051
	// 火箭炮4(体验)
	PropConfigID_EPC_RocketGun_1052 PropConfigID = 1052
	// 火箭炮5
	PropConfigID_EPC_RocketGun_1053 PropConfigID = 1053
	// 火箭炮5(体验)
	PropConfigID_EPC_RocketGun_1054 PropConfigID = 1054
	// 火箭炮5（赠）
	PropConfigID_EPC_RocketGun_1055 PropConfigID = 1055
	// 火箭炮5（赠送奖励）
	PropConfigID_EPC_RocketGun_1056 PropConfigID = 1056
	// 兑换点卡类2001-2015
	// Ex.Viettel.1001
	PropConfigID_EPC_DianKa_Viettel_2 PropConfigID = 11001
	// Ex.Viettel.1002
	PropConfigID_EPC_DianKa_Viettel_5 PropConfigID = 11002
	// Ex.Viettel.1003
	PropConfigID_EPC_DianKa_Viettel_10 PropConfigID = 11003
	// Ex.Viettel.1004
	PropConfigID_EPC_DianKa_Viettel_20 PropConfigID = 11004
	// Ex.Viettel.1005
	PropConfigID_EPC_DianKa_Viettel_50 PropConfigID = 11005
	// Ex.Mobi.1001
	PropConfigID_EPC_DianKa_Mobi_2 PropConfigID = 12001
	// Ex.Mobi.1002
	PropConfigID_EPC_DianKa_Mobi_5 PropConfigID = 12002
	// Ex.Mobi.1003
	PropConfigID_EPC_DianKa_Mobi_10 PropConfigID = 12003
	// Ex.Mobi.1004
	PropConfigID_EPC_DianKa_Mobi_20 PropConfigID = 12004
	// Ex.Mobi.1005
	PropConfigID_EPC_DianKa_Mobi_50 PropConfigID = 12005
	// Ex.Vina.1001
	PropConfigID_EPC_DianKa_Vina_2 PropConfigID = 13001
	// Ex.Vina.1002
	PropConfigID_EPC_DianKa_Vina_5 PropConfigID = 13002
	// Ex.Vina.1003
	PropConfigID_EPC_DianKa_Vina_10 PropConfigID = 13003
	// Ex.Vina.1004
	PropConfigID_EPC_DianKa_Vina_20 PropConfigID = 13004
	// Ex.Vina.1005
	PropConfigID_EPC_DianKa_Vina_50 PropConfigID = 13005
	// 头像框1
	PropConfigID_EPC_Avatar_Box_1 PropConfigID = 3001
	// 头像框2
	PropConfigID_EPC_Avatar_Box_2 PropConfigID = 3002
	// 新手签到头像框
	PropConfigID_EPC_Newbie_Sign_Frame PropConfigID = 3003
	// Dummy积分赛门票
	PropConfigID_EPC_Dummy_4001 PropConfigID = 4001
	// Dummy积分赛复活券
	PropConfigID_EPC_Dummy_4002 PropConfigID = 4002
	// Dummy周赛门票
	PropConfigID_EPC_Dummy_4003 PropConfigID = 4003
	// Dummy周赛复活券
	PropConfigID_EPC_Dummy_4004 PropConfigID = 4004
	// DummyVIP赛门票
	PropConfigID_EPC_Dummy_4005 PropConfigID = 4005
	// DummyVIP赛复活券
	PropConfigID_EPC_Dummy_4006 PropConfigID = 4006
	// Dummy勇士赛门票
	PropConfigID_EPC_Dummy_4007 PropConfigID = 4007
	// 统计类
	// 总赢
	PropConfigID_EPC_TotalWin PropConfigID = 5001
	// 总消耗
	PropConfigID_EPC_TotalLose PropConfigID = 5002
	// 大奖次数
	PropConfigID_EPC_BigWinTimes PropConfigID = 5003
	// 免费次数
	PropConfigID_EPC_FreeTimes PropConfigID = 5004
	// dummy类棋牌统计
	PropConfigID_EPC_ChessStatic PropConfigID = 5005
	// 试玩总赢
	PropConfigID_EPC_TrialTotalWin PropConfigID = 5011
	// 试玩总消耗
	PropConfigID_EPC_TrialTotalLose PropConfigID = 5012
	// 最大胜利
	PropConfigID_EPC_MaxWin PropConfigID = 6011
	// 最大单笔胜利
	PropConfigID_EPC_MaxSingleWin PropConfigID = 6012
	// 总次数
	PropConfigID_EPC_TotalTimes PropConfigID = 6013
	// 赢次数
	PropConfigID_EPC_WinTimes PropConfigID = 6014
	// 在线时长
	PropConfigID_EPC_OnlineTime PropConfigID = 6015
	// 历史最大筹码数量
	PropConfigID_EPC_LastMaxChm PropConfigID = 6016
	// 玩家每日累积在线时长
	PropConfigID_EPC_Daily_OnlineTime PropConfigID = 6017
	// 最长在线时长
	PropConfigID_EPC_MaxOnlineTime PropConfigID = 6018
	// Dummy2Q牌型密函
	PropConfigID_EPC_Dummy_7011 PropConfigID = 7011
	// Dummy2Q牌型密函钥匙
	PropConfigID_EPC_Dummy_7012 PropConfigID = 7012
	// pokdeng牌型增益卡
	PropConfigID_EPC_Pokdeng_8001 PropConfigID = 8001
	// 超V
	PropConfigID_EPC_SupperVIP PropConfigID = 9000
	// 连环夺宝解锁礼包
	PropConfigID_EPC_Lhdb_Unlock_9001 PropConfigID = 9001
	// 50充值卡
	PropConfigID_EPC_50Card PropConfigID = 10001
	// 150充值卡
	PropConfigID_EPC_150Card PropConfigID = 10002
	// 300充值卡
	PropConfigID_EPC_300Card PropConfigID = 10003
	// 500充值卡
	PropConfigID_EPC_500Card PropConfigID = 10004
	// 1000充值卡
	PropConfigID_EPC_1000Card PropConfigID = 10005
	// 90充值卡
	PropConfigID_EPC_90Card PropConfigID = 10006
	// Oppo A3s
	PropConfigID_EPC_OppoA3s PropConfigID = 20001
	// Vivo Y17
	PropConfigID_EPC_VivoY17 PropConfigID = 20002
	// 小牌黄金
	PropConfigID_EPC_SlipGold PropConfigID = 20003
	// iPhone XR
	PropConfigID_EPC_iPhoneXR PropConfigID = 20004
	// Samsung A80
	PropConfigID_EPC_SamsungA80 PropConfigID = 20005
	// 黄金项链-1THB
	PropConfigID_EPC_Gold_Necklace_One PropConfigID = 20006
	// 黄金项链-0.5THB
	PropConfigID_EPC_Gold_Necklace_Half PropConfigID = 20007
	// Samsung A30
	PropConfigID_EPC_SamsungA30 PropConfigID = 20008
	// Vivo S1
	PropConfigID_EPC_VivoS1 PropConfigID = 20009
	// Oppo A9 2020
	PropConfigID_EPC_Oppo_A9_2020 PropConfigID = 20010
	// Oppo A5 2020
	PropConfigID_EPC_Oppo_A5_2020 PropConfigID = 20011
	// iPhone11 64GB
	PropConfigID_EPC_IPhone11_64GB PropConfigID = 20012
	// iPhone11 Pro 64GB
	PropConfigID_EPC_IPhone11_Pro_64GB PropConfigID = 20013
	// Samsung S10+
	PropConfigID_EPC_Samsung_S10_Plus PropConfigID = 20014
	// Galaxy Note10+
	PropConfigID_EPC_Galaxy_Note10_Plus PropConfigID = 20015
	// Huiwei Y7
	PropConfigID_EPC_Huiwei_Y7 PropConfigID = 20016
	// Vivo Y11
	PropConfigID_EPC_Vivo_Y11 PropConfigID = 20017
	// Samsung A10s
	PropConfigID_EPC_Samsung_A10s PropConfigID = 20018
	// Oppo A31 2020
	PropConfigID_EPC_Oppo_A31_2020 PropConfigID = 20019
	// IPad_102
	PropConfigID_EPC_IPad_102 PropConfigID = 20020
	// iPhoneSE_2020
	PropConfigID_EPC_IPhoneSE_2020 PropConfigID = 20021
	// Oppo A92 2020
	PropConfigID_EPC_Oppo_A92_2020 PropConfigID = 20022
	// bank exchange froze
	PropConfigID_EPC_Bank_Exchange_Froze PropConfigID = 20023
	// 独立日礼包
	PropConfigID_EPC_IndependenceDayGiftPackage PropConfigID = 20024
	// 游戏开局前锁住筹码
	PropConfigID_EPC_Game_Lock_ChouMa PropConfigID = 99002
	// tlmn抽水
	PropConfigID_EPC_TLMN_Kickback_ChouMa PropConfigID = 99003
)

var PropConfigID_name = map[int32]string{
	1:     "EPC_Level",
	2:     "EPC_ChouMa",
	3:     "EPC_ZuanShi",
	4:     "EPC_Experience",
	5:     "EPC_VIPPoint",
	6:     "EPC_Honor",
	7:     "EPC_Speaker",
	8:     "EPC_LikeOthers",
	9:     "EPC_BindedChouMa",
	11:    "EPC_TestTicket",
	12:    "EPC_TotalRecharge",
	13:    "EPC_ChengTuo",
	14:    "EPC_Flag",
	15:    "EPC_CValue",
	16:    "EPC_Seven",
	17:    "EPC_VIPGiftPackage",
	18:    "EPC_NewYearFarewell",
	19:    "EPC_AgentLevel",
	20:    "EPC_ActivityCurrency",
	21:    "EPC_ActivityCurrency_Virtual",
	22:    "EPC_GiftVoucher",
	23:    "EPC_RoomCard",
	24:    "EPC_Score",
	25:    "EPC_ScratchCard",
	26:    "EPC_Plumeria",
	27:    "EPC_MiniChouMa",
	28:    "EPC_Mod_Name_Card",
	29:    "EPC_PointCard_Fragment",
	30:    "EPC_Liveness",
	31:    "EPC_TryChouMa",
	32:    "EPC_TryChouMaQuota",
	33:    "EPC_TrialChengTuo",
	34:    "EPC_Big_Reward_Ticket",
	35:    "EPC_Tax",
	36:    "EPC_Theoretical_TotalLose",
	37:    "EPC_SafeBox",
	38:    "EPC_MonthRecharge",
	39:    "EPC_MonthLose",
	40:    "EPC_TotalWithdrawal",
	41:    "EPC_TotalCardExchange",
	42:    "EPC_TotalSystemGive",
	43:    "EPC_RebateScore",
	51:    "EPC_Video_Catch_Game",
	52:    "EPC_Live_Game",
	53:    "EPC_Sports_Game",
	54:    "EPC_Card_Game",
	1001:  "EPC_FishV1",
	1002:  "EPC_FishV2",
	1003:  "EPC_FishV3",
	1004:  "EPC_FishV4",
	1005:  "EPC_FishV5",
	1006:  "EPC_GiftFishV2",
	1007:  "EPC_GiftFishV3",
	1008:  "EPC_GiftFishV2Chouma",
	1009:  "EPC_GiftFishV3Chouma",
	1010:  "EPC_Jackpot",
	1011:  "EPC_Fish_Battery_One",
	1012:  "EPC_Fish_RocketLauncher_One",
	1013:  "EPC_Fish_RocketLauncher_Two",
	1014:  "EPC_Fish_RocketLauncher_Three",
	1015:  "EPC_Fish_RocketLauncher_Four",
	1016:  "EPC_Torpedo_1016",
	1017:  "EPC_Torpedo_1017",
	1018:  "EPC_Torpedo_1018",
	1019:  "EPC_Torpedo_1019",
	1020:  "EPC_Torpedo_1020",
	1021:  "EPC_Torpedo_1021",
	1022:  "EPC_RocketGun_1022",
	1023:  "EPC_RocketGun_1023",
	1024:  "EPC_RocketGun_1024",
	1025:  "EPC_RocketGun_1025",
	1026:  "EPC_RocketGun_1026",
	1027:  "EPC_RocketGun_1027",
	1028:  "EPC_RocketGun_1028",
	1029:  "EPC_RocketGun_1029",
	1030:  "EPC_Summon_1030",
	1031:  "EPC_Nuclear_Bomb_1031",
	1032:  "EPC_Nuclear_Bomb_1032",
	1033:  "EPC_Nuclear_Bomb_1033",
	1034:  "EPC_Nuclear_Bomb_1034",
	1035:  "EPC_Nuclear_Bomb_1035",
	1036:  "EPC_Nuclear_Bomb_1036",
	1037:  "EPC_Nuclear_Bomb_1037",
	1038:  "EPC_Nuclear_Bomb_1038",
	1039:  "EPC_Nuclear_Bomb_1039",
	1040:  "EPC_Nuclear_Bomb_1040",
	1041:  "EPC_Nuclear_Bomb_1041",
	1042:  "EPC_Nuclear_Bomb_1042",
	1043:  "EPC_Summon_1043",
	1044:  "EPC_FishV1_1044",
	1045:  "EPC_FishV2_1045",
	1046:  "EPC_FishV3_1046",
	1047:  "EPC_FishV4_1047",
	1048:  "EPC_FishV5_1048",
	1049:  "EPC_RocketGun_1049",
	1050:  "EPC_RocketGun_1050",
	1051:  "EPC_RocketGun_1051",
	1052:  "EPC_RocketGun_1052",
	1053:  "EPC_RocketGun_1053",
	1054:  "EPC_RocketGun_1054",
	1055:  "EPC_RocketGun_1055",
	1056:  "EPC_RocketGun_1056",
	11001: "EPC_DianKa_Viettel_2",
	11002: "EPC_DianKa_Viettel_5",
	11003: "EPC_DianKa_Viettel_10",
	11004: "EPC_DianKa_Viettel_20",
	11005: "EPC_DianKa_Viettel_50",
	12001: "EPC_DianKa_Mobi_2",
	12002: "EPC_DianKa_Mobi_5",
	12003: "EPC_DianKa_Mobi_10",
	12004: "EPC_DianKa_Mobi_20",
	12005: "EPC_DianKa_Mobi_50",
	13001: "EPC_DianKa_Vina_2",
	13002: "EPC_DianKa_Vina_5",
	13003: "EPC_DianKa_Vina_10",
	13004: "EPC_DianKa_Vina_20",
	13005: "EPC_DianKa_Vina_50",
	3001:  "EPC_Avatar_Box_1",
	3002:  "EPC_Avatar_Box_2",
	3003:  "EPC_Newbie_Sign_Frame",
	4001:  "EPC_Dummy_4001",
	4002:  "EPC_Dummy_4002",
	4003:  "EPC_Dummy_4003",
	4004:  "EPC_Dummy_4004",
	4005:  "EPC_Dummy_4005",
	4006:  "EPC_Dummy_4006",
	4007:  "EPC_Dummy_4007",
	5001:  "EPC_TotalWin",
	5002:  "EPC_TotalLose",
	5003:  "EPC_BigWinTimes",
	5004:  "EPC_FreeTimes",
	5005:  "EPC_ChessStatic",
	5011:  "EPC_TrialTotalWin",
	5012:  "EPC_TrialTotalLose",
	6011:  "EPC_MaxWin",
	6012:  "EPC_MaxSingleWin",
	6013:  "EPC_TotalTimes",
	6014:  "EPC_WinTimes",
	6015:  "EPC_OnlineTime",
	6016:  "EPC_LastMaxChm",
	6017:  "EPC_Daily_OnlineTime",
	6018:  "EPC_MaxOnlineTime",
	7011:  "EPC_Dummy_7011",
	7012:  "EPC_Dummy_7012",
	8001:  "EPC_Pokdeng_8001",
	9000:  "EPC_SupperVIP",
	9001:  "EPC_Lhdb_Unlock_9001",
	10001: "EPC_50Card",
	10002: "EPC_150Card",
	10003: "EPC_300Card",
	10004: "EPC_500Card",
	10005: "EPC_1000Card",
	10006: "EPC_90Card",
	20001: "EPC_OppoA3s",
	20002: "EPC_VivoY17",
	20003: "EPC_SlipGold",
	20004: "EPC_iPhoneXR",
	20005: "EPC_SamsungA80",
	20006: "EPC_Gold_Necklace_One",
	20007: "EPC_Gold_Necklace_Half",
	20008: "EPC_SamsungA30",
	20009: "EPC_VivoS1",
	20010: "EPC_Oppo_A9_2020",
	20011: "EPC_Oppo_A5_2020",
	20012: "EPC_IPhone11_64GB",
	20013: "EPC_IPhone11_Pro_64GB",
	20014: "EPC_Samsung_S10_Plus",
	20015: "EPC_Galaxy_Note10_Plus",
	20016: "EPC_Huiwei_Y7",
	20017: "EPC_Vivo_Y11",
	20018: "EPC_Samsung_A10s",
	20019: "EPC_Oppo_A31_2020",
	20020: "EPC_IPad_102",
	20021: "EPC_IPhoneSE_2020",
	20022: "EPC_Oppo_A92_2020",
	20023: "EPC_Bank_Exchange_Froze",
	20024: "EPC_IndependenceDayGiftPackage",
	99002: "EPC_Game_Lock_ChouMa",
	99003: "EPC_TLMN_Kickback_ChouMa",
}
var PropConfigID_value = map[string]int32{
	"EPC_Level":                      1,
	"EPC_ChouMa":                     2,
	"EPC_ZuanShi":                    3,
	"EPC_Experience":                 4,
	"EPC_VIPPoint":                   5,
	"EPC_Honor":                      6,
	"EPC_Speaker":                    7,
	"EPC_LikeOthers":                 8,
	"EPC_BindedChouMa":               9,
	"EPC_TestTicket":                 11,
	"EPC_TotalRecharge":              12,
	"EPC_ChengTuo":                   13,
	"EPC_Flag":                       14,
	"EPC_CValue":                     15,
	"EPC_Seven":                      16,
	"EPC_VIPGiftPackage":             17,
	"EPC_NewYearFarewell":            18,
	"EPC_AgentLevel":                 19,
	"EPC_ActivityCurrency":           20,
	"EPC_ActivityCurrency_Virtual":   21,
	"EPC_GiftVoucher":                22,
	"EPC_RoomCard":                   23,
	"EPC_Score":                      24,
	"EPC_ScratchCard":                25,
	"EPC_Plumeria":                   26,
	"EPC_MiniChouMa":                 27,
	"EPC_Mod_Name_Card":              28,
	"EPC_PointCard_Fragment":         29,
	"EPC_Liveness":                   30,
	"EPC_TryChouMa":                  31,
	"EPC_TryChouMaQuota":             32,
	"EPC_TrialChengTuo":              33,
	"EPC_Big_Reward_Ticket":          34,
	"EPC_Tax":                        35,
	"EPC_Theoretical_TotalLose":      36,
	"EPC_SafeBox":                    37,
	"EPC_MonthRecharge":              38,
	"EPC_MonthLose":                  39,
	"EPC_TotalWithdrawal":            40,
	"EPC_TotalCardExchange":          41,
	"EPC_TotalSystemGive":            42,
	"EPC_RebateScore":                43,
	"EPC_Video_Catch_Game":           51,
	"EPC_Live_Game":                  52,
	"EPC_Sports_Game":                53,
	"EPC_Card_Game":                  54,
	"EPC_FishV1":                     1001,
	"EPC_FishV2":                     1002,
	"EPC_FishV3":                     1003,
	"EPC_FishV4":                     1004,
	"EPC_FishV5":                     1005,
	"EPC_GiftFishV2":                 1006,
	"EPC_GiftFishV3":                 1007,
	"EPC_GiftFishV2Chouma":           1008,
	"EPC_GiftFishV3Chouma":           1009,
	"EPC_Jackpot":                    1010,
	"EPC_Fish_Battery_One":           1011,
	"EPC_Fish_RocketLauncher_One":    1012,
	"EPC_Fish_RocketLauncher_Two":    1013,
	"EPC_Fish_RocketLauncher_Three":  1014,
	"EPC_Fish_RocketLauncher_Four":   1015,
	"EPC_Torpedo_1016":               1016,
	"EPC_Torpedo_1017":               1017,
	"EPC_Torpedo_1018":               1018,
	"EPC_Torpedo_1019":               1019,
	"EPC_Torpedo_1020":               1020,
	"EPC_Torpedo_1021":               1021,
	"EPC_RocketGun_1022":             1022,
	"EPC_RocketGun_1023":             1023,
	"EPC_RocketGun_1024":             1024,
	"EPC_RocketGun_1025":             1025,
	"EPC_RocketGun_1026":             1026,
	"EPC_RocketGun_1027":             1027,
	"EPC_RocketGun_1028":             1028,
	"EPC_RocketGun_1029":             1029,
	"EPC_Summon_1030":                1030,
	"EPC_Nuclear_Bomb_1031":          1031,
	"EPC_Nuclear_Bomb_1032":          1032,
	"EPC_Nuclear_Bomb_1033":          1033,
	"EPC_Nuclear_Bomb_1034":          1034,
	"EPC_Nuclear_Bomb_1035":          1035,
	"EPC_Nuclear_Bomb_1036":          1036,
	"EPC_Nuclear_Bomb_1037":          1037,
	"EPC_Nuclear_Bomb_1038":          1038,
	"EPC_Nuclear_Bomb_1039":          1039,
	"EPC_Nuclear_Bomb_1040":          1040,
	"EPC_Nuclear_Bomb_1041":          1041,
	"EPC_Nuclear_Bomb_1042":          1042,
	"EPC_Summon_1043":                1043,
	"EPC_FishV1_1044":                1044,
	"EPC_FishV2_1045":                1045,
	"EPC_FishV3_1046":                1046,
	"EPC_FishV4_1047":                1047,
	"EPC_FishV5_1048":                1048,
	"EPC_RocketGun_1049":             1049,
	"EPC_RocketGun_1050":             1050,
	"EPC_RocketGun_1051":             1051,
	"EPC_RocketGun_1052":             1052,
	"EPC_RocketGun_1053":             1053,
	"EPC_RocketGun_1054":             1054,
	"EPC_RocketGun_1055":             1055,
	"EPC_RocketGun_1056":             1056,
	"EPC_DianKa_Viettel_2":           11001,
	"EPC_DianKa_Viettel_5":           11002,
	"EPC_DianKa_Viettel_10":          11003,
	"EPC_DianKa_Viettel_20":          11004,
	"EPC_DianKa_Viettel_50":          11005,
	"EPC_DianKa_Mobi_2":              12001,
	"EPC_DianKa_Mobi_5":              12002,
	"EPC_DianKa_Mobi_10":             12003,
	"EPC_DianKa_Mobi_20":             12004,
	"EPC_DianKa_Mobi_50":             12005,
	"EPC_DianKa_Vina_2":              13001,
	"EPC_DianKa_Vina_5":              13002,
	"EPC_DianKa_Vina_10":             13003,
	"EPC_DianKa_Vina_20":             13004,
	"EPC_DianKa_Vina_50":             13005,
	"EPC_Avatar_Box_1":               3001,
	"EPC_Avatar_Box_2":               3002,
	"EPC_Newbie_Sign_Frame":          3003,
	"EPC_Dummy_4001":                 4001,
	"EPC_Dummy_4002":                 4002,
	"EPC_Dummy_4003":                 4003,
	"EPC_Dummy_4004":                 4004,
	"EPC_Dummy_4005":                 4005,
	"EPC_Dummy_4006":                 4006,
	"EPC_Dummy_4007":                 4007,
	"EPC_TotalWin":                   5001,
	"EPC_TotalLose":                  5002,
	"EPC_BigWinTimes":                5003,
	"EPC_FreeTimes":                  5004,
	"EPC_ChessStatic":                5005,
	"EPC_TrialTotalWin":              5011,
	"EPC_TrialTotalLose":             5012,
	"EPC_MaxWin":                     6011,
	"EPC_MaxSingleWin":               6012,
	"EPC_TotalTimes":                 6013,
	"EPC_WinTimes":                   6014,
	"EPC_OnlineTime":                 6015,
	"EPC_LastMaxChm":                 6016,
	"EPC_Daily_OnlineTime":           6017,
	"EPC_MaxOnlineTime":              6018,
	"EPC_Dummy_7011":                 7011,
	"EPC_Dummy_7012":                 7012,
	"EPC_Pokdeng_8001":               8001,
	"EPC_SupperVIP":                  9000,
	"EPC_Lhdb_Unlock_9001":           9001,
	"EPC_50Card":                     10001,
	"EPC_150Card":                    10002,
	"EPC_300Card":                    10003,
	"EPC_500Card":                    10004,
	"EPC_1000Card":                   10005,
	"EPC_90Card":                     10006,
	"EPC_OppoA3s":                    20001,
	"EPC_VivoY17":                    20002,
	"EPC_SlipGold":                   20003,
	"EPC_iPhoneXR":                   20004,
	"EPC_SamsungA80":                 20005,
	"EPC_Gold_Necklace_One":          20006,
	"EPC_Gold_Necklace_Half":         20007,
	"EPC_SamsungA30":                 20008,
	"EPC_VivoS1":                     20009,
	"EPC_Oppo_A9_2020":               20010,
	"EPC_Oppo_A5_2020":               20011,
	"EPC_IPhone11_64GB":              20012,
	"EPC_IPhone11_Pro_64GB":          20013,
	"EPC_Samsung_S10_Plus":           20014,
	"EPC_Galaxy_Note10_Plus":         20015,
	"EPC_Huiwei_Y7":                  20016,
	"EPC_Vivo_Y11":                   20017,
	"EPC_Samsung_A10s":               20018,
	"EPC_Oppo_A31_2020":              20019,
	"EPC_IPad_102":                   20020,
	"EPC_IPhoneSE_2020":              20021,
	"EPC_Oppo_A92_2020":              20022,
	"EPC_Bank_Exchange_Froze":        20023,
	"EPC_IndependenceDayGiftPackage": 20024,
	"EPC_Game_Lock_ChouMa":           99002,
	"EPC_TLMN_Kickback_ChouMa":       99003,
}

func (x PropConfigID) Enum() *PropConfigID {
	p := new(PropConfigID)
	*p = x
	return p
}
func (x PropConfigID) String() string {
	return proto.EnumName(PropConfigID_name, int32(x))
}
func (x *PropConfigID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PropConfigID_value, data, "PropConfigID")
	if err != nil {
		return err
	}
	*x = PropConfigID(value)
	return nil
}
func (PropConfigID) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{10} }

// 标记位
type EFlag int32

const (
	EFlag_EF_Empty          EFlag = 0
	EFlag_EF_Binded         EFlag = 1
	EFlag_EF_TelBinded      EFlag = 2
	EFlag_EF_LineBinded     EFlag = 4
	EFlag_EF_OPPOBinded     EFlag = 8
	EFlag_EF_FirebaseBinded EFlag = 16
	EFlag_EF_GoogleBinded   EFlag = 32
	EFlag_EF_AccountBinded  EFlag = 64
)

var EFlag_name = map[int32]string{
	0:  "EF_Empty",
	1:  "EF_Binded",
	2:  "EF_TelBinded",
	4:  "EF_LineBinded",
	8:  "EF_OPPOBinded",
	16: "EF_FirebaseBinded",
	32: "EF_GoogleBinded",
	64: "EF_AccountBinded",
}
var EFlag_value = map[string]int32{
	"EF_Empty":          0,
	"EF_Binded":         1,
	"EF_TelBinded":      2,
	"EF_LineBinded":     4,
	"EF_OPPOBinded":     8,
	"EF_FirebaseBinded": 16,
	"EF_GoogleBinded":   32,
	"EF_AccountBinded":  64,
}

func (x EFlag) Enum() *EFlag {
	p := new(EFlag)
	*p = x
	return p
}
func (x EFlag) String() string {
	return proto.EnumName(EFlag_name, int32(x))
}
func (x *EFlag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EFlag_value, data, "EFlag")
	if err != nil {
		return err
	}
	*x = EFlag(value)
	return nil
}
func (EFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{11} }

// 乐透碎片ID
type LotPieceID int32

const (
	LotPieceID_LP_Blue        LotPieceID = 1000100
	LotPieceID_LP_BluePiece   LotPieceID = 1000101
	LotPieceID_LP_Orange      LotPieceID = 1000200
	LotPieceID_LP_OrangePiece LotPieceID = 1000201
	LotPieceID_LP_Green       LotPieceID = 1000300
	LotPieceID_LP_GreenPiece  LotPieceID = 1000301
)

var LotPieceID_name = map[int32]string{
	1000100: "LP_Blue",
	1000101: "LP_BluePiece",
	1000200: "LP_Orange",
	1000201: "LP_OrangePiece",
	1000300: "LP_Green",
	1000301: "LP_GreenPiece",
}
var LotPieceID_value = map[string]int32{
	"LP_Blue":        1000100,
	"LP_BluePiece":   1000101,
	"LP_Orange":      1000200,
	"LP_OrangePiece": 1000201,
	"LP_Green":       1000300,
	"LP_GreenPiece":  1000301,
}

func (x LotPieceID) Enum() *LotPieceID {
	p := new(LotPieceID)
	*p = x
	return p
}
func (x LotPieceID) String() string {
	return proto.EnumName(LotPieceID_name, int32(x))
}
func (x *LotPieceID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LotPieceID_value, data, "LotPieceID")
	if err != nil {
		return err
	}
	*x = LotPieceID(value)
	return nil
}
func (LotPieceID) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{12} }

// 流转源
type TransferSource int32

const (
	TransferSource_TS_Empty TransferSource = 0
	// 邮件(废弃)
	TransferSource_TS_Mail TransferSource = 1
	// 任务
	TransferSource_TS_Task TransferSource = 2
	// 签到
	TransferSource_TS_Sign TransferSource = 3
	// 使用
	TransferSource_TS_Use TransferSource = 4
	// 效果
	TransferSource_TS_Effect TransferSource = 5
	// 升级
	TransferSource_TS_LevelUp TransferSource = 6
	// 互斥
	TransferSource_TS_Exclusive TransferSource = 7
	// 游戏
	TransferSource_TS_Game TransferSource = 8
	// 管理员添加
	TransferSource_TS_Admin TransferSource = 9
	// 聊天
	TransferSource_TS_Chat TransferSource = 10
	// 在线奖励
	TransferSource_TS_OnlineReward TransferSource = 11
	// 乐透奖励
	TransferSource_TS_LotReward TransferSource = 12
	// 商店奖励
	TransferSource_TS_ShopReward TransferSource = 13
	// 送礼物消耗
	TransferSource_TS_Gift TransferSource = 14
	// 点赞增加荣誉
	TransferSource_TS_Like TransferSource = 15
	// 消耗增加荣誉
	TransferSource_TS_Consume TransferSource = 16
	// 增加好友增加荣誉
	TransferSource_TS_Friends TransferSource = 17
	// 商城
	TransferSource_TS_Shop TransferSource = 18
	// 游戏免费次数
	TransferSource_TS_Game_FreeTimes TransferSource = 19
	// CDKey
	TransferSource_TS_CDKey TransferSource = 20
	// 救济金
	TransferSource_TS_PayMent TransferSource = 21
	// 首冲
	TransferSource_TS_FristPay TransferSource = 22
	// 绑定
	TransferSource_TS_Bind TransferSource = 23
	// 等级修改
	TransferSource_TS_ModLevel TransferSource = 24
	// 七天礼包
	TransferSource_TS_SevenDay TransferSource = 25
	// Gti
	TransferSource_TS_Gti TransferSource = 26
	// VIP点兑换
	TransferSource_TS_VIPPoint TransferSource = 27
	// 用户邮件
	TransferSource_TS_UserMail TransferSource = 28
	// 系统邮件
	TransferSource_TS_SystemMail TransferSource = 29
	// 用户注册
	TransferSource_TS_UserRegistry TransferSource = 30
	// 普通赠送
	TransferSource_TS_Trade TransferSource = 31
	// 活动 - 充值暴击
	TransferSource_TS_PayCrit TransferSource = 32
	// 活动 - 充值赠送
	TransferSource_TS_PayGift TransferSource = 33
	// 活动 - 彩票
	TransferSource_TS_Lottery TransferSource = 34
	// 活动 - VIP礼包(29)
	TransferSource_TS_VIPGiftPackage_Android TransferSource = 35
	// 限时登录奖励
	TransferSource_TS_LoginReward TransferSource = 36
	// dummy 桌费
	TransferSource_TS_Tax TransferSource = 37
	// 代理
	TransferSource_TS_Agent TransferSource = 38
	// 活动 - 基金
	TransferSource_TS_Fund TransferSource = 39
	// 活动 - 基金(每日奖励)
	TransferSource_TS_FundDaily TransferSource = 40
	// 活动 - 新年活动
	TransferSource_TS_NewYear TransferSource = 41
	// 活动 - 春节活动(兑换福袋)
	TransferSource_TS_Festeval TransferSource = 42
	// 在线奖励(新手)
	TransferSource_TS_OnlineRewardNewbie TransferSource = 43
	// 捕鱼大乱斗 - 白银鱼雷奖励
	TransferSource_TS_GiftFishV2 TransferSource = 44
	// 捕鱼大乱斗 - 黄金鱼雷奖励
	TransferSource_TS_GiftFishV3 TransferSource = 45
	// 每日礼包
	TransferSource_TS_DailyGift TransferSource = 46
	// 活动 - 春节活动(登录领取)
	TransferSource_TS_Festeval_Login TransferSource = 47
	// 活动 - 春节活动(充值领取)
	TransferSource_TS_Festeval_Recharge TransferSource = 48
	// 活动 - 春节活动(充值获得)
	TransferSource_TS_Festeval_Recharge_Gain TransferSource = 49
	// 代理后台赠送
	TransferSource_TS_Agent_Trade TransferSource = 50
	// 普通赠送税收
	TransferSource_TS_Trade_Tax TransferSource = 51
	// 代理后台赠送税收
	TransferSource_TS_Agent_Trade_Tax TransferSource = 52
	// 泼水节活动消耗
	TransferSource_TS_Splash_Cost TransferSource = 53
	// 泼水节活动奖励
	TransferSource_TS_Splash_Reward TransferSource = 54
	// 奖池筹码数量变化
	TransferSource_TS_RewardPool_Change TransferSource = 55
	// 钻石兑换
	TransferSource_TS_PropExchange TransferSource = 56
	// 奖池
	TransferSource_TS_Jackpot TransferSource = 57
	// 周赢分榜
	TransferSource_TS_WeekWin TransferSource = 58
	// 系统异常补偿
	TransferSource_TS_Compensate TransferSource = 59
	// 玩家暗补
	TransferSource_TS_Allowance TransferSource = 60
	// 玩家回归
	TransferSource_TS_PlayerRegress TransferSource = 61
	// FB奖励
	TransferSource_TS_FacebookReward TransferSource = 62
	// 秤砣补充
	TransferSource_TS_ChengTuoSupplyment TransferSource = 63
	// 活动 - 筹码暗补
	TransferSource_TS_Supply TransferSource = 64
	// 七天礼包1
	TransferSource_TS_SevenDay1_Android TransferSource = 65
	// 七天礼包2
	TransferSource_TS_SevenDay2_Android TransferSource = 66
	// 七天礼包3
	TransferSource_TS_SevenDay3_Android TransferSource = 67
	// 七天礼包4
	TransferSource_TS_SevenDay4_Android TransferSource = 68
	// 七天礼包5
	TransferSource_TS_SevenDay5_Android TransferSource = 69
	// 7日签到奖励
	TransferSource_TS_SevenDaysSign TransferSource = 70
	// 30日，签到
	TransferSource_TS_Msign_Sign TransferSource = 71
	// 30日 每日宝箱
	TransferSource_TS_Msign_Box_Day TransferSource = 72
	// 30日 7日宝箱
	TransferSource_TS_Msign_Box_Week TransferSource = 73
	// 30日 15日宝箱
	TransferSource_TS_Msign_Box_HalfMonth TransferSource = 74
	// 30日 30日宝箱
	TransferSource_TS_Msign_Box_Month TransferSource = 75
	// 30日 补签
	TransferSource_TS_Msign_Resign TransferSource = 76
	// 打赏
	TransferSource_TS_GrantReward TransferSource = 77
	// 实物商城
	TransferSource_TS_PhysicalGoods TransferSource = 78
	// 每日转盘
	TransferSource_TS_DailySpin TransferSource = 79
	// 筹码补齐
	TransferSource_TS_ChipReplenish TransferSource = 80
	// 七天礼包1
	TransferSource_TS_SevenDay1_IOS TransferSource = 81
	// 七天礼包2
	TransferSource_TS_SevenDay2_IOS TransferSource = 82
	// 七天礼包3
	TransferSource_TS_SevenDay3_IOS TransferSource = 83
	// 七天礼包4
	TransferSource_TS_SevenDay4_IOS TransferSource = 84
	// 七天礼包5
	TransferSource_TS_SevenDay5_IOS TransferSource = 85
	// 活动 - VIP礼包
	TransferSource_TS_VIPGiftPackage_IOS TransferSource = 86
	// 在线福利
	TransferSource_TS_OnlineWelfare TransferSource = 87
	// 信息完整
	TransferSource_TS_InfomationComplete TransferSource = 88
	// 水灯节
	TransferSource_TS_WaterLampWish TransferSource = 89
	// 夺宝 参与（购买）
	TransferSource_TS_Treasure_Purchase TransferSource = 90
	// 夺宝 中奖
	TransferSource_TS_Treasure_Winning TransferSource = 91
	// 夺宝 流拍
	TransferSource_TS_Treasure_Remain TransferSource = 92
	// 大象礼包
	TransferSource_TS_ElephantPiggy TransferSource = 93
	// 限时礼包
	TransferSource_TS_LimitTimeGift TransferSource = 94
	// 房卡赠送
	TransferSource_TS_RoomCardReward TransferSource = 95
	// PokDeng礼包
	TransferSource_TS_PokDeng_Gift TransferSource = 96
	// dummy房间创建奖励
	TransferSource_TS_DummyRoomCreatorReward TransferSource = 97
	// 游戏固定税
	TransferSource_TS_Game_Tax_Remain TransferSource = 98
	// LuckySpin幸运转盘
	TransferSource_TS_LuckySpin TransferSource = 99
	// dummy比赛报名
	TransferSource_TS_Dummy_Match_SignUp TransferSource = 100
	// 泼水节排行榜
	TransferSource_TS_Splash_Rank TransferSource = 101
	// 泼水节每日宝箱
	TransferSource_TS_Splash_Treasure TransferSource = 102
	// 泼水节扭蛋
	TransferSource_TS_Splash_TwistEgg TransferSource = 103
	// 泼水节签到
	TransferSource_TS_Splash_Sign TransferSource = 104
	// 小厅
	TransferSource_TS_MiniHall TransferSource = 105
	// 退还
	TransferSource_TS_GiveBack TransferSource = 106
	// 悔注
	TransferSource_TS_Regret_To_Bet TransferSource = 107
	// 钻石消耗
	TransferSource_TS_Diamond_Consume TransferSource = 108
	// 订单补偿
	TransferSource_TS_Order_GiveBack TransferSource = 109
	// 德州坐满即玩派奖源
	TransferSource_TS_Texas_Sng TransferSource = 110
	// PokDeng每日礼包
	TransferSource_TS_PokDeng_DailyTreasure TransferSource = 111
	// Dummy每日礼包
	TransferSource_TS_Dummy_DailyTreasure TransferSource = 112
	// 道具兑换
	TransferSource_TS_Prop_Exchange TransferSource = 113
	// 道具售卖
	TransferSource_TS_Prop_Sale TransferSource = 114
	// 捕鱼每日礼包
	TransferSource_TS_CatchFish_DailyTreasure TransferSource = 115
	// pokdeng牌型增益卡获得筹码源
	TransferSource_TS_PokDeng_Buff_From_8001 TransferSource = 116
	// 4人捕鱼每日礼包
	TransferSource_TS_FourFish_DailyTreasure TransferSource = 117
	// Dummy比赛奖励
	TransferSource_TS_Dummy_Match_Reward TransferSource = 118
	// 飞机礼包
	TransferSource_TS_AirPlane_Treasure TransferSource = 119
	// 破产礼包
	TransferSource_TS_BrokenGift TransferSource = 120
	// 德州抽水
	TransferSource_TS_Texas_JP_TableFee TransferSource = 121
	// 德州赢取
	TransferSource_TS_Texas_JP_Gain TransferSource = 122
	// 连环夺宝解锁礼包
	TransferSource_TS_Lhdb_Unlock TransferSource = 123
	// Pokdeng比赛
	TransferSource_TS_Pokdeng_Match TransferSource = 124
	// VIP直升卡
	TransferSource_TS_Vip_GoStraightTo TransferSource = 125
	// 每日抽奖
	TransferSource_TS_Daily_Lottery TransferSource = 126
	// 飞机每日礼包
	TransferSource_TS_Plane_DailyTreasure TransferSource = 127
	// 大厅道具不足继续扣除小厅
	TransferSource_TS_Hall_NotEnough_To_Sub_MiniHall TransferSource = 128
	// 百家乐比赛奖励
	TransferSource_TS_BJL_Match_Reward TransferSource = 129
	// 百家乐比赛礼包奖励
	TransferSource_TS_BJL_Match_Treasure_Reward TransferSource = 130
	// 捕鱼比赛奖励
	TransferSource_TS_BY_Match_Reward TransferSource = 131
	// 捕鱼比赛礼包奖励
	TransferSource_TS_BY_Match_Treasure_Reward TransferSource = 132
	// 新代理系统交易收益
	TransferSource_TS_Agent_Trade_Revenue TransferSource = 133
	// 破产礼包269
	TransferSource_TS_BrokenGift_269 TransferSource = 134
	// 破产礼包999
	TransferSource_TS_BrokenGift_999 TransferSource = 135
	// 破产礼包2699
	TransferSource_TS_BrokenGift_2699 TransferSource = 136
	// 新代理系统人头收益
	TransferSource_TS_Agent_Newer_Revenue TransferSource = 143
	// 新代理系统分成收益
	TransferSource_TS_Agent_Share_Revenue TransferSource = 144
	// 新代理系统解锁界面赠送
	TransferSource_TS_Agent_Unlock_View_Give TransferSource = 149
	// 新代理系统绑定邮件发送筹码
	TransferSource_TS_Agent_Bind_Mail TransferSource = 150
	// 返利奖励
	TransferSource_TS_Rebate TransferSource = 151
	// 上分点卡消费获取
	TransferSource_TS_SpayCashCard_Gain TransferSource = 2000
	// 下分点卡兑换消耗
	TransferSource_TS_SpayCashCard_Exchange TransferSource = 2001
	// 试玩秤砣补充
	TransferSource_TS_TrialChengTuoSupplyment TransferSource = 2002
	// 暗补奖励
	TransferSource_TS_Hidden_Subsidy TransferSource = 2003
	// 大奖票奖励
	TransferSource_TS_Big_Reward_Ticket TransferSource = 2004
	// 游戏税收
	TransferSource_TS_Game_Tax TransferSource = 2005
	// 银行兑换
	TransferSource_TS_SpayBank_Exchange TransferSource = 2006
	// 后台银行兑换退回
	TransferSource_TS_SpayBank_WebBack TransferSource = 2007
	// 银行充值
	TransferSource_TS_SpayBank_OrderPay TransferSource = 2008
	// 保险箱
	TransferSource_TS_Safe_Box TransferSource = 2009
	// 第三方游戏道具兑换
	TransferSource_TS_ThirdPardGame_Exchange_Prop TransferSource = 2010
	// vn bank exchange
	TransferSource_TS_VNBank_Exchange_Prop TransferSource = 2011
	// 新手活动 刮刮卡
	TransferSource_TS_Novice_ScratchCard TransferSource = 2012
	// 新手活动 初体验 充值
	TransferSource_TS_Novice_FirstTask_Recharge TransferSource = 2013
	// 新手活动 初体验 兑换
	TransferSource_TS_Novice_FirstTask_Withdrawal TransferSource = 2014
	// 新手活动 初体验 兑换
	TransferSource_TS_Novice_FirstTask_CardExchange TransferSource = 2015
	// 新手活动 签到 普通
	TransferSource_TS_Novice_Sign_Ordinary TransferSource = 2016
	// 新手活动 签到 高级
	TransferSource_TS_Novice_Sign_Special TransferSource = 2017
	// 新手活动 复活礼包
	TransferSource_TS_Novice_ReStart TransferSource = 2018
	// vip返还
	TransferSource_TS_VIP_Rebate TransferSource = 2019
	// vip周俸禄
	TransferSource_TS_VIP_Week_Reward TransferSource = 2020
	// 充提类补偿金
	TransferSource_TS_Recharge_Withdrawal TransferSource = 2021
	// 用户奖金类补偿金
	TransferSource_TS_System_Bonus TransferSource = 2022
	// 代理分红类补偿金
	TransferSource_TS_Agency_Dividend_Bonus TransferSource = 2023
	// 超时补偿
	TransferSource_TS_Withdrawal_TimeOut_Compensate TransferSource = 2024
	// 系统扣除
	TransferSource_TS_System_Deduct TransferSource = 2025
	// 首冲反利，额外奖励
	TransferSource_TS_FristPay_Ext TransferSource = 2026
	// 每日礼包额外奖励
	TransferSource_TS_DailyGift_Ext TransferSource = 2027
	// 充值超时补偿
	TransferSource_TS_Recharge_TimeOut_Compensate TransferSource = 2028
	// 独立日礼包基础奖励
	TransferSource_TS_IndependenceDay_Base_Reward TransferSource = 2029
	// 独立日礼包额外奖励
	TransferSource_TS_IndependenceDay_Ext_Reward TransferSource = 2030
	// 转盘任务(废弃)
	TransferSource_TS_DailySpinTask TransferSource = 2031
	//  首充活动充值
	TransferSource_TS_FristPay_Recharge TransferSource = 2032
	// 转盘任务
	TransferSource_TS_DailySpinTask_OnLogin      TransferSource = 2033
	TransferSource_TS_DailySpinTask_RebateScore  TransferSource = 2034
	TransferSource_TS_DailySpinTask_Recharge     TransferSource = 2035
	TransferSource_TS_DailySpinTask_BindTel      TransferSource = 2036
	TransferSource_TS_DailySpinTask_BindCard     TransferSource = 2037
	TransferSource_TS_DailySpinTask_Withdrawal   TransferSource = 2038
	TransferSource_TS_DailySpinTask_GIFTCODE     TransferSource = 2039
	TransferSource_TS_DailySpinTask_ThirdRealMan TransferSource = 2040
	TransferSource_TS_DailySpinTask_BindGP       TransferSource = 2041
	TransferSource_TS_DailySpinTask_ReSetNike    TransferSource = 2042
	TransferSource_TS_DailySpinTask_UpgradeVIP1  TransferSource = 2043
	TransferSource_TS_DailySpinTask_UpgradeVIP2  TransferSource = 2044
	TransferSource_TS_DailySpinTask_ChildUpgrade TransferSource = 2045
	TransferSource_TS_DailySpinTask_DayLose      TransferSource = 2046
	TransferSource_TS_DailySpinTask_DayRecharge  TransferSource = 2047
	// 周卡任务
	// TS_WeekRecharge_Day = 2048 ;  //周卡礼包-签到
	TransferSource_TS_WeekRecharge_Invite TransferSource = 2049
	// 游戏金币对接
	TransferSource_TS_GameProp_Exchange TransferSource = 2050
	// 充值活动
	TransferSource_TS_WeekRecharge_Day_1 TransferSource = 2051
	TransferSource_TS_WeekRecharge_Day_2 TransferSource = 2052
	TransferSource_TS_WeekRecharge_Day_3 TransferSource = 2053
	TransferSource_TS_WeekRecharge_Day_4 TransferSource = 2054
	TransferSource_TS_WeekRecharge_Day_5 TransferSource = 2055
	TransferSource_TS_WeekRecharge_Day_6 TransferSource = 2056
	// 充值月中活动
	TransferSource_TS_MinMonth_Recharge_Base  TransferSource = 2057
	TransferSource_TS_MinMonth_Recharge_Extra TransferSource = 2058
	// google绑定
	TransferSource_TS_Google_Bind TransferSource = 2059
	// 高V赠送点卡兑换
	TransferSource_TS_SpayCashCard_Agent_1 TransferSource = 2060
	TransferSource_TS_SpayCashCard_Agent_2 TransferSource = 2061
	TransferSource_TS_SpayCashCard_Agent_3 TransferSource = 2062
	TransferSource_TS_SpayCashCard_Agent_4 TransferSource = 2063
	// vip节日生日礼金
	TransferSource_TS_VIP_BirthdayGift TransferSource = 2064
	// vip抽红包活动
	TransferSource_TS_VIP_LotteryFree           TransferSource = 2065
	TransferSource_TS_VIP_LotteryTask           TransferSource = 2066
	TransferSource_TS_Agent_ChildReward_TelBind TransferSource = 2067
	TransferSource_TS_Agent_ChildReward_Vip1    TransferSource = 2068
	TransferSource_TS_Agent_ChildReward_Vip3    TransferSource = 2069
	// 新每日礼包
	TransferSource_TS_NewDailyGift TransferSource = 2100
	// 新每日礼包额外赠送
	TransferSource_TS_NewDailyGift_Ext TransferSource = 2101
	// 周末礼包
	TransferSource_TS_WeekendGift TransferSource = 2102
	// 周末礼包额外赠送
	TransferSource_TS_WeekendGift_Ext TransferSource = 2103
	// 新版任务
	TransferSource_TS_DailySpinTask_Bet TransferSource = 2104
	// 渠道包下架迁移奖励
	TransferSource_TS_ChannelMigration_Reward TransferSource = 2110
	// 单次充值礼包1
	TransferSource_TS_ManyRechargeGift1 TransferSource = 2205
	// 单次充值礼包1额外赠送
	TransferSource_TS_ManyRechargeGift1_Ext TransferSource = 2206
	// 单次充值礼包2
	TransferSource_TS_ManyRechargeGift2 TransferSource = 2207
	// 单次充值礼包2额外赠送
	TransferSource_TS_ManyRechargeGift2_Ext TransferSource = 2208
	// 单次充值礼包3
	TransferSource_TS_ManyRechargeGift3 TransferSource = 2209
	// 单次充值礼包3额外赠送
	TransferSource_TS_ManyRechargeGift3_Ext TransferSource = 2210
)

var TransferSource_name = map[int32]string{
	0:    "TS_Empty",
	1:    "TS_Mail",
	2:    "TS_Task",
	3:    "TS_Sign",
	4:    "TS_Use",
	5:    "TS_Effect",
	6:    "TS_LevelUp",
	7:    "TS_Exclusive",
	8:    "TS_Game",
	9:    "TS_Admin",
	10:   "TS_Chat",
	11:   "TS_OnlineReward",
	12:   "TS_LotReward",
	13:   "TS_ShopReward",
	14:   "TS_Gift",
	15:   "TS_Like",
	16:   "TS_Consume",
	17:   "TS_Friends",
	18:   "TS_Shop",
	19:   "TS_Game_FreeTimes",
	20:   "TS_CDKey",
	21:   "TS_PayMent",
	22:   "TS_FristPay",
	23:   "TS_Bind",
	24:   "TS_ModLevel",
	25:   "TS_SevenDay",
	26:   "TS_Gti",
	27:   "TS_VIPPoint",
	28:   "TS_UserMail",
	29:   "TS_SystemMail",
	30:   "TS_UserRegistry",
	31:   "TS_Trade",
	32:   "TS_PayCrit",
	33:   "TS_PayGift",
	34:   "TS_Lottery",
	35:   "TS_VIPGiftPackage_Android",
	36:   "TS_LoginReward",
	37:   "TS_Tax",
	38:   "TS_Agent",
	39:   "TS_Fund",
	40:   "TS_FundDaily",
	41:   "TS_NewYear",
	42:   "TS_Festeval",
	43:   "TS_OnlineRewardNewbie",
	44:   "TS_GiftFishV2",
	45:   "TS_GiftFishV3",
	46:   "TS_DailyGift",
	47:   "TS_Festeval_Login",
	48:   "TS_Festeval_Recharge",
	49:   "TS_Festeval_Recharge_Gain",
	50:   "TS_Agent_Trade",
	51:   "TS_Trade_Tax",
	52:   "TS_Agent_Trade_Tax",
	53:   "TS_Splash_Cost",
	54:   "TS_Splash_Reward",
	55:   "TS_RewardPool_Change",
	56:   "TS_PropExchange",
	57:   "TS_Jackpot",
	58:   "TS_WeekWin",
	59:   "TS_Compensate",
	60:   "TS_Allowance",
	61:   "TS_PlayerRegress",
	62:   "TS_FacebookReward",
	63:   "TS_ChengTuoSupplyment",
	64:   "TS_Supply",
	65:   "TS_SevenDay1_Android",
	66:   "TS_SevenDay2_Android",
	67:   "TS_SevenDay3_Android",
	68:   "TS_SevenDay4_Android",
	69:   "TS_SevenDay5_Android",
	70:   "TS_SevenDaysSign",
	71:   "TS_Msign_Sign",
	72:   "TS_Msign_Box_Day",
	73:   "TS_Msign_Box_Week",
	74:   "TS_Msign_Box_HalfMonth",
	75:   "TS_Msign_Box_Month",
	76:   "TS_Msign_Resign",
	77:   "TS_GrantReward",
	78:   "TS_PhysicalGoods",
	79:   "TS_DailySpin",
	80:   "TS_ChipReplenish",
	81:   "TS_SevenDay1_IOS",
	82:   "TS_SevenDay2_IOS",
	83:   "TS_SevenDay3_IOS",
	84:   "TS_SevenDay4_IOS",
	85:   "TS_SevenDay5_IOS",
	86:   "TS_VIPGiftPackage_IOS",
	87:   "TS_OnlineWelfare",
	88:   "TS_InfomationComplete",
	89:   "TS_WaterLampWish",
	90:   "TS_Treasure_Purchase",
	91:   "TS_Treasure_Winning",
	92:   "TS_Treasure_Remain",
	93:   "TS_ElephantPiggy",
	94:   "TS_LimitTimeGift",
	95:   "TS_RoomCardReward",
	96:   "TS_PokDeng_Gift",
	97:   "TS_DummyRoomCreatorReward",
	98:   "TS_Game_Tax_Remain",
	99:   "TS_LuckySpin",
	100:  "TS_Dummy_Match_SignUp",
	101:  "TS_Splash_Rank",
	102:  "TS_Splash_Treasure",
	103:  "TS_Splash_TwistEgg",
	104:  "TS_Splash_Sign",
	105:  "TS_MiniHall",
	106:  "TS_GiveBack",
	107:  "TS_Regret_To_Bet",
	108:  "TS_Diamond_Consume",
	109:  "TS_Order_GiveBack",
	110:  "TS_Texas_Sng",
	111:  "TS_PokDeng_DailyTreasure",
	112:  "TS_Dummy_DailyTreasure",
	113:  "TS_Prop_Exchange",
	114:  "TS_Prop_Sale",
	115:  "TS_CatchFish_DailyTreasure",
	116:  "TS_PokDeng_Buff_From_8001",
	117:  "TS_FourFish_DailyTreasure",
	118:  "TS_Dummy_Match_Reward",
	119:  "TS_AirPlane_Treasure",
	120:  "TS_BrokenGift",
	121:  "TS_Texas_JP_TableFee",
	122:  "TS_Texas_JP_Gain",
	123:  "TS_Lhdb_Unlock",
	124:  "TS_Pokdeng_Match",
	125:  "TS_Vip_GoStraightTo",
	126:  "TS_Daily_Lottery",
	127:  "TS_Plane_DailyTreasure",
	128:  "TS_Hall_NotEnough_To_Sub_MiniHall",
	129:  "TS_BJL_Match_Reward",
	130:  "TS_BJL_Match_Treasure_Reward",
	131:  "TS_BY_Match_Reward",
	132:  "TS_BY_Match_Treasure_Reward",
	133:  "TS_Agent_Trade_Revenue",
	134:  "TS_BrokenGift_269",
	135:  "TS_BrokenGift_999",
	136:  "TS_BrokenGift_2699",
	143:  "TS_Agent_Newer_Revenue",
	144:  "TS_Agent_Share_Revenue",
	149:  "TS_Agent_Unlock_View_Give",
	150:  "TS_Agent_Bind_Mail",
	151:  "TS_Rebate",
	2000: "TS_SpayCashCard_Gain",
	2001: "TS_SpayCashCard_Exchange",
	2002: "TS_TrialChengTuoSupplyment",
	2003: "TS_Hidden_Subsidy",
	2004: "TS_Big_Reward_Ticket",
	2005: "TS_Game_Tax",
	2006: "TS_SpayBank_Exchange",
	2007: "TS_SpayBank_WebBack",
	2008: "TS_SpayBank_OrderPay",
	2009: "TS_Safe_Box",
	2010: "TS_ThirdPardGame_Exchange_Prop",
	2011: "TS_VNBank_Exchange_Prop",
	2012: "TS_Novice_ScratchCard",
	2013: "TS_Novice_FirstTask_Recharge",
	2014: "TS_Novice_FirstTask_Withdrawal",
	2015: "TS_Novice_FirstTask_CardExchange",
	2016: "TS_Novice_Sign_Ordinary",
	2017: "TS_Novice_Sign_Special",
	2018: "TS_Novice_ReStart",
	2019: "TS_VIP_Rebate",
	2020: "TS_VIP_Week_Reward",
	2021: "TS_Recharge_Withdrawal",
	2022: "TS_System_Bonus",
	2023: "TS_Agency_Dividend_Bonus",
	2024: "TS_Withdrawal_TimeOut_Compensate",
	2025: "TS_System_Deduct",
	2026: "TS_FristPay_Ext",
	2027: "TS_DailyGift_Ext",
	2028: "TS_Recharge_TimeOut_Compensate",
	2029: "TS_IndependenceDay_Base_Reward",
	2030: "TS_IndependenceDay_Ext_Reward",
	2031: "TS_DailySpinTask",
	2032: "TS_FristPay_Recharge",
	2033: "TS_DailySpinTask_OnLogin",
	2034: "TS_DailySpinTask_RebateScore",
	2035: "TS_DailySpinTask_Recharge",
	2036: "TS_DailySpinTask_BindTel",
	2037: "TS_DailySpinTask_BindCard",
	2038: "TS_DailySpinTask_Withdrawal",
	2039: "TS_DailySpinTask_GIFTCODE",
	2040: "TS_DailySpinTask_ThirdRealMan",
	2041: "TS_DailySpinTask_BindGP",
	2042: "TS_DailySpinTask_ReSetNike",
	2043: "TS_DailySpinTask_UpgradeVIP1",
	2044: "TS_DailySpinTask_UpgradeVIP2",
	2045: "TS_DailySpinTask_ChildUpgrade",
	2046: "TS_DailySpinTask_DayLose",
	2047: "TS_DailySpinTask_DayRecharge",
	2049: "TS_WeekRecharge_Invite",
	2050: "TS_GameProp_Exchange",
	2051: "TS_WeekRecharge_Day_1",
	2052: "TS_WeekRecharge_Day_2",
	2053: "TS_WeekRecharge_Day_3",
	2054: "TS_WeekRecharge_Day_4",
	2055: "TS_WeekRecharge_Day_5",
	2056: "TS_WeekRecharge_Day_6",
	2057: "TS_MinMonth_Recharge_Base",
	2058: "TS_MinMonth_Recharge_Extra",
	2059: "TS_Google_Bind",
	2060: "TS_SpayCashCard_Agent_1",
	2061: "TS_SpayCashCard_Agent_2",
	2062: "TS_SpayCashCard_Agent_3",
	2063: "TS_SpayCashCard_Agent_4",
	2064: "TS_VIP_BirthdayGift",
	2065: "TS_VIP_LotteryFree",
	2066: "TS_VIP_LotteryTask",
	2067: "TS_Agent_ChildReward_TelBind",
	2068: "TS_Agent_ChildReward_Vip1",
	2069: "TS_Agent_ChildReward_Vip3",
	2100: "TS_NewDailyGift",
	2101: "TS_NewDailyGift_Ext",
	2102: "TS_WeekendGift",
	2103: "TS_WeekendGift_Ext",
	2104: "TS_DailySpinTask_Bet",
	2110: "TS_ChannelMigration_Reward",
	2205: "TS_ManyRechargeGift1",
	2206: "TS_ManyRechargeGift1_Ext",
	2207: "TS_ManyRechargeGift2",
	2208: "TS_ManyRechargeGift2_Ext",
	2209: "TS_ManyRechargeGift3",
	2210: "TS_ManyRechargeGift3_Ext",
}
var TransferSource_value = map[string]int32{
	"TS_Empty":                          0,
	"TS_Mail":                           1,
	"TS_Task":                           2,
	"TS_Sign":                           3,
	"TS_Use":                            4,
	"TS_Effect":                         5,
	"TS_LevelUp":                        6,
	"TS_Exclusive":                      7,
	"TS_Game":                           8,
	"TS_Admin":                          9,
	"TS_Chat":                           10,
	"TS_OnlineReward":                   11,
	"TS_LotReward":                      12,
	"TS_ShopReward":                     13,
	"TS_Gift":                           14,
	"TS_Like":                           15,
	"TS_Consume":                        16,
	"TS_Friends":                        17,
	"TS_Shop":                           18,
	"TS_Game_FreeTimes":                 19,
	"TS_CDKey":                          20,
	"TS_PayMent":                        21,
	"TS_FristPay":                       22,
	"TS_Bind":                           23,
	"TS_ModLevel":                       24,
	"TS_SevenDay":                       25,
	"TS_Gti":                            26,
	"TS_VIPPoint":                       27,
	"TS_UserMail":                       28,
	"TS_SystemMail":                     29,
	"TS_UserRegistry":                   30,
	"TS_Trade":                          31,
	"TS_PayCrit":                        32,
	"TS_PayGift":                        33,
	"TS_Lottery":                        34,
	"TS_VIPGiftPackage_Android":         35,
	"TS_LoginReward":                    36,
	"TS_Tax":                            37,
	"TS_Agent":                          38,
	"TS_Fund":                           39,
	"TS_FundDaily":                      40,
	"TS_NewYear":                        41,
	"TS_Festeval":                       42,
	"TS_OnlineRewardNewbie":             43,
	"TS_GiftFishV2":                     44,
	"TS_GiftFishV3":                     45,
	"TS_DailyGift":                      46,
	"TS_Festeval_Login":                 47,
	"TS_Festeval_Recharge":              48,
	"TS_Festeval_Recharge_Gain":         49,
	"TS_Agent_Trade":                    50,
	"TS_Trade_Tax":                      51,
	"TS_Agent_Trade_Tax":                52,
	"TS_Splash_Cost":                    53,
	"TS_Splash_Reward":                  54,
	"TS_RewardPool_Change":              55,
	"TS_PropExchange":                   56,
	"TS_Jackpot":                        57,
	"TS_WeekWin":                        58,
	"TS_Compensate":                     59,
	"TS_Allowance":                      60,
	"TS_PlayerRegress":                  61,
	"TS_FacebookReward":                 62,
	"TS_ChengTuoSupplyment":             63,
	"TS_Supply":                         64,
	"TS_SevenDay1_Android":              65,
	"TS_SevenDay2_Android":              66,
	"TS_SevenDay3_Android":              67,
	"TS_SevenDay4_Android":              68,
	"TS_SevenDay5_Android":              69,
	"TS_SevenDaysSign":                  70,
	"TS_Msign_Sign":                     71,
	"TS_Msign_Box_Day":                  72,
	"TS_Msign_Box_Week":                 73,
	"TS_Msign_Box_HalfMonth":            74,
	"TS_Msign_Box_Month":                75,
	"TS_Msign_Resign":                   76,
	"TS_GrantReward":                    77,
	"TS_PhysicalGoods":                  78,
	"TS_DailySpin":                      79,
	"TS_ChipReplenish":                  80,
	"TS_SevenDay1_IOS":                  81,
	"TS_SevenDay2_IOS":                  82,
	"TS_SevenDay3_IOS":                  83,
	"TS_SevenDay4_IOS":                  84,
	"TS_SevenDay5_IOS":                  85,
	"TS_VIPGiftPackage_IOS":             86,
	"TS_OnlineWelfare":                  87,
	"TS_InfomationComplete":             88,
	"TS_WaterLampWish":                  89,
	"TS_Treasure_Purchase":              90,
	"TS_Treasure_Winning":               91,
	"TS_Treasure_Remain":                92,
	"TS_ElephantPiggy":                  93,
	"TS_LimitTimeGift":                  94,
	"TS_RoomCardReward":                 95,
	"TS_PokDeng_Gift":                   96,
	"TS_DummyRoomCreatorReward":         97,
	"TS_Game_Tax_Remain":                98,
	"TS_LuckySpin":                      99,
	"TS_Dummy_Match_SignUp":             100,
	"TS_Splash_Rank":                    101,
	"TS_Splash_Treasure":                102,
	"TS_Splash_TwistEgg":                103,
	"TS_Splash_Sign":                    104,
	"TS_MiniHall":                       105,
	"TS_GiveBack":                       106,
	"TS_Regret_To_Bet":                  107,
	"TS_Diamond_Consume":                108,
	"TS_Order_GiveBack":                 109,
	"TS_Texas_Sng":                      110,
	"TS_PokDeng_DailyTreasure":          111,
	"TS_Dummy_DailyTreasure":            112,
	"TS_Prop_Exchange":                  113,
	"TS_Prop_Sale":                      114,
	"TS_CatchFish_DailyTreasure":        115,
	"TS_PokDeng_Buff_From_8001":         116,
	"TS_FourFish_DailyTreasure":         117,
	"TS_Dummy_Match_Reward":             118,
	"TS_AirPlane_Treasure":              119,
	"TS_BrokenGift":                     120,
	"TS_Texas_JP_TableFee":              121,
	"TS_Texas_JP_Gain":                  122,
	"TS_Lhdb_Unlock":                    123,
	"TS_Pokdeng_Match":                  124,
	"TS_Vip_GoStraightTo":               125,
	"TS_Daily_Lottery":                  126,
	"TS_Plane_DailyTreasure":            127,
	"TS_Hall_NotEnough_To_Sub_MiniHall": 128,
	"TS_BJL_Match_Reward":               129,
	"TS_BJL_Match_Treasure_Reward":      130,
	"TS_BY_Match_Reward":                131,
	"TS_BY_Match_Treasure_Reward":       132,
	"TS_Agent_Trade_Revenue":            133,
	"TS_BrokenGift_269":                 134,
	"TS_BrokenGift_999":                 135,
	"TS_BrokenGift_2699":                136,
	"TS_Agent_Newer_Revenue":            143,
	"TS_Agent_Share_Revenue":            144,
	"TS_Agent_Unlock_View_Give":         149,
	"TS_Agent_Bind_Mail":                150,
	"TS_Rebate":                         151,
	"TS_SpayCashCard_Gain":              2000,
	"TS_SpayCashCard_Exchange":          2001,
	"TS_TrialChengTuoSupplyment":        2002,
	"TS_Hidden_Subsidy":                 2003,
	"TS_Big_Reward_Ticket":              2004,
	"TS_Game_Tax":                       2005,
	"TS_SpayBank_Exchange":              2006,
	"TS_SpayBank_WebBack":               2007,
	"TS_SpayBank_OrderPay":              2008,
	"TS_Safe_Box":                       2009,
	"TS_ThirdPardGame_Exchange_Prop":    2010,
	"TS_VNBank_Exchange_Prop":           2011,
	"TS_Novice_ScratchCard":             2012,
	"TS_Novice_FirstTask_Recharge":      2013,
	"TS_Novice_FirstTask_Withdrawal":    2014,
	"TS_Novice_FirstTask_CardExchange":  2015,
	"TS_Novice_Sign_Ordinary":           2016,
	"TS_Novice_Sign_Special":            2017,
	"TS_Novice_ReStart":                 2018,
	"TS_VIP_Rebate":                     2019,
	"TS_VIP_Week_Reward":                2020,
	"TS_Recharge_Withdrawal":            2021,
	"TS_System_Bonus":                   2022,
	"TS_Agency_Dividend_Bonus":          2023,
	"TS_Withdrawal_TimeOut_Compensate":  2024,
	"TS_System_Deduct":                  2025,
	"TS_FristPay_Ext":                   2026,
	"TS_DailyGift_Ext":                  2027,
	"TS_Recharge_TimeOut_Compensate":    2028,
	"TS_IndependenceDay_Base_Reward":    2029,
	"TS_IndependenceDay_Ext_Reward":     2030,
	"TS_DailySpinTask":                  2031,
	"TS_FristPay_Recharge":              2032,
	"TS_DailySpinTask_OnLogin":          2033,
	"TS_DailySpinTask_RebateScore":      2034,
	"TS_DailySpinTask_Recharge":         2035,
	"TS_DailySpinTask_BindTel":          2036,
	"TS_DailySpinTask_BindCard":         2037,
	"TS_DailySpinTask_Withdrawal":       2038,
	"TS_DailySpinTask_GIFTCODE":         2039,
	"TS_DailySpinTask_ThirdRealMan":     2040,
	"TS_DailySpinTask_BindGP":           2041,
	"TS_DailySpinTask_ReSetNike":        2042,
	"TS_DailySpinTask_UpgradeVIP1":      2043,
	"TS_DailySpinTask_UpgradeVIP2":      2044,
	"TS_DailySpinTask_ChildUpgrade":     2045,
	"TS_DailySpinTask_DayLose":          2046,
	"TS_DailySpinTask_DayRecharge":      2047,
	"TS_WeekRecharge_Invite":            2049,
	"TS_GameProp_Exchange":              2050,
	"TS_WeekRecharge_Day_1":             2051,
	"TS_WeekRecharge_Day_2":             2052,
	"TS_WeekRecharge_Day_3":             2053,
	"TS_WeekRecharge_Day_4":             2054,
	"TS_WeekRecharge_Day_5":             2055,
	"TS_WeekRecharge_Day_6":             2056,
	"TS_MinMonth_Recharge_Base":         2057,
	"TS_MinMonth_Recharge_Extra":        2058,
	"TS_Google_Bind":                    2059,
	"TS_SpayCashCard_Agent_1":           2060,
	"TS_SpayCashCard_Agent_2":           2061,
	"TS_SpayCashCard_Agent_3":           2062,
	"TS_SpayCashCard_Agent_4":           2063,
	"TS_VIP_BirthdayGift":               2064,
	"TS_VIP_LotteryFree":                2065,
	"TS_VIP_LotteryTask":                2066,
	"TS_Agent_ChildReward_TelBind":      2067,
	"TS_Agent_ChildReward_Vip1":         2068,
	"TS_Agent_ChildReward_Vip3":         2069,
	"TS_NewDailyGift":                   2100,
	"TS_NewDailyGift_Ext":               2101,
	"TS_WeekendGift":                    2102,
	"TS_WeekendGift_Ext":                2103,
	"TS_DailySpinTask_Bet":              2104,
	"TS_ChannelMigration_Reward":        2110,
	"TS_ManyRechargeGift1":              2205,
	"TS_ManyRechargeGift1_Ext":          2206,
	"TS_ManyRechargeGift2":              2207,
	"TS_ManyRechargeGift2_Ext":          2208,
	"TS_ManyRechargeGift3":              2209,
	"TS_ManyRechargeGift3_Ext":          2210,
}

func (x TransferSource) Enum() *TransferSource {
	p := new(TransferSource)
	*p = x
	return p
}
func (x TransferSource) String() string {
	return proto.EnumName(TransferSource_name, int32(x))
}
func (x *TransferSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TransferSource_value, data, "TransferSource")
	if err != nil {
		return err
	}
	*x = TransferSource(value)
	return nil
}
func (TransferSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{13} }

// 领红包错误码
type HongBaoError int32

const (
	// 成功
	HongBaoError_HB_Success HongBaoError = 0
	// 参数错误
	HongBaoError_HB_InvalidArg HongBaoError = 1
	// 金额错误(0,200)
	HongBaoError_HB_InvalidAmount HongBaoError = 2
	// 签名错误
	HongBaoError_HB_InvalidSign HongBaoError = 3
	// 红包系统未开启
	HongBaoError_HB_BusinessClosed HongBaoError = 4
	// 未绑定公众号
	HongBaoError_HB_NotBound HongBaoError = 5
	// 发送红包失败
	HongBaoError_HB_SendHongBaoFailed HongBaoError = 6
	// 请求存在风险，被微信拦截
	HongBaoError_HB_WXAccountDangerous HongBaoError = 7
	// 超过单日红包领取次数
	HongBaoError_HB_ExceedingTheFrequencyLimit HongBaoError = 8
)

var HongBaoError_name = map[int32]string{
	0: "HB_Success",
	1: "HB_InvalidArg",
	2: "HB_InvalidAmount",
	3: "HB_InvalidSign",
	4: "HB_BusinessClosed",
	5: "HB_NotBound",
	6: "HB_SendHongBaoFailed",
	7: "HB_WXAccountDangerous",
	8: "HB_ExceedingTheFrequencyLimit",
}
var HongBaoError_value = map[string]int32{
	"HB_Success":                    0,
	"HB_InvalidArg":                 1,
	"HB_InvalidAmount":              2,
	"HB_InvalidSign":                3,
	"HB_BusinessClosed":             4,
	"HB_NotBound":                   5,
	"HB_SendHongBaoFailed":          6,
	"HB_WXAccountDangerous":         7,
	"HB_ExceedingTheFrequencyLimit": 8,
}

func (x HongBaoError) Enum() *HongBaoError {
	p := new(HongBaoError)
	*p = x
	return p
}
func (x HongBaoError) String() string {
	return proto.EnumName(HongBaoError_name, int32(x))
}
func (x *HongBaoError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HongBaoError_value, data, "HongBaoError")
	if err != nil {
		return err
	}
	*x = HongBaoError(value)
	return nil
}
func (HongBaoError) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{14} }

// 显示消息类型
type ShowMessageType int32

const (
	ShowMessageType_SMT_Empty ShowMessageType = 0
	ShowMessageType_SMT_Tips  ShowMessageType = 1
	ShowMessageType_SMT_Box   ShowMessageType = 2
)

var ShowMessageType_name = map[int32]string{
	0: "SMT_Empty",
	1: "SMT_Tips",
	2: "SMT_Box",
}
var ShowMessageType_value = map[string]int32{
	"SMT_Empty": 0,
	"SMT_Tips":  1,
	"SMT_Box":   2,
}

func (x ShowMessageType) Enum() *ShowMessageType {
	p := new(ShowMessageType)
	*p = x
	return p
}
func (x ShowMessageType) String() string {
	return proto.EnumName(ShowMessageType_name, int32(x))
}
func (x *ShowMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShowMessageType_value, data, "ShowMessageType")
	if err != nil {
		return err
	}
	*x = ShowMessageType(value)
	return nil
}
func (ShowMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{15} }

// 操作系统类型
type OSType int32

const (
	OSType_OST_Invalid   OSType = 0
	OSType_OST_Android   OSType = 1
	OSType_OST_IOS       OSType = 2
	OSType_OST_IOS_Trial OSType = 4
	OSType_OST_PC        OSType = 8
)

var OSType_name = map[int32]string{
	0: "OST_Invalid",
	1: "OST_Android",
	2: "OST_IOS",
	4: "OST_IOS_Trial",
	8: "OST_PC",
}
var OSType_value = map[string]int32{
	"OST_Invalid":   0,
	"OST_Android":   1,
	"OST_IOS":       2,
	"OST_IOS_Trial": 4,
	"OST_PC":        8,
}

func (x OSType) Enum() *OSType {
	p := new(OSType)
	*p = x
	return p
}
func (x OSType) String() string {
	return proto.EnumName(OSType_name, int32(x))
}
func (x *OSType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OSType_value, data, "OSType")
	if err != nil {
		return err
	}
	*x = OSType(value)
	return nil
}
func (OSType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{16} }

// 跳转消息类型
type JumpMsgType int32

const (
	JumpMsgType_JMT_Invalid  JumpMsgType = 0
	JumpMsgType_JMT_Game     JumpMsgType = 1
	JumpMsgType_JMT_News     JumpMsgType = 2
	JumpMsgType_JMT_Purchase JumpMsgType = 3
	JumpMsgType_JMT_Logic    JumpMsgType = 4
)

var JumpMsgType_name = map[int32]string{
	0: "JMT_Invalid",
	1: "JMT_Game",
	2: "JMT_News",
	3: "JMT_Purchase",
	4: "JMT_Logic",
}
var JumpMsgType_value = map[string]int32{
	"JMT_Invalid":  0,
	"JMT_Game":     1,
	"JMT_News":     2,
	"JMT_Purchase": 3,
	"JMT_Logic":    4,
}

func (x JumpMsgType) Enum() *JumpMsgType {
	p := new(JumpMsgType)
	*p = x
	return p
}
func (x JumpMsgType) String() string {
	return proto.EnumName(JumpMsgType_name, int32(x))
}
func (x *JumpMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JumpMsgType_value, data, "JumpMsgType")
	if err != nil {
		return err
	}
	*x = JumpMsgType(value)
	return nil
}
func (JumpMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{17} }

// 聊天消息类型
type ChatMsgType int32

const (
	ChatMsgType_CMT_Invalid             ChatMsgType = 0
	ChatMsgType_CMT_Gold                ChatMsgType = 1
	ChatMsgType_CMT_LaBa                ChatMsgType = 2
	ChatMsgType_CMT_Game                ChatMsgType = 3
	ChatMsgType_CMT_Activity_Normal     ChatMsgType = 4
	ChatMsgType_CMT_Activity_Timer      ChatMsgType = 5
	ChatMsgType_CMT_Sys                 ChatMsgType = 6
	ChatMsgType_CMT_Immediately_Marquee ChatMsgType = 7
)

var ChatMsgType_name = map[int32]string{
	0: "CMT_Invalid",
	1: "CMT_Gold",
	2: "CMT_LaBa",
	3: "CMT_Game",
	4: "CMT_Activity_Normal",
	5: "CMT_Activity_Timer",
	6: "CMT_Sys",
	7: "CMT_Immediately_Marquee",
}
var ChatMsgType_value = map[string]int32{
	"CMT_Invalid":             0,
	"CMT_Gold":                1,
	"CMT_LaBa":                2,
	"CMT_Game":                3,
	"CMT_Activity_Normal":     4,
	"CMT_Activity_Timer":      5,
	"CMT_Sys":                 6,
	"CMT_Immediately_Marquee": 7,
}

func (x ChatMsgType) Enum() *ChatMsgType {
	p := new(ChatMsgType)
	*p = x
	return p
}
func (x ChatMsgType) String() string {
	return proto.EnumName(ChatMsgType_name, int32(x))
}
func (x *ChatMsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChatMsgType_value, data, "ChatMsgType")
	if err != nil {
		return err
	}
	*x = ChatMsgType(value)
	return nil
}
func (ChatMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{18} }

// 购买类型
type PurchaseType int32

const (
	PurchaseType_PCT_Invalid     PurchaseType = 0
	PurchaseType_PCT_Money       PurchaseType = 1
	PurchaseType_PCT_Chouma      PurchaseType = 2
	PurchaseType_PCT_Diamond     PurchaseType = 3
	PurchaseType_PCT_GiftVoucher PurchaseType = 4
)

var PurchaseType_name = map[int32]string{
	0: "PCT_Invalid",
	1: "PCT_Money",
	2: "PCT_Chouma",
	3: "PCT_Diamond",
	4: "PCT_GiftVoucher",
}
var PurchaseType_value = map[string]int32{
	"PCT_Invalid":     0,
	"PCT_Money":       1,
	"PCT_Chouma":      2,
	"PCT_Diamond":     3,
	"PCT_GiftVoucher": 4,
}

func (x PurchaseType) Enum() *PurchaseType {
	p := new(PurchaseType)
	*p = x
	return p
}
func (x PurchaseType) String() string {
	return proto.EnumName(PurchaseType_name, int32(x))
}
func (x *PurchaseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PurchaseType_value, data, "PurchaseType")
	if err != nil {
		return err
	}
	*x = PurchaseType(value)
	return nil
}
func (PurchaseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{19} }

// vip权益类型
type VipRightType int32

const (
	VipRightType_VRT_Invalid        VipRightType = 0
	VipRightType_VRT_BuyExtraChips  VipRightType = 1
	VipRightType_VRT_TaskExtraChips VipRightType = 2
	VipRightType_VRT_Taxreduction   VipRightType = 3
	VipRightType_VRT_Freeprop       VipRightType = 4
)

var VipRightType_name = map[int32]string{
	0: "VRT_Invalid",
	1: "VRT_BuyExtraChips",
	2: "VRT_TaskExtraChips",
	3: "VRT_Taxreduction",
	4: "VRT_Freeprop",
}
var VipRightType_value = map[string]int32{
	"VRT_Invalid":        0,
	"VRT_BuyExtraChips":  1,
	"VRT_TaskExtraChips": 2,
	"VRT_Taxreduction":   3,
	"VRT_Freeprop":       4,
}

func (x VipRightType) Enum() *VipRightType {
	p := new(VipRightType)
	*p = x
	return p
}
func (x VipRightType) String() string {
	return proto.EnumName(VipRightType_name, int32(x))
}
func (x *VipRightType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VipRightType_value, data, "VipRightType")
	if err != nil {
		return err
	}
	*x = VipRightType(value)
	return nil
}
func (VipRightType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{20} }

type ActivityType int32

const (
	ActivityType_AT_PayMent   ActivityType = 1001
	ActivityType_AT_FristPay  ActivityType = 1002
	ActivityType_AT_SevenDays ActivityType = 1003
)

var ActivityType_name = map[int32]string{
	1001: "AT_PayMent",
	1002: "AT_FristPay",
	1003: "AT_SevenDays",
}
var ActivityType_value = map[string]int32{
	"AT_PayMent":   1001,
	"AT_FristPay":  1002,
	"AT_SevenDays": 1003,
}

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}
func (x ActivityType) String() string {
	return proto.EnumName(ActivityType_name, int32(x))
}
func (x *ActivityType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActivityType_value, data, "ActivityType")
	if err != nil {
		return err
	}
	*x = ActivityType(value)
	return nil
}
func (ActivityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{21} }

type RechargeExtraType int32

const (
	RechargeExtraType_RET_VideoCatch RechargeExtraType = 1
	RechargeExtraType_RET_Live       RechargeExtraType = 2
	RechargeExtraType_RET_Sports     RechargeExtraType = 3
)

var RechargeExtraType_name = map[int32]string{
	1: "RET_VideoCatch",
	2: "RET_Live",
	3: "RET_Sports",
}
var RechargeExtraType_value = map[string]int32{
	"RET_VideoCatch": 1,
	"RET_Live":       2,
	"RET_Sports":     3,
}

func (x RechargeExtraType) Enum() *RechargeExtraType {
	p := new(RechargeExtraType)
	*p = x
	return p
}
func (x RechargeExtraType) String() string {
	return proto.EnumName(RechargeExtraType_name, int32(x))
}
func (x *RechargeExtraType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RechargeExtraType_value, data, "RechargeExtraType")
	if err != nil {
		return err
	}
	*x = RechargeExtraType(value)
	return nil
}
func (RechargeExtraType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{22} }

type VipStaticType int32

const (
	VipStaticType_VST_VipKeep VipStaticType = 2001
	VipStaticType_VST_GiveMax VipStaticType = 2002
)

var VipStaticType_name = map[int32]string{
	2001: "VST_VipKeep",
	2002: "VST_GiveMax",
}
var VipStaticType_value = map[string]int32{
	"VST_VipKeep": 2001,
	"VST_GiveMax": 2002,
}

func (x VipStaticType) Enum() *VipStaticType {
	p := new(VipStaticType)
	*p = x
	return p
}
func (x VipStaticType) String() string {
	return proto.EnumName(VipStaticType_name, int32(x))
}
func (x *VipStaticType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VipStaticType_value, data, "VipStaticType")
	if err != nil {
		return err
	}
	*x = VipStaticType(value)
	return nil
}
func (VipStaticType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{23} }

type VipValid int32

const (
	VipValid_VV_Days VipValid = 30
)

var VipValid_name = map[int32]string{
	30: "VV_Days",
}
var VipValid_value = map[string]int32{
	"VV_Days": 30,
}

func (x VipValid) Enum() *VipValid {
	p := new(VipValid)
	*p = x
	return p
}
func (x VipValid) String() string {
	return proto.EnumName(VipValid_name, int32(x))
}
func (x *VipValid) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VipValid_value, data, "VipValid")
	if err != nil {
		return err
	}
	*x = VipValid(value)
	return nil
}
func (VipValid) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{24} }

type ReliefType int32

const (
	ReliefType_RT_Normal ReliefType = 1
	ReliefType_RT_Vip    ReliefType = 2
)

var ReliefType_name = map[int32]string{
	1: "RT_Normal",
	2: "RT_Vip",
}
var ReliefType_value = map[string]int32{
	"RT_Normal": 1,
	"RT_Vip":    2,
}

func (x ReliefType) Enum() *ReliefType {
	p := new(ReliefType)
	*p = x
	return p
}
func (x ReliefType) String() string {
	return proto.EnumName(ReliefType_name, int32(x))
}
func (x *ReliefType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReliefType_value, data, "ReliefType")
	if err != nil {
		return err
	}
	*x = ReliefType(value)
	return nil
}
func (ReliefType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{25} }

// 对应客户端请求GS的请求枚举
// 是 ServiceOps的子集（仅允许客户端请求的部分）
type C_ServiceOps int32

const (
	C_ServiceOps_CGS_Req_AllocServerAddress C_ServiceOps = 13
)

var C_ServiceOps_name = map[int32]string{
	13: "CGS_Req_AllocServerAddress",
}
var C_ServiceOps_value = map[string]int32{
	"CGS_Req_AllocServerAddress": 13,
}

func (x C_ServiceOps) Enum() *C_ServiceOps {
	p := new(C_ServiceOps)
	*p = x
	return p
}
func (x C_ServiceOps) String() string {
	return proto.EnumName(C_ServiceOps_name, int32(x))
}
func (x *C_ServiceOps) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(C_ServiceOps_value, data, "C_ServiceOps")
	if err != nil {
		return err
	}
	*x = C_ServiceOps(value)
	return nil
}
func (C_ServiceOps) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{26} }

// 游戏服务请求
type PublisherOps int32

const (
	PublisherOps_Invalid PublisherOps = 0
	// 推送
	PublisherOps_Push PublisherOps = 1
	// 发布
	PublisherOps_Pub PublisherOps = 2
	// 广播
	PublisherOps_Broadcast PublisherOps = 3
)

var PublisherOps_name = map[int32]string{
	0: "Invalid",
	1: "Push",
	2: "Pub",
	3: "Broadcast",
}
var PublisherOps_value = map[string]int32{
	"Invalid":   0,
	"Push":      1,
	"Pub":       2,
	"Broadcast": 3,
}

func (x PublisherOps) Enum() *PublisherOps {
	p := new(PublisherOps)
	*p = x
	return p
}
func (x PublisherOps) String() string {
	return proto.EnumName(PublisherOps_name, int32(x))
}
func (x *PublisherOps) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PublisherOps_value, data, "PublisherOps")
	if err != nil {
		return err
	}
	*x = PublisherOps(value)
	return nil
}
func (PublisherOps) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{27} }

// 订单状态
type EOrderStatus int32

const (
	EOrderStatus_EOS_Invalid EOrderStatus = 0
	EOrderStatus_Created     EOrderStatus = 1
	EOrderStatus_Finished    EOrderStatus = 2
	EOrderStatus_Error       EOrderStatus = 3
	EOrderStatus_Expired     EOrderStatus = 4
	EOrderStatus_Pending     EOrderStatus = 5
)

var EOrderStatus_name = map[int32]string{
	0: "EOS_Invalid",
	1: "Created",
	2: "Finished",
	3: "Error",
	4: "Expired",
	5: "Pending",
}
var EOrderStatus_value = map[string]int32{
	"EOS_Invalid": 0,
	"Created":     1,
	"Finished":    2,
	"Error":       3,
	"Expired":     4,
	"Pending":     5,
}

func (x EOrderStatus) Enum() *EOrderStatus {
	p := new(EOrderStatus)
	*p = x
	return p
}
func (x EOrderStatus) String() string {
	return proto.EnumName(EOrderStatus_name, int32(x))
}
func (x *EOrderStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EOrderStatus_value, data, "EOrderStatus")
	if err != nil {
		return err
	}
	*x = EOrderStatus(value)
	return nil
}
func (EOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{28} }

// 点卡状态
type ECashcardExchangeStatus int32

const (
	ECashcardExchangeStatus_CE_Invalid ECashcardExchangeStatus = 0
	ECashcardExchangeStatus_CE_Created ECashcardExchangeStatus = 1
	ECashcardExchangeStatus_CE_Verify  ECashcardExchangeStatus = 2
	ECashcardExchangeStatus_CE_Pass    ECashcardExchangeStatus = 3
	ECashcardExchangeStatus_CE_Refuse  ECashcardExchangeStatus = 4
)

var ECashcardExchangeStatus_name = map[int32]string{
	0: "CE_Invalid",
	1: "CE_Created",
	2: "CE_Verify",
	3: "CE_Pass",
	4: "CE_Refuse",
}
var ECashcardExchangeStatus_value = map[string]int32{
	"CE_Invalid": 0,
	"CE_Created": 1,
	"CE_Verify":  2,
	"CE_Pass":    3,
	"CE_Refuse":  4,
}

func (x ECashcardExchangeStatus) Enum() *ECashcardExchangeStatus {
	p := new(ECashcardExchangeStatus)
	*p = x
	return p
}
func (x ECashcardExchangeStatus) String() string {
	return proto.EnumName(ECashcardExchangeStatus_name, int32(x))
}
func (x *ECashcardExchangeStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECashcardExchangeStatus_value, data, "ECashcardExchangeStatus")
	if err != nil {
		return err
	}
	*x = ECashcardExchangeStatus(value)
	return nil
}
func (ECashcardExchangeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{29} }

type EChannel int32

const (
	EChannel_EC_Invalid EChannel = 0
	EChannel_Ios        EChannel = 1
	EChannel_Mol        EChannel = 2
	EChannel_Google     EChannel = 3
	EChannel_ChouMa     EChannel = 4
	EChannel_OPPO       EChannel = 5
	EChannel_Spay       EChannel = 6
	EChannel_Diamond    EChannel = 7
	EChannel_Vivo       EChannel = 8
	EChannel_Coda       EChannel = 9
	EChannel_VndPay     EChannel = 10
	EChannel_SpayBank   EChannel = 11
)

var EChannel_name = map[int32]string{
	0:  "EC_Invalid",
	1:  "Ios",
	2:  "Mol",
	3:  "Google",
	4:  "ChouMa",
	5:  "OPPO",
	6:  "Spay",
	7:  "Diamond",
	8:  "Vivo",
	9:  "Coda",
	10: "VndPay",
	11: "SpayBank",
}
var EChannel_value = map[string]int32{
	"EC_Invalid": 0,
	"Ios":        1,
	"Mol":        2,
	"Google":     3,
	"ChouMa":     4,
	"OPPO":       5,
	"Spay":       6,
	"Diamond":    7,
	"Vivo":       8,
	"Coda":       9,
	"VndPay":     10,
	"SpayBank":   11,
}

func (x EChannel) Enum() *EChannel {
	p := new(EChannel)
	*p = x
	return p
}
func (x EChannel) String() string {
	return proto.EnumName(EChannel_name, int32(x))
}
func (x *EChannel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EChannel_value, data, "EChannel")
	if err != nil {
		return err
	}
	*x = EChannel(value)
	return nil
}
func (EChannel) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{30} }

type RegisterType int32

const (
	RegisterType_RT_Invalid  RegisterType = 0
	RegisterType_RT_Guest    RegisterType = 1
	RegisterType_RT_Facebook RegisterType = 2
	RegisterType_RT_Line     RegisterType = 3
	RegisterType_RT_OPPO     RegisterType = 4
	RegisterType_RT_Vivo     RegisterType = 5
	RegisterType_RT_Google   RegisterType = 6
	RegisterType_RT_Account  RegisterType = 7
)

var RegisterType_name = map[int32]string{
	0: "RT_Invalid",
	1: "RT_Guest",
	2: "RT_Facebook",
	3: "RT_Line",
	4: "RT_OPPO",
	5: "RT_Vivo",
	6: "RT_Google",
	7: "RT_Account",
}
var RegisterType_value = map[string]int32{
	"RT_Invalid":  0,
	"RT_Guest":    1,
	"RT_Facebook": 2,
	"RT_Line":     3,
	"RT_OPPO":     4,
	"RT_Vivo":     5,
	"RT_Google":   6,
	"RT_Account":  7,
}

func (x RegisterType) Enum() *RegisterType {
	p := new(RegisterType)
	*p = x
	return p
}
func (x RegisterType) String() string {
	return proto.EnumName(RegisterType_name, int32(x))
}
func (x *RegisterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegisterType_value, data, "RegisterType")
	if err != nil {
		return err
	}
	*x = RegisterType(value)
	return nil
}
func (RegisterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{31} }

// 兑换道具枚举
type ExchangeProp int32

const (
	ExchangeProp_EP_Invalid          ExchangeProp = 0
	ExchangeProp_EP_Diamond_Chip     ExchangeProp = 1
	ExchangeProp_EP_Diamond_RoomCard ExchangeProp = 2
	ExchangeProp_EP_GiftVoucher_Chip ExchangeProp = 3
)

var ExchangeProp_name = map[int32]string{
	0: "EP_Invalid",
	1: "EP_Diamond_Chip",
	2: "EP_Diamond_RoomCard",
	3: "EP_GiftVoucher_Chip",
}
var ExchangeProp_value = map[string]int32{
	"EP_Invalid":          0,
	"EP_Diamond_Chip":     1,
	"EP_Diamond_RoomCard": 2,
	"EP_GiftVoucher_Chip": 3,
}

func (x ExchangeProp) Enum() *ExchangeProp {
	p := new(ExchangeProp)
	*p = x
	return p
}
func (x ExchangeProp) String() string {
	return proto.EnumName(ExchangeProp_name, int32(x))
}
func (x *ExchangeProp) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExchangeProp_value, data, "ExchangeProp")
	if err != nil {
		return err
	}
	*x = ExchangeProp(value)
	return nil
}
func (ExchangeProp) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{32} }

// 活动对应关系
type ActivityEnum int32

const (
	ActivityEnum_AE_Invalid                ActivityEnum = 0
	ActivityEnum_AE_OnlineWelfare          ActivityEnum = 1
	ActivityEnum_AE_SplashWater            ActivityEnum = 2
	ActivityEnum_AE_WaterLampWish          ActivityEnum = 3
	ActivityEnum_AE_ElephantPiggy          ActivityEnum = 4
	ActivityEnum_AE_NewYear                ActivityEnum = 5
	ActivityEnum_AE_CatchFish              ActivityEnum = 6
	ActivityEnum_AE_VIP                    ActivityEnum = 7
	ActivityEnum_AE_SevenFund              ActivityEnum = 8
	ActivityEnum_AE_PayCrit                ActivityEnum = 9
	ActivityEnum_AE_TopWin                 ActivityEnum = 10
	ActivityEnum_AE_LuckySpin              ActivityEnum = 11
	ActivityEnum_AE_DailyTreasure          ActivityEnum = 12
	ActivityEnum_AE_TwistEgg               ActivityEnum = 13
	ActivityEnum_AE_PeriodicSign           ActivityEnum = 14
	ActivityEnum_AE_ThirtyDaysSign         ActivityEnum = 15
	ActivityEnum_AE_PokdengDailyTreasure   ActivityEnum = 16
	ActivityEnum_AE_DummyDailyTreasure     ActivityEnum = 17
	ActivityEnum_AE_CatchFishDailyTreasure ActivityEnum = 18
	ActivityEnum_AE_FourFishDailyTreasure  ActivityEnum = 19
	ActivityEnum_AE_AirPlaneTreasure       ActivityEnum = 20
	ActivityEnum_AE_BrokenGift             ActivityEnum = 21
	ActivityEnum_AE_Lhdb_Unlock            ActivityEnum = 22
	ActivityEnum_AE_Vip_GoStraightTo       ActivityEnum = 23
	ActivityEnum_AE_Daily_Lottery          ActivityEnum = 24
	ActivityEnum_AE_PlaneDailyTreasure     ActivityEnum = 25
	ActivityEnum_AE_BJL_Treasure           ActivityEnum = 26
	ActivityEnum_AE_VnSign                 ActivityEnum = 27
	ActivityEnum_AE_FirstRecharge          ActivityEnum = 28
	ActivityEnum_AE_IndependenceDay        ActivityEnum = 29
	ActivityEnum_AE_WeekRecharge           ActivityEnum = 30
	ActivityEnum_AE_SlotsFishRecharge      ActivityEnum = 31
	ActivityEnum_AE_VideoRecharge          ActivityEnum = 32
	ActivityEnum_AE_SportRecharge          ActivityEnum = 33
	ActivityEnum_AE_MidMonthRecharge       ActivityEnum = 34
	ActivityEnum_AE_NewEveryGift           ActivityEnum = 40
	ActivityEnum_AE_WeekendRecharge        ActivityEnum = 41
)

var ActivityEnum_name = map[int32]string{
	0:  "AE_Invalid",
	1:  "AE_OnlineWelfare",
	2:  "AE_SplashWater",
	3:  "AE_WaterLampWish",
	4:  "AE_ElephantPiggy",
	5:  "AE_NewYear",
	6:  "AE_CatchFish",
	7:  "AE_VIP",
	8:  "AE_SevenFund",
	9:  "AE_PayCrit",
	10: "AE_TopWin",
	11: "AE_LuckySpin",
	12: "AE_DailyTreasure",
	13: "AE_TwistEgg",
	14: "AE_PeriodicSign",
	15: "AE_ThirtyDaysSign",
	16: "AE_PokdengDailyTreasure",
	17: "AE_DummyDailyTreasure",
	18: "AE_CatchFishDailyTreasure",
	19: "AE_FourFishDailyTreasure",
	20: "AE_AirPlaneTreasure",
	21: "AE_BrokenGift",
	22: "AE_Lhdb_Unlock",
	23: "AE_Vip_GoStraightTo",
	24: "AE_Daily_Lottery",
	25: "AE_PlaneDailyTreasure",
	26: "AE_BJL_Treasure",
	27: "AE_VnSign",
	28: "AE_FirstRecharge",
	29: "AE_IndependenceDay",
	30: "AE_WeekRecharge",
	31: "AE_SlotsFishRecharge",
	32: "AE_VideoRecharge",
	33: "AE_SportRecharge",
	34: "AE_MidMonthRecharge",
	40: "AE_NewEveryGift",
	41: "AE_WeekendRecharge",
}
var ActivityEnum_value = map[string]int32{
	"AE_Invalid":                0,
	"AE_OnlineWelfare":          1,
	"AE_SplashWater":            2,
	"AE_WaterLampWish":          3,
	"AE_ElephantPiggy":          4,
	"AE_NewYear":                5,
	"AE_CatchFish":              6,
	"AE_VIP":                    7,
	"AE_SevenFund":              8,
	"AE_PayCrit":                9,
	"AE_TopWin":                 10,
	"AE_LuckySpin":              11,
	"AE_DailyTreasure":          12,
	"AE_TwistEgg":               13,
	"AE_PeriodicSign":           14,
	"AE_ThirtyDaysSign":         15,
	"AE_PokdengDailyTreasure":   16,
	"AE_DummyDailyTreasure":     17,
	"AE_CatchFishDailyTreasure": 18,
	"AE_FourFishDailyTreasure":  19,
	"AE_AirPlaneTreasure":       20,
	"AE_BrokenGift":             21,
	"AE_Lhdb_Unlock":            22,
	"AE_Vip_GoStraightTo":       23,
	"AE_Daily_Lottery":          24,
	"AE_PlaneDailyTreasure":     25,
	"AE_BJL_Treasure":           26,
	"AE_VnSign":                 27,
	"AE_FirstRecharge":          28,
	"AE_IndependenceDay":        29,
	"AE_WeekRecharge":           30,
	"AE_SlotsFishRecharge":      31,
	"AE_VideoRecharge":          32,
	"AE_SportRecharge":          33,
	"AE_MidMonthRecharge":       34,
	"AE_NewEveryGift":           40,
	"AE_WeekendRecharge":        41,
}

func (x ActivityEnum) Enum() *ActivityEnum {
	p := new(ActivityEnum)
	*p = x
	return p
}
func (x ActivityEnum) String() string {
	return proto.EnumName(ActivityEnum_name, int32(x))
}
func (x *ActivityEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActivityEnum_value, data, "ActivityEnum")
	if err != nil {
		return err
	}
	*x = ActivityEnum(value)
	return nil
}
func (ActivityEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{33} }

// 钉钉机器人报警对应
type DingTalkRobotEnum int32

const (
	DingTalkRobotEnum_DTR_PropAlarm      DingTalkRobotEnum = 1
	DingTalkRobotEnum_DTR_KickAlarm      DingTalkRobotEnum = 2
	DingTalkRobotEnum_DTR_FakeAppleAlarm DingTalkRobotEnum = 3
)

var DingTalkRobotEnum_name = map[int32]string{
	1: "DTR_PropAlarm",
	2: "DTR_KickAlarm",
	3: "DTR_FakeAppleAlarm",
}
var DingTalkRobotEnum_value = map[string]int32{
	"DTR_PropAlarm":      1,
	"DTR_KickAlarm":      2,
	"DTR_FakeAppleAlarm": 3,
}

func (x DingTalkRobotEnum) Enum() *DingTalkRobotEnum {
	p := new(DingTalkRobotEnum)
	*p = x
	return p
}
func (x DingTalkRobotEnum) String() string {
	return proto.EnumName(DingTalkRobotEnum_name, int32(x))
}
func (x *DingTalkRobotEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DingTalkRobotEnum_value, data, "DingTalkRobotEnum")
	if err != nil {
		return err
	}
	*x = DingTalkRobotEnum(value)
	return nil
}
func (DingTalkRobotEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{34} }

// 第三方账号类型(除掉fb，line)
type ThirdPartnerType int32

const (
	ThirdPartnerType_TPT_Default ThirdPartnerType = 0
	ThirdPartnerType_TPT_OPPO    ThirdPartnerType = 1
)

var ThirdPartnerType_name = map[int32]string{
	0: "TPT_Default",
	1: "TPT_OPPO",
}
var ThirdPartnerType_value = map[string]int32{
	"TPT_Default": 0,
	"TPT_OPPO":    1,
}

func (x ThirdPartnerType) Enum() *ThirdPartnerType {
	p := new(ThirdPartnerType)
	*p = x
	return p
}
func (x ThirdPartnerType) String() string {
	return proto.EnumName(ThirdPartnerType_name, int32(x))
}
func (x *ThirdPartnerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ThirdPartnerType_value, data, "ThirdPartnerType")
	if err != nil {
		return err
	}
	*x = ThirdPartnerType(value)
	return nil
}
func (ThirdPartnerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{35} }

type SpayCardType int32

const (
	SpayCardType_SCT_Invalid SpayCardType = 0
	SpayCardType_SCT_Viettel SpayCardType = 1
	SpayCardType_SCT_VNP     SpayCardType = 2
	SpayCardType_SCT_VMS     SpayCardType = 3
	SpayCardType_SCT_Zing    SpayCardType = 4
	SpayCardType_SCT_Garena  SpayCardType = 5
	SpayCardType_SCT_Vcoin   SpayCardType = 6
	SpayCardType_SCT_MGC     SpayCardType = 7
	SpayCardType_SCT_ANP     SpayCardType = 8
	SpayCardType_SCT_VNM     SpayCardType = 9
	SpayCardType_SCT_Gate    SpayCardType = 10
)

var SpayCardType_name = map[int32]string{
	0:  "SCT_Invalid",
	1:  "SCT_Viettel",
	2:  "SCT_VNP",
	3:  "SCT_VMS",
	4:  "SCT_Zing",
	5:  "SCT_Garena",
	6:  "SCT_Vcoin",
	7:  "SCT_MGC",
	8:  "SCT_ANP",
	9:  "SCT_VNM",
	10: "SCT_Gate",
}
var SpayCardType_value = map[string]int32{
	"SCT_Invalid": 0,
	"SCT_Viettel": 1,
	"SCT_VNP":     2,
	"SCT_VMS":     3,
	"SCT_Zing":    4,
	"SCT_Garena":  5,
	"SCT_Vcoin":   6,
	"SCT_MGC":     7,
	"SCT_ANP":     8,
	"SCT_VNM":     9,
	"SCT_Gate":    10,
}

func (x SpayCardType) Enum() *SpayCardType {
	p := new(SpayCardType)
	*p = x
	return p
}
func (x SpayCardType) String() string {
	return proto.EnumName(SpayCardType_name, int32(x))
}
func (x *SpayCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpayCardType_value, data, "SpayCardType")
	if err != nil {
		return err
	}
	*x = SpayCardType(value)
	return nil
}
func (SpayCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{36} }

// 资讯任务
type NewsType int32

const (
	NewsType_NT_Parent NewsType = 0
)

var NewsType_name = map[int32]string{
	0: "NT_Parent",
}
var NewsType_value = map[string]int32{
	"NT_Parent": 0,
}

func (x NewsType) Enum() *NewsType {
	p := new(NewsType)
	*p = x
	return p
}
func (x NewsType) String() string {
	return proto.EnumName(NewsType_name, int32(x))
}
func (x *NewsType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NewsType_value, data, "NewsType")
	if err != nil {
		return err
	}
	*x = NewsType(value)
	return nil
}
func (NewsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{37} }

// 踢玩家类型
type KickType int32

const (
	KickType_KT_Invalid    KickType = 0
	KickType_KT_ReplaceACC KickType = 1
	KickType_KT_Web        KickType = 2
	KickType_KT_CloseAcc   KickType = 3
	KickType_KT_Game       KickType = 4
)

var KickType_name = map[int32]string{
	0: "KT_Invalid",
	1: "KT_ReplaceACC",
	2: "KT_Web",
	3: "KT_CloseAcc",
	4: "KT_Game",
}
var KickType_value = map[string]int32{
	"KT_Invalid":    0,
	"KT_ReplaceACC": 1,
	"KT_Web":        2,
	"KT_CloseAcc":   3,
	"KT_Game":       4,
}

func (x KickType) Enum() *KickType {
	p := new(KickType)
	*p = x
	return p
}
func (x KickType) String() string {
	return proto.EnumName(KickType_name, int32(x))
}
func (x *KickType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KickType_value, data, "KickType")
	if err != nil {
		return err
	}
	*x = KickType(value)
	return nil
}
func (KickType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{38} }

// 关服类型
type CloseServerType int32

const (
	CloseServerType_CloseST_Invalid  CloseServerType = 0
	CloseServerType_CloseST_Game     CloseServerType = 1
	CloseServerType_CloseST_CoinSafe CloseServerType = 2
	CloseServerType_CloseST_Web      CloseServerType = 3
)

var CloseServerType_name = map[int32]string{
	0: "CloseST_Invalid",
	1: "CloseST_Game",
	2: "CloseST_CoinSafe",
	3: "CloseST_Web",
}
var CloseServerType_value = map[string]int32{
	"CloseST_Invalid":  0,
	"CloseST_Game":     1,
	"CloseST_CoinSafe": 2,
	"CloseST_Web":      3,
}

func (x CloseServerType) Enum() *CloseServerType {
	p := new(CloseServerType)
	*p = x
	return p
}
func (x CloseServerType) String() string {
	return proto.EnumName(CloseServerType_name, int32(x))
}
func (x *CloseServerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloseServerType_value, data, "CloseServerType")
	if err != nil {
		return err
	}
	*x = CloseServerType(value)
	return nil
}
func (CloseServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{39} }

// 开服类型
type OpenServerType int32

const (
	OpenServerType_OpenST_Invalid  OpenServerType = 0
	OpenServerType_OpenST_Game     OpenServerType = 1
	OpenServerType_OpenST_CoinSafe OpenServerType = 2
	OpenServerType_OpenST_Web      OpenServerType = 3
)

var OpenServerType_name = map[int32]string{
	0: "OpenST_Invalid",
	1: "OpenST_Game",
	2: "OpenST_CoinSafe",
	3: "OpenST_Web",
}
var OpenServerType_value = map[string]int32{
	"OpenST_Invalid":  0,
	"OpenST_Game":     1,
	"OpenST_CoinSafe": 2,
	"OpenST_Web":      3,
}

func (x OpenServerType) Enum() *OpenServerType {
	p := new(OpenServerType)
	*p = x
	return p
}
func (x OpenServerType) String() string {
	return proto.EnumName(OpenServerType_name, int32(x))
}
func (x *OpenServerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OpenServerType_value, data, "OpenServerType")
	if err != nil {
		return err
	}
	*x = OpenServerType(value)
	return nil
}
func (OpenServerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{40} }

// 活动广播类型
type ActivityBroardcastType int32

const (
	ActivityBroardcastType_APT_Invalid     ActivityBroardcastType = 0
	ActivityBroardcastType_APT_InActivity  ActivityBroardcastType = 1
	ActivityBroardcastType_APT_HallMarquee ActivityBroardcastType = 2
)

var ActivityBroardcastType_name = map[int32]string{
	0: "APT_Invalid",
	1: "APT_InActivity",
	2: "APT_HallMarquee",
}
var ActivityBroardcastType_value = map[string]int32{
	"APT_Invalid":     0,
	"APT_InActivity":  1,
	"APT_HallMarquee": 2,
}

func (x ActivityBroardcastType) Enum() *ActivityBroardcastType {
	p := new(ActivityBroardcastType)
	*p = x
	return p
}
func (x ActivityBroardcastType) String() string {
	return proto.EnumName(ActivityBroardcastType_name, int32(x))
}
func (x *ActivityBroardcastType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActivityBroardcastType_value, data, "ActivityBroardcastType")
	if err != nil {
		return err
	}
	*x = ActivityBroardcastType(value)
	return nil
}
func (ActivityBroardcastType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{41} }

// 玩家踢人枚举
type EnKickPlayerType int32

const (
	EnKickPlayerType_En_Kick_Normal      EnKickPlayerType = 0
	EnKickPlayerType_En_Kick_PreventChat EnKickPlayerType = 1
)

var EnKickPlayerType_name = map[int32]string{
	0: "En_Kick_Normal",
	1: "En_Kick_PreventChat",
}
var EnKickPlayerType_value = map[string]int32{
	"En_Kick_Normal":      0,
	"En_Kick_PreventChat": 1,
}

func (x EnKickPlayerType) Enum() *EnKickPlayerType {
	p := new(EnKickPlayerType)
	*p = x
	return p
}
func (x EnKickPlayerType) String() string {
	return proto.EnumName(EnKickPlayerType_name, int32(x))
}
func (x *EnKickPlayerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnKickPlayerType_value, data, "EnKickPlayerType")
	if err != nil {
		return err
	}
	*x = EnKickPlayerType(value)
	return nil
}
func (EnKickPlayerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{42} }

// 游戏集合类型
type GameSetType int32

const (
	GameSetType_GST_All        GameSetType = 0
	GameSetType_GST_Slot       GameSetType = 1
	GameSetType_GST_Poker      GameSetType = 2
	GameSetType_GST_Catch      GameSetType = 3
	GameSetType_GST_PokerDKT   GameSetType = 4
	GameSetType_GST_PokerPBHYX GameSetType = 5
)

var GameSetType_name = map[int32]string{
	0: "GST_All",
	1: "GST_Slot",
	2: "GST_Poker",
	3: "GST_Catch",
	4: "GST_PokerDKT",
	5: "GST_PokerPBHYX",
}
var GameSetType_value = map[string]int32{
	"GST_All":        0,
	"GST_Slot":       1,
	"GST_Poker":      2,
	"GST_Catch":      3,
	"GST_PokerDKT":   4,
	"GST_PokerPBHYX": 5,
}

func (x GameSetType) Enum() *GameSetType {
	p := new(GameSetType)
	*p = x
	return p
}
func (x GameSetType) String() string {
	return proto.EnumName(GameSetType_name, int32(x))
}
func (x *GameSetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameSetType_value, data, "GameSetType")
	if err != nil {
		return err
	}
	*x = GameSetType(value)
	return nil
}
func (GameSetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{43} }

// 商品购买倒计时类型
type WareCdType int32

const (
	WareCdType_WCT_Day    WareCdType = 1
	WareCdType_WCT_Second WareCdType = 2
)

var WareCdType_name = map[int32]string{
	1: "WCT_Day",
	2: "WCT_Second",
}
var WareCdType_value = map[string]int32{
	"WCT_Day":    1,
	"WCT_Second": 2,
}

func (x WareCdType) Enum() *WareCdType {
	p := new(WareCdType)
	*p = x
	return p
}
func (x WareCdType) String() string {
	return proto.EnumName(WareCdType_name, int32(x))
}
func (x *WareCdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WareCdType_value, data, "WareCdType")
	if err != nil {
		return err
	}
	*x = WareCdType(value)
	return nil
}
func (WareCdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{44} }

type RewardType int32

const (
	RewardType_Fixed      RewardType = 1
	RewardType_Rand       RewardType = 2
	RewardType_Rand_Range RewardType = 3
)

var RewardType_name = map[int32]string{
	1: "Fixed",
	2: "Rand",
	3: "Rand_Range",
}
var RewardType_value = map[string]int32{
	"Fixed":      1,
	"Rand":       2,
	"Rand_Range": 3,
}

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}
func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}
func (x *RewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardType_value, data, "RewardType")
	if err != nil {
		return err
	}
	*x = RewardType(value)
	return nil
}
func (RewardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{45} }

type GameStyle int32

const (
	GameStyle_GS_Normal GameStyle = 0
	GameStyle_GS_Mini   GameStyle = 1
)

var GameStyle_name = map[int32]string{
	0: "GS_Normal",
	1: "GS_Mini",
}
var GameStyle_value = map[string]int32{
	"GS_Normal": 0,
	"GS_Mini":   1,
}

func (x GameStyle) Enum() *GameStyle {
	p := new(GameStyle)
	*p = x
	return p
}
func (x GameStyle) String() string {
	return proto.EnumName(GameStyle_name, int32(x))
}
func (x *GameStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameStyle_value, data, "GameStyle")
	if err != nil {
		return err
	}
	*x = GameStyle(value)
	return nil
}
func (GameStyle) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{46} }

type GameTaxType int32

const (
	GameTaxType_GTT_Table_Fee GameTaxType = 1
	GameTaxType_GTT_Tax_Ratio GameTaxType = 2
)

var GameTaxType_name = map[int32]string{
	1: "GTT_Table_Fee",
	2: "GTT_Tax_Ratio",
}
var GameTaxType_value = map[string]int32{
	"GTT_Table_Fee": 1,
	"GTT_Tax_Ratio": 2,
}

func (x GameTaxType) Enum() *GameTaxType {
	p := new(GameTaxType)
	*p = x
	return p
}
func (x GameTaxType) String() string {
	return proto.EnumName(GameTaxType_name, int32(x))
}
func (x *GameTaxType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameTaxType_value, data, "GameTaxType")
	if err != nil {
		return err
	}
	*x = GameTaxType(value)
	return nil
}
func (GameTaxType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{47} }

type RelationCalcType int32

const (
	RelationCalcType_Not RelationCalcType = 0
	RelationCalcType_And RelationCalcType = 1
	RelationCalcType_Or  RelationCalcType = 2
)

var RelationCalcType_name = map[int32]string{
	0: "Not",
	1: "And",
	2: "Or",
}
var RelationCalcType_value = map[string]int32{
	"Not": 0,
	"And": 1,
	"Or":  2,
}

func (x RelationCalcType) Enum() *RelationCalcType {
	p := new(RelationCalcType)
	*p = x
	return p
}
func (x RelationCalcType) String() string {
	return proto.EnumName(RelationCalcType_name, int32(x))
}
func (x *RelationCalcType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RelationCalcType_value, data, "RelationCalcType")
	if err != nil {
		return err
	}
	*x = RelationCalcType(value)
	return nil
}
func (RelationCalcType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{48} }

type PersionalRecordType int32

const (
	PersionalRecordType_PRT_Invalid               PersionalRecordType = 0
	PersionalRecordType_PRT_Game                  PersionalRecordType = 1
	PersionalRecordType_PRT_PayAndExchange        PersionalRecordType = 2
	PersionalRecordType_PRT_Trade                 PersionalRecordType = 3
	PersionalRecordType_PRT_SafeBox               PersionalRecordType = 4
	PersionalRecordType_PRT_TryChouMaExchange     PersionalRecordType = 5
	PersionalRecordType_PRT_SystemGive            PersionalRecordType = 6
	PersionalRecordType_PRT_ThirdPardGameExchange PersionalRecordType = 7
)

var PersionalRecordType_name = map[int32]string{
	0: "PRT_Invalid",
	1: "PRT_Game",
	2: "PRT_PayAndExchange",
	3: "PRT_Trade",
	4: "PRT_SafeBox",
	5: "PRT_TryChouMaExchange",
	6: "PRT_SystemGive",
	7: "PRT_ThirdPardGameExchange",
}
var PersionalRecordType_value = map[string]int32{
	"PRT_Invalid":               0,
	"PRT_Game":                  1,
	"PRT_PayAndExchange":        2,
	"PRT_Trade":                 3,
	"PRT_SafeBox":               4,
	"PRT_TryChouMaExchange":     5,
	"PRT_SystemGive":            6,
	"PRT_ThirdPardGameExchange": 7,
}

func (x PersionalRecordType) Enum() *PersionalRecordType {
	p := new(PersionalRecordType)
	*p = x
	return p
}
func (x PersionalRecordType) String() string {
	return proto.EnumName(PersionalRecordType_name, int32(x))
}
func (x *PersionalRecordType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PersionalRecordType_value, data, "PersionalRecordType")
	if err != nil {
		return err
	}
	*x = PersionalRecordType(value)
	return nil
}
func (PersionalRecordType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{49} }

type ThirdPartGameWallet int32

const (
	ThirdPartGameWallet_TPGW_DG   ThirdPartGameWallet = 2
	ThirdPartGameWallet_TPGW_SEXY ThirdPartGameWallet = 3
	ThirdPartGameWallet_TPGW_GPI  ThirdPartGameWallet = 4
	ThirdPartGameWallet_TPGW_CQ9  ThirdPartGameWallet = 5
	ThirdPartGameWallet_TPGW_PG   ThirdPartGameWallet = 6
	ThirdPartGameWallet_TPGW_LCG  ThirdPartGameWallet = 7
)

var ThirdPartGameWallet_name = map[int32]string{
	2: "TPGW_DG",
	3: "TPGW_SEXY",
	4: "TPGW_GPI",
	5: "TPGW_CQ9",
	6: "TPGW_PG",
	7: "TPGW_LCG",
}
var ThirdPartGameWallet_value = map[string]int32{
	"TPGW_DG":   2,
	"TPGW_SEXY": 3,
	"TPGW_GPI":  4,
	"TPGW_CQ9":  5,
	"TPGW_PG":   6,
	"TPGW_LCG":  7,
}

func (x ThirdPartGameWallet) Enum() *ThirdPartGameWallet {
	p := new(ThirdPartGameWallet)
	*p = x
	return p
}
func (x ThirdPartGameWallet) String() string {
	return proto.EnumName(ThirdPartGameWallet_name, int32(x))
}
func (x *ThirdPartGameWallet) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ThirdPartGameWallet_value, data, "ThirdPartGameWallet")
	if err != nil {
		return err
	}
	*x = ThirdPartGameWallet(value)
	return nil
}
func (ThirdPartGameWallet) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{50} }

type VnSignStatus int32

const (
	VnSignStatus_VSS_Invalid     VnSignStatus = 0
	VnSignStatus_VSS_CanSign     VnSignStatus = 1
	VnSignStatus_VSS_AlreadySign VnSignStatus = 2
	VnSignStatus_VSS_MissSign    VnSignStatus = 3
	VnSignStatus_VSS_WaitSign    VnSignStatus = 4
)

var VnSignStatus_name = map[int32]string{
	0: "VSS_Invalid",
	1: "VSS_CanSign",
	2: "VSS_AlreadySign",
	3: "VSS_MissSign",
	4: "VSS_WaitSign",
}
var VnSignStatus_value = map[string]int32{
	"VSS_Invalid":     0,
	"VSS_CanSign":     1,
	"VSS_AlreadySign": 2,
	"VSS_MissSign":    3,
	"VSS_WaitSign":    4,
}

func (x VnSignStatus) Enum() *VnSignStatus {
	p := new(VnSignStatus)
	*p = x
	return p
}
func (x VnSignStatus) String() string {
	return proto.EnumName(VnSignStatus_name, int32(x))
}
func (x *VnSignStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VnSignStatus_value, data, "VnSignStatus")
	if err != nil {
		return err
	}
	*x = VnSignStatus(value)
	return nil
}
func (VnSignStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{51} }

type VnSignTaskStatus int32

const (
	VnSignTaskStatus_VSTS_Invalid       VnSignTaskStatus = 0
	VnSignTaskStatus_VSTS_OneMultiple   VnSignTaskStatus = 1
	VnSignTaskStatus_VSTS_TwoMultiple   VnSignTaskStatus = 2
	VnSignTaskStatus_VSTS_ThreeMultiple VnSignTaskStatus = 3
)

var VnSignTaskStatus_name = map[int32]string{
	0: "VSTS_Invalid",
	1: "VSTS_OneMultiple",
	2: "VSTS_TwoMultiple",
	3: "VSTS_ThreeMultiple",
}
var VnSignTaskStatus_value = map[string]int32{
	"VSTS_Invalid":       0,
	"VSTS_OneMultiple":   1,
	"VSTS_TwoMultiple":   2,
	"VSTS_ThreeMultiple": 3,
}

func (x VnSignTaskStatus) Enum() *VnSignTaskStatus {
	p := new(VnSignTaskStatus)
	*p = x
	return p
}
func (x VnSignTaskStatus) String() string {
	return proto.EnumName(VnSignTaskStatus_name, int32(x))
}
func (x *VnSignTaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VnSignTaskStatus_value, data, "VnSignTaskStatus")
	if err != nil {
		return err
	}
	*x = VnSignTaskStatus(value)
	return nil
}
func (VnSignTaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{52} }

type CommonStatus int32

const (
	CommonStatus_CS_Invalid CommonStatus = 0
	CommonStatus_CS_Can     CommonStatus = 1
	CommonStatus_CS_Already CommonStatus = 2
)

var CommonStatus_name = map[int32]string{
	0: "CS_Invalid",
	1: "CS_Can",
	2: "CS_Already",
}
var CommonStatus_value = map[string]int32{
	"CS_Invalid": 0,
	"CS_Can":     1,
	"CS_Already": 2,
}

func (x CommonStatus) Enum() *CommonStatus {
	p := new(CommonStatus)
	*p = x
	return p
}
func (x CommonStatus) String() string {
	return proto.EnumName(CommonStatus_name, int32(x))
}
func (x *CommonStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CommonStatus_value, data, "CommonStatus")
	if err != nil {
		return err
	}
	*x = CommonStatus(value)
	return nil
}
func (CommonStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{53} }

type DailySpinTaskStatus int32

const (
	DailySpinTaskStatus_TS_Invalid     DailySpinTaskStatus = 0
	DailySpinTaskStatus_TS_CanSign     DailySpinTaskStatus = 1
	DailySpinTaskStatus_TS_AlreadySign DailySpinTaskStatus = 2
)

var DailySpinTaskStatus_name = map[int32]string{
	0: "TS_Invalid",
	1: "TS_CanSign",
	2: "TS_AlreadySign",
}
var DailySpinTaskStatus_value = map[string]int32{
	"TS_Invalid":     0,
	"TS_CanSign":     1,
	"TS_AlreadySign": 2,
}

func (x DailySpinTaskStatus) Enum() *DailySpinTaskStatus {
	p := new(DailySpinTaskStatus)
	*p = x
	return p
}
func (x DailySpinTaskStatus) String() string {
	return proto.EnumName(DailySpinTaskStatus_name, int32(x))
}
func (x *DailySpinTaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DailySpinTaskStatus_value, data, "DailySpinTaskStatus")
	if err != nil {
		return err
	}
	*x = DailySpinTaskStatus(value)
	return nil
}
func (DailySpinTaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{54} }

type ManyRechargeStatus int32

const (
	ManyRechargeStatus_MRS_Invalid ManyRechargeStatus = 0
	ManyRechargeStatus_MRS_Can     ManyRechargeStatus = 1
	ManyRechargeStatus_MRS_Already ManyRechargeStatus = 2
	ManyRechargeStatus_MRS_Missing ManyRechargeStatus = 3
)

var ManyRechargeStatus_name = map[int32]string{
	0: "MRS_Invalid",
	1: "MRS_Can",
	2: "MRS_Already",
	3: "MRS_Missing",
}
var ManyRechargeStatus_value = map[string]int32{
	"MRS_Invalid": 0,
	"MRS_Can":     1,
	"MRS_Already": 2,
	"MRS_Missing": 3,
}

func (x ManyRechargeStatus) Enum() *ManyRechargeStatus {
	p := new(ManyRechargeStatus)
	*p = x
	return p
}
func (x ManyRechargeStatus) String() string {
	return proto.EnumName(ManyRechargeStatus_name, int32(x))
}
func (x *ManyRechargeStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ManyRechargeStatus_value, data, "ManyRechargeStatus")
	if err != nil {
		return err
	}
	*x = ManyRechargeStatus(value)
	return nil
}
func (ManyRechargeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{55} }

type DailySpinTaskType int32

const (
	DailySpinTaskType_TT_Invalid     DailySpinTaskType = 0
	DailySpinTaskType_TT_Today       DailySpinTaskType = 1
	DailySpinTaskType_TT_Lifetime    DailySpinTaskType = 2
	DailySpinTaskType_TT_NewRigister DailySpinTaskType = 3
)

var DailySpinTaskType_name = map[int32]string{
	0: "TT_Invalid",
	1: "TT_Today",
	2: "TT_Lifetime",
	3: "TT_NewRigister",
}
var DailySpinTaskType_value = map[string]int32{
	"TT_Invalid":     0,
	"TT_Today":       1,
	"TT_Lifetime":    2,
	"TT_NewRigister": 3,
}

func (x DailySpinTaskType) Enum() *DailySpinTaskType {
	p := new(DailySpinTaskType)
	*p = x
	return p
}
func (x DailySpinTaskType) String() string {
	return proto.EnumName(DailySpinTaskType_name, int32(x))
}
func (x *DailySpinTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DailySpinTaskType_value, data, "DailySpinTaskType")
	if err != nil {
		return err
	}
	*x = DailySpinTaskType(value)
	return nil
}
func (DailySpinTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{56} }

// 每日转盘 任务id
type DailySpinTaskId int32

const (
	DailySpinTaskId_DST_Invalid           DailySpinTaskId = 0
	DailySpinTaskId_DST_OnLogin           DailySpinTaskId = 1001
	DailySpinTaskId_DST_RebateScore       DailySpinTaskId = 1002
	DailySpinTaskId_DST_DayLose           DailySpinTaskId = 1003
	DailySpinTaskId_DST_DayRecharge       DailySpinTaskId = 1004
	DailySpinTaskId_DST_RechargeTimes     DailySpinTaskId = 1005
	DailySpinTaskId_DST_RechargeAmount1   DailySpinTaskId = 1006
	DailySpinTaskId_DST_RechargeAmount2   DailySpinTaskId = 1007
	DailySpinTaskId_DST_RechargeAmount3   DailySpinTaskId = 1008
	DailySpinTaskId_DST_RechargeAmount4   DailySpinTaskId = 1009
	DailySpinTaskId_DST_Recharge          DailySpinTaskId = 2001
	DailySpinTaskId_DST_BindTel           DailySpinTaskId = 2002
	DailySpinTaskId_DST_BindCard          DailySpinTaskId = 2003
	DailySpinTaskId_DST_Withdrawal        DailySpinTaskId = 2004
	DailySpinTaskId_DST_GIFTCODE          DailySpinTaskId = 2005
	DailySpinTaskId_DST_ThirdRealMan      DailySpinTaskId = 2006
	DailySpinTaskId_DST_BindGP            DailySpinTaskId = 2007
	DailySpinTaskId_DST_ReSetNike         DailySpinTaskId = 2008
	DailySpinTaskId_DST_UpgradeVIP1       DailySpinTaskId = 2009
	DailySpinTaskId_DST_UpgradeVIP2       DailySpinTaskId = 2010
	DailySpinTaskId_DST_ChildUpgrade      DailySpinTaskId = 2011
	DailySpinTaskId_DST_RechargeTimes1    DailySpinTaskId = 2012
	DailySpinTaskId_DST_RechargeTimes2    DailySpinTaskId = 2013
	DailySpinTaskId_DST_RechargeTimes3    DailySpinTaskId = 2014
	DailySpinTaskId_DST_BameBetAmount1    DailySpinTaskId = 2015
	DailySpinTaskId_DST_BameBetAmount2    DailySpinTaskId = 2016
	DailySpinTaskId_DST_BameBetAmount3    DailySpinTaskId = 2017
	DailySpinTaskId_DST_BindPhone         DailySpinTaskId = 3001
	DailySpinTaskId_DST_BindBankCard      DailySpinTaskId = 3002
	DailySpinTaskId_DST_FirstRecharge     DailySpinTaskId = 3003
	DailySpinTaskId_DST_GameBetAmount     DailySpinTaskId = 3004
	DailySpinTaskId_DST_FirstWithdraw     DailySpinTaskId = 3005
	DailySpinTaskId_DST_ModifyNickName    DailySpinTaskId = 3006
	DailySpinTaskId_DST_InviteeBecomeVip1 DailySpinTaskId = 3007
)

var DailySpinTaskId_name = map[int32]string{
	0:    "DST_Invalid",
	1001: "DST_OnLogin",
	1002: "DST_RebateScore",
	1003: "DST_DayLose",
	1004: "DST_DayRecharge",
	1005: "DST_RechargeTimes",
	1006: "DST_RechargeAmount1",
	1007: "DST_RechargeAmount2",
	1008: "DST_RechargeAmount3",
	1009: "DST_RechargeAmount4",
	2001: "DST_Recharge",
	2002: "DST_BindTel",
	2003: "DST_BindCard",
	2004: "DST_Withdrawal",
	2005: "DST_GIFTCODE",
	2006: "DST_ThirdRealMan",
	2007: "DST_BindGP",
	2008: "DST_ReSetNike",
	2009: "DST_UpgradeVIP1",
	2010: "DST_UpgradeVIP2",
	2011: "DST_ChildUpgrade",
	2012: "DST_RechargeTimes1",
	2013: "DST_RechargeTimes2",
	2014: "DST_RechargeTimes3",
	2015: "DST_BameBetAmount1",
	2016: "DST_BameBetAmount2",
	2017: "DST_BameBetAmount3",
	3001: "DST_BindPhone",
	3002: "DST_BindBankCard",
	3003: "DST_FirstRecharge",
	3004: "DST_GameBetAmount",
	3005: "DST_FirstWithdraw",
	3006: "DST_ModifyNickName",
	3007: "DST_InviteeBecomeVip1",
}
var DailySpinTaskId_value = map[string]int32{
	"DST_Invalid":           0,
	"DST_OnLogin":           1001,
	"DST_RebateScore":       1002,
	"DST_DayLose":           1003,
	"DST_DayRecharge":       1004,
	"DST_RechargeTimes":     1005,
	"DST_RechargeAmount1":   1006,
	"DST_RechargeAmount2":   1007,
	"DST_RechargeAmount3":   1008,
	"DST_RechargeAmount4":   1009,
	"DST_Recharge":          2001,
	"DST_BindTel":           2002,
	"DST_BindCard":          2003,
	"DST_Withdrawal":        2004,
	"DST_GIFTCODE":          2005,
	"DST_ThirdRealMan":      2006,
	"DST_BindGP":            2007,
	"DST_ReSetNike":         2008,
	"DST_UpgradeVIP1":       2009,
	"DST_UpgradeVIP2":       2010,
	"DST_ChildUpgrade":      2011,
	"DST_RechargeTimes1":    2012,
	"DST_RechargeTimes2":    2013,
	"DST_RechargeTimes3":    2014,
	"DST_BameBetAmount1":    2015,
	"DST_BameBetAmount2":    2016,
	"DST_BameBetAmount3":    2017,
	"DST_BindPhone":         3001,
	"DST_BindBankCard":      3002,
	"DST_FirstRecharge":     3003,
	"DST_GameBetAmount":     3004,
	"DST_FirstWithdraw":     3005,
	"DST_ModifyNickName":    3006,
	"DST_InviteeBecomeVip1": 3007,
}

func (x DailySpinTaskId) Enum() *DailySpinTaskId {
	p := new(DailySpinTaskId)
	*p = x
	return p
}
func (x DailySpinTaskId) String() string {
	return proto.EnumName(DailySpinTaskId_name, int32(x))
}
func (x *DailySpinTaskId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DailySpinTaskId_value, data, "DailySpinTaskId")
	if err != nil {
		return err
	}
	*x = DailySpinTaskId(value)
	return nil
}
func (DailySpinTaskId) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{57} }

// VIP抽红包 任务id
type VIPLotteryTaskId int32

const (
	VIPLotteryTaskId_VLT_Invalid      VIPLotteryTaskId = 0
	VIPLotteryTaskId_VLT_ChildUpgrade VIPLotteryTaskId = 1001
	VIPLotteryTaskId_VLT_UpgradeLevel VIPLotteryTaskId = 1002
	VIPLotteryTaskId_VLT_DayLose      VIPLotteryTaskId = 1003
)

var VIPLotteryTaskId_name = map[int32]string{
	0:    "VLT_Invalid",
	1001: "VLT_ChildUpgrade",
	1002: "VLT_UpgradeLevel",
	1003: "VLT_DayLose",
}
var VIPLotteryTaskId_value = map[string]int32{
	"VLT_Invalid":      0,
	"VLT_ChildUpgrade": 1001,
	"VLT_UpgradeLevel": 1002,
	"VLT_DayLose":      1003,
}

func (x VIPLotteryTaskId) Enum() *VIPLotteryTaskId {
	p := new(VIPLotteryTaskId)
	*p = x
	return p
}
func (x VIPLotteryTaskId) String() string {
	return proto.EnumName(VIPLotteryTaskId_name, int32(x))
}
func (x *VIPLotteryTaskId) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VIPLotteryTaskId_value, data, "VIPLotteryTaskId")
	if err != nil {
		return err
	}
	*x = VIPLotteryTaskId(value)
	return nil
}
func (VIPLotteryTaskId) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{58} }

type ModelType int32

const (
	ModelType_MT_BuYu          ModelType = 1
	ModelType_MT_ThirdElectron ModelType = 2
	ModelType_MT_ThirdRealMan  ModelType = 3
	ModelType_MT_OfficialPay   ModelType = 4
	ModelType_MT_BankEntrance  ModelType = 5
	ModelType_MT_Mall          ModelType = 6
	ModelType_MT_Advertising   ModelType = 7
	ModelType_MT_PopUps        ModelType = 8
	ModelType_MT_Marquee       ModelType = 9
	ModelType_MT_MiniGame      ModelType = 10
	ModelType_MT_ThirdPE       ModelType = 11
)

var ModelType_name = map[int32]string{
	1:  "MT_BuYu",
	2:  "MT_ThirdElectron",
	3:  "MT_ThirdRealMan",
	4:  "MT_OfficialPay",
	5:  "MT_BankEntrance",
	6:  "MT_Mall",
	7:  "MT_Advertising",
	8:  "MT_PopUps",
	9:  "MT_Marquee",
	10: "MT_MiniGame",
	11: "MT_ThirdPE",
}
var ModelType_value = map[string]int32{
	"MT_BuYu":          1,
	"MT_ThirdElectron": 2,
	"MT_ThirdRealMan":  3,
	"MT_OfficialPay":   4,
	"MT_BankEntrance":  5,
	"MT_Mall":          6,
	"MT_Advertising":   7,
	"MT_PopUps":        8,
	"MT_Marquee":       9,
	"MT_MiniGame":      10,
	"MT_ThirdPE":       11,
}

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}
func (x ModelType) String() string {
	return proto.EnumName(ModelType_name, int32(x))
}
func (x *ModelType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ModelType_value, data, "ModelType")
	if err != nil {
		return err
	}
	*x = ModelType(value)
	return nil
}
func (ModelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{59} }

type NoviceSignStatus int32

const (
	NoviceSignStatus_NSS_Invalid     NoviceSignStatus = 0
	NoviceSignStatus_NSS_CanSign     NoviceSignStatus = 1
	NoviceSignStatus_NSS_AlreadySign NoviceSignStatus = 2
	NoviceSignStatus_NSS_UnSign      NoviceSignStatus = 3
)

var NoviceSignStatus_name = map[int32]string{
	0: "NSS_Invalid",
	1: "NSS_CanSign",
	2: "NSS_AlreadySign",
	3: "NSS_UnSign",
}
var NoviceSignStatus_value = map[string]int32{
	"NSS_Invalid":     0,
	"NSS_CanSign":     1,
	"NSS_AlreadySign": 2,
	"NSS_UnSign":      3,
}

func (x NoviceSignStatus) Enum() *NoviceSignStatus {
	p := new(NoviceSignStatus)
	*p = x
	return p
}
func (x NoviceSignStatus) String() string {
	return proto.EnumName(NoviceSignStatus_name, int32(x))
}
func (x *NoviceSignStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoviceSignStatus_value, data, "NoviceSignStatus")
	if err != nil {
		return err
	}
	*x = NoviceSignStatus(value)
	return nil
}
func (NoviceSignStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{60} }

type NoviceSignType int32

const (
	NoviceSignType_NST_Ordinary NoviceSignType = 1
	NoviceSignType_NST_Special  NoviceSignType = 2
)

var NoviceSignType_name = map[int32]string{
	1: "NST_Ordinary",
	2: "NST_Special",
}
var NoviceSignType_value = map[string]int32{
	"NST_Ordinary": 1,
	"NST_Special":  2,
}

func (x NoviceSignType) Enum() *NoviceSignType {
	p := new(NoviceSignType)
	*p = x
	return p
}
func (x NoviceSignType) String() string {
	return proto.EnumName(NoviceSignType_name, int32(x))
}
func (x *NoviceSignType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoviceSignType_value, data, "NoviceSignType")
	if err != nil {
		return err
	}
	*x = NoviceSignType(value)
	return nil
}
func (NoviceSignType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{61} }

type NoviceGuideEvents int32

const (
	NoviceGuideEvents_NGE_DownloadF2Fish               NoviceGuideEvents = 1
	NoviceGuideEvents_NGE_NoviceActClosedInNoviceGuide NoviceGuideEvents = 2
	NoviceGuideEvents_NGE_ClickNoviceActivityIcon      NoviceGuideEvents = 3
	NoviceGuideEvents_NGE_ClickNoviceScratchCard       NoviceGuideEvents = 4
	NoviceGuideEvents_NGE_ClickCompleteInfo            NoviceGuideEvents = 5
	NoviceGuideEvents_NGE_ScratchCardReward            NoviceGuideEvents = 6
	NoviceGuideEvents_NGE_ClickNoviceSign              NoviceGuideEvents = 7
	NoviceGuideEvents_NGE_ClickNoviceResurrection      NoviceGuideEvents = 8
	NoviceGuideEvents_NGE_EnterF2Fish                  NoviceGuideEvents = 9
	NoviceGuideEvents_NGE_SkipGuide                    NoviceGuideEvents = 10
	NoviceGuideEvents_NGE_ClickActFirstRecharge        NoviceGuideEvents = 11
	NoviceGuideEvents_NGE_ClickActWeeklyCard           NoviceGuideEvents = 12
)

var NoviceGuideEvents_name = map[int32]string{
	1:  "NGE_DownloadF2Fish",
	2:  "NGE_NoviceActClosedInNoviceGuide",
	3:  "NGE_ClickNoviceActivityIcon",
	4:  "NGE_ClickNoviceScratchCard",
	5:  "NGE_ClickCompleteInfo",
	6:  "NGE_ScratchCardReward",
	7:  "NGE_ClickNoviceSign",
	8:  "NGE_ClickNoviceResurrection",
	9:  "NGE_EnterF2Fish",
	10: "NGE_SkipGuide",
	11: "NGE_ClickActFirstRecharge",
	12: "NGE_ClickActWeeklyCard",
}
var NoviceGuideEvents_value = map[string]int32{
	"NGE_DownloadF2Fish":               1,
	"NGE_NoviceActClosedInNoviceGuide": 2,
	"NGE_ClickNoviceActivityIcon":      3,
	"NGE_ClickNoviceScratchCard":       4,
	"NGE_ClickCompleteInfo":            5,
	"NGE_ScratchCardReward":            6,
	"NGE_ClickNoviceSign":              7,
	"NGE_ClickNoviceResurrection":      8,
	"NGE_EnterF2Fish":                  9,
	"NGE_SkipGuide":                    10,
	"NGE_ClickActFirstRecharge":        11,
	"NGE_ClickActWeeklyCard":           12,
}

func (x NoviceGuideEvents) Enum() *NoviceGuideEvents {
	p := new(NoviceGuideEvents)
	*p = x
	return p
}
func (x NoviceGuideEvents) String() string {
	return proto.EnumName(NoviceGuideEvents_name, int32(x))
}
func (x *NoviceGuideEvents) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NoviceGuideEvents_value, data, "NoviceGuideEvents")
	if err != nil {
		return err
	}
	*x = NoviceGuideEvents(value)
	return nil
}
func (NoviceGuideEvents) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{62} }

type MailType int32

const (
	MailType_MT_VipDayReturn                MailType = 1
	MailType_MT_VipWeekReturn               MailType = 2
	MailType_MT_VipBirthdayGift             MailType = 3
	MailType_MT_RechargeSuccess             MailType = 4
	MailType_MT_RechargeTimeoutCompensate   MailType = 5
	MailType_MT_WithdrawalSuccess           MailType = 6
	MailType_MT_WithdrawalTimeoutCompensate MailType = 7
	MailType_MT_CardExchange                MailType = 8
	MailType_MT_AgentRevenue                MailType = 9
	MailType_MT_AgentBeginnerReward         MailType = 10
	MailType_MT_FirstRechargeReturn         MailType = 11
	MailType_MT_Cdkey                       MailType = 12
	MailType_MT_Admin                       MailType = 13
	MailType_MT_Important                   MailType = 14
	MailType_MT_Compensate                  MailType = 15
	MailType_MT_ReviewRefuse                MailType = 16
	MailType_MT_WithdrawalFailed            MailType = 17
	MailType_MT_WithdrawalReviewTimeout     MailType = 18
	MailType_MT_AgentRevenueReview          MailType = 19
)

var MailType_name = map[int32]string{
	1:  "MT_VipDayReturn",
	2:  "MT_VipWeekReturn",
	3:  "MT_VipBirthdayGift",
	4:  "MT_RechargeSuccess",
	5:  "MT_RechargeTimeoutCompensate",
	6:  "MT_WithdrawalSuccess",
	7:  "MT_WithdrawalTimeoutCompensate",
	8:  "MT_CardExchange",
	9:  "MT_AgentRevenue",
	10: "MT_AgentBeginnerReward",
	11: "MT_FirstRechargeReturn",
	12: "MT_Cdkey",
	13: "MT_Admin",
	14: "MT_Important",
	15: "MT_Compensate",
	16: "MT_ReviewRefuse",
	17: "MT_WithdrawalFailed",
	18: "MT_WithdrawalReviewTimeout",
	19: "MT_AgentRevenueReview",
}
var MailType_value = map[string]int32{
	"MT_VipDayReturn":                1,
	"MT_VipWeekReturn":               2,
	"MT_VipBirthdayGift":             3,
	"MT_RechargeSuccess":             4,
	"MT_RechargeTimeoutCompensate":   5,
	"MT_WithdrawalSuccess":           6,
	"MT_WithdrawalTimeoutCompensate": 7,
	"MT_CardExchange":                8,
	"MT_AgentRevenue":                9,
	"MT_AgentBeginnerReward":         10,
	"MT_FirstRechargeReturn":         11,
	"MT_Cdkey":                       12,
	"MT_Admin":                       13,
	"MT_Important":                   14,
	"MT_Compensate":                  15,
	"MT_ReviewRefuse":                16,
	"MT_WithdrawalFailed":            17,
	"MT_WithdrawalReviewTimeout":     18,
	"MT_AgentRevenueReview":          19,
}

func (x MailType) Enum() *MailType {
	p := new(MailType)
	*p = x
	return p
}
func (x MailType) String() string {
	return proto.EnumName(MailType_name, int32(x))
}
func (x *MailType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MailType_value, data, "MailType")
	if err != nil {
		return err
	}
	*x = MailType(value)
	return nil
}
func (MailType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{63} }

type ActionType int32

const (
	ActionType_RechargeTip  ActionType = 1
	ActionType_WithDrawlTip ActionType = 2
)

var ActionType_name = map[int32]string{
	1: "RechargeTip",
	2: "WithDrawlTip",
}
var ActionType_value = map[string]int32{
	"RechargeTip":  1,
	"WithDrawlTip": 2,
}

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}
func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}
func (x *ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionType_value, data, "ActionType")
	if err != nil {
		return err
	}
	*x = ActionType(value)
	return nil
}
func (ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{64} }

type CodeVerifyType int32

const (
	CodeVerifyType_CVT_PhoneCode       CodeVerifyType = 1
	CodeVerifyType_CVT_TriggerMailCode CodeVerifyType = 2
	CodeVerifyType_CVT_MailCode        CodeVerifyType = 3
)

var CodeVerifyType_name = map[int32]string{
	1: "CVT_PhoneCode",
	2: "CVT_TriggerMailCode",
	3: "CVT_MailCode",
}
var CodeVerifyType_value = map[string]int32{
	"CVT_PhoneCode":       1,
	"CVT_TriggerMailCode": 2,
	"CVT_MailCode":        3,
}

func (x CodeVerifyType) Enum() *CodeVerifyType {
	p := new(CodeVerifyType)
	*p = x
	return p
}
func (x CodeVerifyType) String() string {
	return proto.EnumName(CodeVerifyType_name, int32(x))
}
func (x *CodeVerifyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CodeVerifyType_value, data, "CodeVerifyType")
	if err != nil {
		return err
	}
	*x = CodeVerifyType(value)
	return nil
}
func (CodeVerifyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{65} }

type CodeComeFrom int32

const (
	CodeComeFrom_CCF_Client CodeComeFrom = 1
	CodeComeFrom_CCF_Web    CodeComeFrom = 2
)

var CodeComeFrom_name = map[int32]string{
	1: "CCF_Client",
	2: "CCF_Web",
}
var CodeComeFrom_value = map[string]int32{
	"CCF_Client": 1,
	"CCF_Web":    2,
}

func (x CodeComeFrom) Enum() *CodeComeFrom {
	p := new(CodeComeFrom)
	*p = x
	return p
}
func (x CodeComeFrom) String() string {
	return proto.EnumName(CodeComeFrom_name, int32(x))
}
func (x *CodeComeFrom) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CodeComeFrom_value, data, "CodeComeFrom")
	if err != nil {
		return err
	}
	*x = CodeComeFrom(value)
	return nil
}
func (CodeComeFrom) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{66} }

// 游戏状态
type GamesStatus int32

const (
	GamesStatus_TGS_Normal   GamesStatus = 0
	GamesStatus_TGS_Maintain GamesStatus = 1
)

var GamesStatus_name = map[int32]string{
	0: "TGS_Normal",
	1: "TGS_Maintain",
}
var GamesStatus_value = map[string]int32{
	"TGS_Normal":   0,
	"TGS_Maintain": 1,
}

func (x GamesStatus) Enum() *GamesStatus {
	p := new(GamesStatus)
	*p = x
	return p
}
func (x GamesStatus) String() string {
	return proto.EnumName(GamesStatus_name, int32(x))
}
func (x *GamesStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GamesStatus_value, data, "GamesStatus")
	if err != nil {
		return err
	}
	*x = GamesStatus(value)
	return nil
}
func (GamesStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor24, []int{67} }

func init() {
	proto.RegisterEnum("VK.Proto.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("VK.Proto.PlayerType", PlayerType_name, PlayerType_value)
	proto.RegisterEnum("VK.Proto.PeerType", PeerType_name, PeerType_value)
	proto.RegisterEnum("VK.Proto.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("VK.Proto.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("VK.Proto.TaskCategory", TaskCategory_name, TaskCategory_value)
	proto.RegisterEnum("VK.Proto.GameSort", GameSort_name, GameSort_value)
	proto.RegisterEnum("VK.Proto.EffectCategory", EffectCategory_name, EffectCategory_value)
	proto.RegisterEnum("VK.Proto.BufCategory", BufCategory_name, BufCategory_value)
	proto.RegisterEnum("VK.Proto.PropType", PropType_name, PropType_value)
	proto.RegisterEnum("VK.Proto.PropConfigID", PropConfigID_name, PropConfigID_value)
	proto.RegisterEnum("VK.Proto.EFlag", EFlag_name, EFlag_value)
	proto.RegisterEnum("VK.Proto.LotPieceID", LotPieceID_name, LotPieceID_value)
	proto.RegisterEnum("VK.Proto.TransferSource", TransferSource_name, TransferSource_value)
	proto.RegisterEnum("VK.Proto.HongBaoError", HongBaoError_name, HongBaoError_value)
	proto.RegisterEnum("VK.Proto.ShowMessageType", ShowMessageType_name, ShowMessageType_value)
	proto.RegisterEnum("VK.Proto.OSType", OSType_name, OSType_value)
	proto.RegisterEnum("VK.Proto.JumpMsgType", JumpMsgType_name, JumpMsgType_value)
	proto.RegisterEnum("VK.Proto.ChatMsgType", ChatMsgType_name, ChatMsgType_value)
	proto.RegisterEnum("VK.Proto.PurchaseType", PurchaseType_name, PurchaseType_value)
	proto.RegisterEnum("VK.Proto.VipRightType", VipRightType_name, VipRightType_value)
	proto.RegisterEnum("VK.Proto.ActivityType", ActivityType_name, ActivityType_value)
	proto.RegisterEnum("VK.Proto.RechargeExtraType", RechargeExtraType_name, RechargeExtraType_value)
	proto.RegisterEnum("VK.Proto.VipStaticType", VipStaticType_name, VipStaticType_value)
	proto.RegisterEnum("VK.Proto.VipValid", VipValid_name, VipValid_value)
	proto.RegisterEnum("VK.Proto.ReliefType", ReliefType_name, ReliefType_value)
	proto.RegisterEnum("VK.Proto.C_ServiceOps", C_ServiceOps_name, C_ServiceOps_value)
	proto.RegisterEnum("VK.Proto.PublisherOps", PublisherOps_name, PublisherOps_value)
	proto.RegisterEnum("VK.Proto.EOrderStatus", EOrderStatus_name, EOrderStatus_value)
	proto.RegisterEnum("VK.Proto.ECashcardExchangeStatus", ECashcardExchangeStatus_name, ECashcardExchangeStatus_value)
	proto.RegisterEnum("VK.Proto.EChannel", EChannel_name, EChannel_value)
	proto.RegisterEnum("VK.Proto.RegisterType", RegisterType_name, RegisterType_value)
	proto.RegisterEnum("VK.Proto.ExchangeProp", ExchangeProp_name, ExchangeProp_value)
	proto.RegisterEnum("VK.Proto.ActivityEnum", ActivityEnum_name, ActivityEnum_value)
	proto.RegisterEnum("VK.Proto.DingTalkRobotEnum", DingTalkRobotEnum_name, DingTalkRobotEnum_value)
	proto.RegisterEnum("VK.Proto.ThirdPartnerType", ThirdPartnerType_name, ThirdPartnerType_value)
	proto.RegisterEnum("VK.Proto.SpayCardType", SpayCardType_name, SpayCardType_value)
	proto.RegisterEnum("VK.Proto.NewsType", NewsType_name, NewsType_value)
	proto.RegisterEnum("VK.Proto.KickType", KickType_name, KickType_value)
	proto.RegisterEnum("VK.Proto.CloseServerType", CloseServerType_name, CloseServerType_value)
	proto.RegisterEnum("VK.Proto.OpenServerType", OpenServerType_name, OpenServerType_value)
	proto.RegisterEnum("VK.Proto.ActivityBroardcastType", ActivityBroardcastType_name, ActivityBroardcastType_value)
	proto.RegisterEnum("VK.Proto.EnKickPlayerType", EnKickPlayerType_name, EnKickPlayerType_value)
	proto.RegisterEnum("VK.Proto.GameSetType", GameSetType_name, GameSetType_value)
	proto.RegisterEnum("VK.Proto.WareCdType", WareCdType_name, WareCdType_value)
	proto.RegisterEnum("VK.Proto.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("VK.Proto.GameStyle", GameStyle_name, GameStyle_value)
	proto.RegisterEnum("VK.Proto.GameTaxType", GameTaxType_name, GameTaxType_value)
	proto.RegisterEnum("VK.Proto.RelationCalcType", RelationCalcType_name, RelationCalcType_value)
	proto.RegisterEnum("VK.Proto.PersionalRecordType", PersionalRecordType_name, PersionalRecordType_value)
	proto.RegisterEnum("VK.Proto.ThirdPartGameWallet", ThirdPartGameWallet_name, ThirdPartGameWallet_value)
	proto.RegisterEnum("VK.Proto.VnSignStatus", VnSignStatus_name, VnSignStatus_value)
	proto.RegisterEnum("VK.Proto.VnSignTaskStatus", VnSignTaskStatus_name, VnSignTaskStatus_value)
	proto.RegisterEnum("VK.Proto.CommonStatus", CommonStatus_name, CommonStatus_value)
	proto.RegisterEnum("VK.Proto.DailySpinTaskStatus", DailySpinTaskStatus_name, DailySpinTaskStatus_value)
	proto.RegisterEnum("VK.Proto.ManyRechargeStatus", ManyRechargeStatus_name, ManyRechargeStatus_value)
	proto.RegisterEnum("VK.Proto.DailySpinTaskType", DailySpinTaskType_name, DailySpinTaskType_value)
	proto.RegisterEnum("VK.Proto.DailySpinTaskId", DailySpinTaskId_name, DailySpinTaskId_value)
	proto.RegisterEnum("VK.Proto.VIPLotteryTaskId", VIPLotteryTaskId_name, VIPLotteryTaskId_value)
	proto.RegisterEnum("VK.Proto.ModelType", ModelType_name, ModelType_value)
	proto.RegisterEnum("VK.Proto.NoviceSignStatus", NoviceSignStatus_name, NoviceSignStatus_value)
	proto.RegisterEnum("VK.Proto.NoviceSignType", NoviceSignType_name, NoviceSignType_value)
	proto.RegisterEnum("VK.Proto.NoviceGuideEvents", NoviceGuideEvents_name, NoviceGuideEvents_value)
	proto.RegisterEnum("VK.Proto.MailType", MailType_name, MailType_value)
	proto.RegisterEnum("VK.Proto.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("VK.Proto.CodeVerifyType", CodeVerifyType_name, CodeVerifyType_value)
	proto.RegisterEnum("VK.Proto.CodeComeFrom", CodeComeFrom_name, CodeComeFrom_value)
	proto.RegisterEnum("VK.Proto.GamesStatus", GamesStatus_name, GamesStatus_value)
}

func init() { proto.RegisterFile("shared_enums.proto", fileDescriptor24) }

var fileDescriptor24 = []byte{
	// 7503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x7c, 0x79, 0x78, 0x1b, 0xc9,
	0x95, 0xdf, 0x80, 0xa4, 0x08, 0xaa, 0x48, 0x11, 0x8f, 0x4d, 0x49, 0x94, 0x34, 0x92, 0x46, 0x33,
	0x3e, 0xe4, 0x81, 0x9d, 0x19, 0x82, 0x87, 0x34, 0xda, 0xcd, 0xec, 0x2e, 0xd0, 0x04, 0x21, 0x8e,
	0x08, 0x12, 0x06, 0x5a, 0xe0, 0xc8, 0x1b, 0xa7, 0x53, 0x04, 0x8a, 0x40, 0x85, 0x8d, 0x6e, 0xb8,
	0xbb, 0x41, 0x12, 0xbb, 0x39, 0x6c, 0x8f, 0x67, 0x7c, 0xaf, 0x8f, 0xb1, 0xbd, 0x39, 0xb4, 0xde,
	0xf5, 0xb5, 0x57, 0x9c, 0x7b, 0xaf, 0xd8, 0xc9, 0x26, 0xf9, 0x33, 0xc7, 0x7e, 0x5f, 0xd6, 0x7b,
	0xaf, 0xf7, 0xf2, 0xda, 0x4e, 0x32, 0xbe, 0xbd, 0xb7, 0xef, 0x7c, 0xaf, 0x8e, 0x46, 0x37, 0x08,
	0x4e, 0xfe, 0x12, 0xfb, 0xf7, 0x5e, 0x55, 0xbd, 0x7a, 0xf5, 0xea, 0xd5, 0x7b, 0xaf, 0x0a, 0x22,
	0x46, 0xd0, 0xa6, 0x3e, 0x6b, 0xda, 0xcc, 0xed, 0x75, 0x82, 0xc7, 0xba, 0xbe, 0x17, 0x7a, 0xc6,
	0x54, 0xfd, 0xce, 0x63, 0x15, 0xfc, 0x2b, 0xfb, 0x2a, 0x32, 0x5e, 0x63, 0x47, 0xc6, 0x34, 0x49,
	0xd7, 0xec, 0x62, 0xa7, 0x1b, 0xf6, 0xe1, 0x01, 0x83, 0x90, 0xc9, 0x9a, 0x5d, 0xa6, 0x0e, 0x83,
	0x94, 0x31, 0x43, 0xa6, 0x6a, 0xf6, 0x3a, 0xeb, 0xe0, 0xd7, 0x58, 0x76, 0x85, 0x90, 0x8a, 0x43,
	0xfb, 0xcc, 0xb7, 0xfa, 0x5d, 0x86, 0x8d, 0x2a, 0x51, 0xa3, 0x19, 0x32, 0xd5, 0xb5, 0xb7, 0x3c,
	0xbf, 0x43, 0x1d, 0x48, 0x49, 0x52, 0xd5, 0xdb, 0xf5, 0x42, 0x18, 0xcb, 0x3e, 0x93, 0x22, 0x53,
	0x15, 0xa6, 0x1a, 0xcd, 0x12, 0x52, 0xb1, 0xec, 0x0d, 0xf7, 0x80, 0x3a, 0xbc, 0x09, 0x0f, 0x18,
	0x67, 0xc8, 0xe9, 0x8a, 0x65, 0x9b, 0x0e, 0x67, 0x6e, 0x08, 0x29, 0x03, 0xc8, 0x4c, 0xc5, 0xb2,
	0x2b, 0xbd, 0x5d, 0x87, 0x07, 0x6d, 0xe6, 0xc3, 0x18, 0x76, 0x8c, 0x0c, 0xb4, 0xd1, 0x66, 0x30,
	0x2e, 0x3a, 0xb6, 0xec, 0x7c, 0x2f, 0x6c, 0xc3, 0x84, 0x6a, 0x5b, 0x72, 0xbc, 0x5d, 0xea, 0xc0,
	0x29, 0xd5, 0xb6, 0x78, 0xd4, 0x68, 0x53, 0xb7, 0xc5, 0x7c, 0x98, 0xc4, 0x99, 0x54, 0x2c, 0x7b,
	0x87, 0xed, 0x42, 0x3a, 0x7b, 0x97, 0x4c, 0x6d, 0x79, 0x4d, 0xa6, 0x25, 0xdf, 0xb2, 0xec, 0x12,
	0xed, 0x30, 0x29, 0xeb, 0x96, 0x65, 0x57, 0x3d, 0xaf, 0x23, 0x47, 0xdb, 0xb2, 0xec, 0xbc, 0xcf,
	0x5c, 0x0a, 0xe3, 0xea, 0xab, 0x4c, 0xc3, 0x06, 0x0e, 0x37, 0x4f, 0x32, 0x5b, 0x96, 0x6d, 0x7a,
	0x9e, 0xdf, 0xe4, 0x2e, 0x0d, 0xb9, 0xe7, 0xc2, 0xa9, 0x6c, 0x9e, 0x4c, 0x61, 0x3f, 0x7a, 0x6e,
	0xa5, 0xf8, 0xdc, 0xa6, 0x49, 0xba, 0x64, 0xd9, 0xb7, 0xa9, 0x83, 0x2a, 0x39, 0x4d, 0x4e, 0x95,
	0x2c, 0xbb, 0x56, 0x86, 0x31, 0x94, 0xbb, 0x64, 0xd9, 0xdb, 0x61, 0x9b, 0xf9, 0x01, 0x8c, 0x67,
	0x1f, 0x25, 0x33, 0x16, 0x0d, 0xf6, 0x4d, 0x1a, 0xb2, 0x96, 0xe7, 0xf7, 0xb1, 0x99, 0x65, 0xda,
	0x15, 0xdf, 0xeb, 0xca, 0x05, 0xb0, 0x4c, 0xdb, 0xf4, 0x3a, 0xbb, 0x1e, 0x8c, 0x65, 0x7d, 0x39,
	0x5a, 0xcd, 0xf3, 0x43, 0x31, 0x5a, 0x2d, 0x36, 0xda, 0x0c, 0x99, 0x2a, 0xd5, 0x6c, 0xb3, 0xcd,
	0x82, 0x40, 0xb6, 0x2b, 0xd5, 0xec, 0x9a, 0xe3, 0x85, 0x81, 0x1a, 0xb1, 0x66, 0xd7, 0xba, 0x9e,
	0x1f, 0x06, 0x52, 0x8b, 0xa5, 0x9a, 0x5d, 0x65, 0xd4, 0x81, 0x09, 0xd5, 0xcf, 0xa6, 0x17, 0x86,
	0xcc, 0xef, 0xc3, 0x29, 0xf5, 0xbd, 0xce, 0x83, 0x36, 0x77, 0x5b, 0x30, 0x99, 0xed, 0x90, 0xd9,
	0xe2, 0xde, 0x1e, 0x6b, 0x84, 0x71, 0x01, 0x8b, 0x91, 0x80, 0x84, 0x4c, 0x16, 0x4d, 0xbb, 0xd0,
	0xdb, 0x83, 0x31, 0x23, 0x43, 0xa6, 0x8b, 0xa6, 0x5d, 0xf6, 0x9a, 0x85, 0xde, 0x9e, 0xb9, 0x06,
	0xe3, 0xa8, 0xb2, 0xa2, 0x69, 0x6f, 0xbb, 0x0e, 0x77, 0x59, 0x95, 0x1d, 0x52, 0xbf, 0x29, 0x07,
	0x2c, 0x9a, 0xb1, 0x01, 0x67, 0xc8, 0x54, 0x51, 0x4f, 0x91, 0x64, 0xf7, 0xc9, 0x34, 0xb6, 0xd6,
	0x63, 0xcd, 0x93, 0x4c, 0x61, 0xa8, 0x87, 0x14, 0xf6, 0x50, 0x10, 0xe3, 0x08, 0x19, 0xc6, 0x8c,
	0x39, 0x72, 0xa6, 0x60, 0xda, 0xb5, 0xb6, 0xd7, 0x55, 0x2c, 0xe3, 0x86, 0x41, 0x66, 0x0b, 0x72,
	0x10, 0x2f, 0x1a, 0x18, 0xc8, 0x4c, 0xc1, 0xb4, 0xeb, 0x5c, 0x73, 0x9d, 0xca, 0x32, 0x32, 0x85,
	0x5d, 0xe8, 0xd5, 0x2b, 0x0a, 0x6b, 0xa1, 0x4e, 0xd8, 0x86, 0x14, 0xea, 0x0c, 0xbf, 0x2d, 0x1e,
	0xa2, 0xed, 0x0b, 0x29, 0x2b, 0x96, 0x18, 0x44, 0x6a, 0x10, 0xbf, 0x36, 0xbd, 0x10, 0x26, 0x34,
	0xa9, 0xc4, 0xf7, 0x42, 0x98, 0x44, 0x61, 0x04, 0x63, 0x48, 0x43, 0x1e, 0x84, 0xbc, 0x01, 0xe9,
	0xec, 0x7f, 0xb9, 0x46, 0x66, 0x70, 0x1c, 0xd3, 0x73, 0xf7, 0x78, 0x6b, 0x63, 0x4d, 0xf6, 0x6d,
	0xda, 0x9b, 0xec, 0x80, 0x39, 0x72, 0x3e, 0xf8, 0x69, 0xb6, 0xbd, 0x5e, 0x99, 0x2a, 0x3d, 0x56,
	0x4c, 0xfb, 0x35, 0x3d, 0xea, 0xd6, 0xda, 0x5c, 0xce, 0x06, 0x81, 0xe2, 0x51, 0x97, 0xf9, 0x9c,
	0xb9, 0x0d, 0x26, 0x67, 0x83, 0x58, 0x7d, 0xa3, 0x52, 0xf1, 0xb8, 0x1b, 0xc2, 0x29, 0xdd, 0xeb,
	0x6d, 0xcf, 0xf5, 0xd0, 0xfa, 0x55, 0x2f, 0xb5, 0x2e, 0xa3, 0xfb, 0xcc, 0x87, 0xb4, 0xee, 0x65,
	0x93, 0xef, 0x33, 0x65, 0x7c, 0x53, 0xc6, 0x59, 0x02, 0x88, 0x15, 0xb8, 0xdb, 0x64, 0x4d, 0x25,
	0xc0, 0x69, 0xcd, 0x69, 0xb1, 0x20, 0xb4, 0x78, 0x63, 0x9f, 0x85, 0x30, 0x6d, 0x9c, 0x23, 0x73,
	0x02, 0xf3, 0x42, 0xea, 0x54, 0x59, 0xa3, 0x4d, 0xfd, 0x16, 0x83, 0x19, 0x2d, 0x86, 0xd9, 0x66,
	0x6e, 0xcb, 0xea, 0x79, 0x70, 0x46, 0xaa, 0xc3, 0xb4, 0xd7, 0x1d, 0xda, 0x82, 0xd9, 0x68, 0x6e,
	0x75, 0xea, 0xf4, 0x18, 0x64, 0xb4, 0x90, 0x35, 0x76, 0xc0, 0x5c, 0x00, 0xe3, 0x3c, 0x31, 0xd4,
	0x2c, 0x50, 0x7d, 0x15, 0xda, 0xd8, 0xa7, 0x2d, 0x06, 0x73, 0xc6, 0x02, 0x99, 0x47, 0x7c, 0x8b,
	0x1d, 0xde, 0x63, 0xd4, 0x5f, 0xa7, 0x3e, 0x3b, 0x64, 0x8e, 0x03, 0x86, 0x16, 0x2d, 0xdf, 0x62,
	0x6e, 0x28, 0xf5, 0x37, 0x6f, 0x5c, 0x20, 0x67, 0x05, 0xd6, 0x08, 0xf9, 0x01, 0x0f, 0xfb, 0x66,
	0xcf, 0xf7, 0x99, 0xdb, 0xe8, 0xc3, 0x59, 0xe3, 0x1a, 0xb9, 0x3c, 0x8a, 0x62, 0xd7, 0xb9, 0x1f,
	0xf6, 0xa8, 0x03, 0xe7, 0x84, 0x89, 0x56, 0x4c, 0xb1, 0x78, 0x75, 0xaf, 0xd7, 0x40, 0xa7, 0x73,
	0x5e, 0x4f, 0x0a, 0x9d, 0x82, 0x89, 0x96, 0xb2, 0x10, 0x89, 0xdd, 0xf0, 0x7c, 0x06, 0x17, 0x74,
	0xab, 0x5a, 0xc3, 0x47, 0xe7, 0x20, 0x78, 0x2e, 0xea, 0x56, 0x15, 0xa7, 0xd7, 0x61, 0x3e, 0xa7,
	0x70, 0x49, 0x0b, 0x5b, 0xe6, 0x2e, 0x57, 0xba, 0x7d, 0x50, 0xeb, 0xb1, 0xec, 0x35, 0xed, 0x2d,
	0xda, 0x61, 0xb6, 0x68, 0x7c, 0xd9, 0xb8, 0x44, 0xce, 0x8b, 0xc6, 0xb8, 0x96, 0x08, 0xd9, 0xeb,
	0x3e, 0x6d, 0x75, 0xd0, 0x2b, 0x5e, 0xd1, 0x1d, 0x6f, 0xf2, 0x03, 0xe6, 0xe2, 0xf6, 0xbe, 0x2a,
	0x8d, 0xcc, 0xb4, 0x2d, 0xbf, 0xaf, 0xfa, 0x7d, 0x48, 0x6b, 0x32, 0x82, 0x5e, 0xdd, 0xf3, 0x42,
	0x0a, 0xd7, 0xa2, 0x75, 0xf3, 0x39, 0x75, 0xa2, 0x55, 0x7a, 0xd8, 0xb8, 0x48, 0xce, 0xc9, 0x85,
	0x6f, 0xd9, 0x72, 0x3b, 0xd8, 0x6a, 0xa5, 0x1f, 0x91, 0xc6, 0x6d, 0xda, 0x16, 0x3d, 0x82, 0x97,
	0x18, 0x57, 0xc8, 0x45, 0xf1, 0xd1, 0x66, 0x9e, 0xcf, 0x42, 0xde, 0xa0, 0x8e, 0x34, 0x81, 0x4d,
	0x2f, 0x60, 0xf0, 0xd2, 0xc8, 0xc8, 0xe8, 0x1e, 0x2b, 0x78, 0x47, 0xf0, 0xb2, 0xc1, 0xf4, 0xdc,
	0xb0, 0x1d, 0x99, 0xc9, 0xcb, 0xb5, 0xc0, 0x02, 0x16, 0x4d, 0xaf, 0xeb, 0x25, 0x16, 0xbd, 0xed,
	0xf0, 0xb0, 0xdd, 0xf4, 0xe9, 0x21, 0x75, 0xe0, 0x15, 0x5a, 0x34, 0x41, 0x40, 0x55, 0x68, 0x97,
	0x0e, 0x8f, 0x26, 0xda, 0xd4, 0xfa, 0x41, 0xc8, 0x3a, 0x25, 0x7e, 0xc0, 0x20, 0xab, 0x17, 0xa4,
	0xca, 0x76, 0x69, 0xc8, 0xe4, 0x2a, 0xbd, 0x52, 0xdb, 0x45, 0x9d, 0x37, 0x99, 0x67, 0x9b, 0xb8,
	0x52, 0xd2, 0xe9, 0x2f, 0x6b, 0x71, 0x50, 0xa3, 0x12, 0x5a, 0x89, 0x96, 0x54, 0x38, 0x49, 0x09,
	0xae, 0x6a, 0x3e, 0xb1, 0x20, 0x02, 0xba, 0x61, 0x64, 0xa4, 0x41, 0xa3, 0x83, 0xac, 0xe7, 0xe0,
	0x85, 0x74, 0x02, 0x58, 0x82, 0x2f, 0x24, 0x81, 0x65, 0xf8, 0x62, 0x12, 0x58, 0x81, 0x2f, 0x25,
	0x81, 0x55, 0xf8, 0x72, 0xda, 0x98, 0x97, 0x86, 0x82, 0x56, 0xa8, 0xfa, 0xf9, 0xca, 0x71, 0x70,
	0x19, 0xbe, 0x9a, 0x36, 0x2e, 0xca, 0x39, 0x0d, 0x38, 0x71, 0xb5, 0x3b, 0x14, 0xbe, 0x76, 0x9c,
	0xb4, 0xac, 0x48, 0x5f, 0x4f, 0x1b, 0x20, 0x97, 0xe9, 0x29, 0xda, 0xd8, 0xef, 0x7a, 0x21, 0xfc,
	0x59, 0xc4, 0x8c, 0x8c, 0x76, 0x81, 0x0a, 0x5f, 0x6c, 0x6f, 0xbb, 0x0c, 0xfe, 0x3c, 0x6d, 0x5c,
	0x23, 0x0f, 0x46, 0xa4, 0xaa, 0x87, 0x46, 0xb1, 0x49, 0x7b, 0x2e, 0x6e, 0x0d, 0xc1, 0xf1, 0x17,
	0x2f, 0xca, 0x61, 0x1d, 0x7a, 0xf0, 0x97, 0x69, 0xe3, 0x11, 0x72, 0xe5, 0x44, 0x8e, 0xb6, 0xcf,
	0x18, 0xfc, 0x55, 0xda, 0x78, 0x58, 0x6e, 0xce, 0x51, 0x3c, 0xeb, 0x5e, 0xcf, 0x87, 0xbf, 0x4e,
	0x1b, 0xe7, 0xa4, 0x7b, 0xb2, 0x3c, 0xbf, 0xcb, 0x9a, 0x9e, 0x9d, 0x5b, 0xcc, 0xdd, 0x80, 0xbf,
	0x19, 0x05, 0xdf, 0x84, 0x6f, 0x8c, 0x82, 0x9f, 0x80, 0x6f, 0x8e, 0x82, 0x6f, 0xc1, 0xb7, 0x46,
	0xc0, 0x4b, 0x8b, 0xf0, 0xed, 0x51, 0x70, 0x0e, 0xbe, 0x93, 0x36, 0x16, 0xe4, 0xf6, 0x92, 0x72,
	0x96, 0x7a, 0x2e, 0x12, 0x96, 0xe0, 0xbb, 0xa3, 0x09, 0xcb, 0xf0, 0xbd, 0xd1, 0x84, 0x15, 0x78,
	0xfd, 0xd4, 0x48, 0xc2, 0x2a, 0xbc, 0x61, 0x34, 0xe1, 0x06, 0xbc, 0x71, 0x34, 0xe1, 0x26, 0x3c,
	0x33, 0x9a, 0xf0, 0x04, 0xbc, 0x69, 0x34, 0xe1, 0x16, 0x3c, 0x8b, 0x0e, 0x5f, 0x9a, 0x79, 0xaf,
	0xd3, 0xf1, 0x10, 0x5d, 0x5e, 0x84, 0xe7, 0xa6, 0x8c, 0x4b, 0x72, 0xcb, 0x6d, 0xf5, 0x1a, 0x0e,
	0xa3, 0xbe, 0x5d, 0xf0, 0x3a, 0xbb, 0x48, 0xcb, 0xc1, 0x9b, 0x4f, 0xa4, 0x2d, 0xc1, 0x5b, 0x4e,
	0xa4, 0x2d, 0xc3, 0x5b, 0x4f, 0xa4, 0xad, 0xc0, 0xdb, 0x4e, 0xa4, 0xad, 0xc2, 0xdb, 0x4f, 0xa4,
	0xdd, 0x80, 0x77, 0x9c, 0x48, 0xbb, 0x09, 0xef, 0x3c, 0x91, 0xf6, 0x04, 0xfc, 0xd8, 0x89, 0xb4,
	0x5b, 0xf0, 0xae, 0x93, 0x68, 0x2b, 0x8b, 0xf0, 0xee, 0x13, 0x69, 0x39, 0x78, 0xcf, 0x89, 0xb4,
	0x25, 0x78, 0xef, 0x71, 0x2d, 0xaf, 0x2c, 0xc3, 0xf3, 0x11, 0x2a, 0x5d, 0x07, 0xa2, 0x2b, 0xf0,
	0xbe, 0x24, 0xba, 0x84, 0xe8, 0x2a, 0xbc, 0x3f, 0x89, 0x2e, 0x23, 0x7a, 0x03, 0x3e, 0x90, 0x44,
	0x57, 0x10, 0xbd, 0x09, 0x3f, 0x9e, 0x44, 0x57, 0x11, 0x7d, 0x02, 0xfe, 0xc9, 0x48, 0x13, 0x58,
	0xb9, 0x05, 0xff, 0x74, 0x24, 0x61, 0x75, 0x11, 0xfe, 0xd9, 0x68, 0x42, 0x0e, 0xfe, 0xf9, 0x68,
	0xc2, 0x12, 0xdc, 0x1f, 0x4d, 0x58, 0x86, 0x9f, 0x18, 0x4d, 0x58, 0x81, 0x0f, 0x8e, 0x26, 0xac,
	0xc2, 0x4f, 0x8e, 0x26, 0xdc, 0x80, 0x9f, 0x9a, 0xd2, 0x9e, 0x6a, 0x8d, 0x53, 0xf7, 0x0e, 0xb5,
	0xeb, 0x9c, 0x85, 0x21, 0x73, 0xec, 0x25, 0xf8, 0xc6, 0xdd, 0x13, 0x48, 0xab, 0xf0, 0xcd, 0xbb,
	0x7a, 0x75, 0x86, 0x48, 0xb9, 0x45, 0xf8, 0xd6, 0x49, 0x34, 0xdc, 0xfe, 0x27, 0xd1, 0x56, 0x17,
	0xe1, 0x3b, 0x77, 0x8d, 0xf3, 0xf2, 0x6c, 0x53, 0xb4, 0xb2, 0xb7, 0xcb, 0xed, 0x25, 0xf8, 0xcc,
	0x6b, 0x47, 0xe1, 0xab, 0xf0, 0xa7, 0xaf, 0xd5, 0x53, 0x8a, 0xe3, 0xb9, 0x45, 0xf8, 0xec, 0x48,
	0xc2, 0xd2, 0x22, 0x7c, 0x6e, 0x24, 0x61, 0x75, 0x11, 0x3e, 0x3f, 0x3c, 0x44, 0x9d, 0xbb, 0xd4,
	0x5e, 0x82, 0xff, 0xc6, 0x46, 0xe1, 0xab, 0xf0, 0xdf, 0xd9, 0x50, 0x47, 0x02, 0xcf, 0x2d, 0xc2,
	0xff, 0x18, 0x49, 0x58, 0x5a, 0x84, 0xff, 0x39, 0x92, 0xb0, 0xba, 0x08, 0xbf, 0xc6, 0xb4, 0x43,
	0xcc, 0x1f, 0xd0, 0x50, 0x98, 0xf9, 0x91, 0x9d, 0x83, 0xff, 0xb0, 0x30, 0x02, 0x5e, 0x82, 0x4f,
	0x2c, 0x44, 0xbb, 0x82, 0x1d, 0xee, 0x72, 0x66, 0xd7, 0x78, 0xcb, 0xc5, 0x48, 0xa6, 0xc3, 0xe0,
	0x93, 0x0b, 0xfa, 0x40, 0x5b, 0xeb, 0x75, 0x3a, 0x7d, 0x7b, 0x65, 0x71, 0x31, 0x07, 0x1f, 0x7a,
	0xe8, 0x18, 0xb8, 0x04, 0x1f, 0x3e, 0x0e, 0x2e, 0xc3, 0x47, 0x8e, 0x83, 0x2b, 0xf0, 0xd1, 0xe3,
	0xe0, 0x2a, 0x7c, 0xec, 0x38, 0x78, 0x03, 0x7e, 0xfa, 0x38, 0x78, 0x13, 0x7e, 0xe6, 0x21, 0x63,
	0x4e, 0x86, 0x56, 0x2a, 0x08, 0x71, 0xe1, 0xad, 0xd7, 0x0d, 0x43, 0xc5, 0x56, 0x51, 0x94, 0xf3,
	0xb6, 0xeb, 0x7a, 0x87, 0x15, 0x78, 0x6b, 0x87, 0xbb, 0x16, 0xef, 0xb0, 0x00, 0xde, 0x1e, 0x71,
	0xae, 0xfb, 0x8c, 0x49, 0xec, 0x1d, 0x11, 0xa7, 0xc8, 0xc3, 0x44, 0x0e, 0xd0, 0x80, 0x77, 0x5e,
	0xd7, 0xcb, 0x24, 0x82, 0xb0, 0x68, 0xac, 0xe7, 0xaf, 0x6b, 0xa5, 0x0f, 0x70, 0x31, 0xe0, 0xfb,
	0xae, 0xeb, 0x08, 0xa1, 0x4c, 0x8f, 0x90, 0xf3, 0x5b, 0x8f, 0x69, 0x75, 0x97, 0xe9, 0x51, 0x8d,
	0xbb, 0x2d, 0x87, 0x21, 0xfc, 0xed, 0xc7, 0xf4, 0xa4, 0x44, 0x5b, 0x29, 0xc3, 0x77, 0x1e, 0xd3,
	0x93, 0x8a, 0x44, 0xfd, 0x6e, 0xc4, 0x27, 0x13, 0x29, 0x44, 0xe1, 0x7b, 0x11, 0xb8, 0x49, 0x83,
	0xb0, 0x4c, 0x8f, 0xcc, 0x76, 0x07, 0x5e, 0xff, 0x78, 0xb4, 0xa7, 0x28, 0x77, 0xfa, 0x71, 0xfe,
	0x37, 0x3c, 0xae, 0x67, 0x51, 0xa6, 0x47, 0x31, 0xfc, 0x8d, 0x8f, 0x27, 0x35, 0x7b, 0x73, 0x31,
	0x97, 0x83, 0xcf, 0xde, 0x38, 0x06, 0x2e, 0xc1, 0xe7, 0x6e, 0xe8, 0x59, 0x54, 0xbc, 0xfd, 0x26,
	0x73, 0x5b, 0xf6, 0x13, 0x68, 0x03, 0xff, 0xf5, 0x07, 0xb4, 0x22, 0x6b, 0xbd, 0x6e, 0x97, 0xf9,
	0xf5, 0x8d, 0x0a, 0xfc, 0xec, 0xba, 0x96, 0x63, 0xb3, 0xdd, 0xdc, 0xb5, 0xef, 0xba, 0x8e, 0xd7,
	0xd8, 0xb7, 0x6f, 0x21, 0xfb, 0xcf, 0xad, 0x6b, 0xe5, 0xac, 0x2e, 0x8a, 0xd8, 0xf9, 0x3d, 0x5b,
	0x3a, 0xbc, 0xc9, 0x29, 0xe4, 0xbd, 0x11, 0xb2, 0xbc, 0x28, 0x91, 0xe7, 0x23, 0x64, 0x55, 0x21,
	0xef, 0xdb, 0xd2, 0x6a, 0xca, 0x2d, 0x2a, 0xe8, 0xfd, 0x5b, 0xba, 0xe7, 0x5b, 0x12, 0xf8, 0x00,
	0xf2, 0x88, 0x56, 0xdb, 0xdd, 0xae, 0x97, 0x5f, 0x0e, 0xe0, 0x43, 0xf7, 0x53, 0x1a, 0xaa, 0xf3,
	0x03, 0xef, 0x5e, 0xee, 0x26, 0x7c, 0xf8, 0x7e, 0xca, 0x30, 0x64, 0x4f, 0x35, 0x87, 0x77, 0x4b,
	0x9e, 0xd3, 0x84, 0x8f, 0x0c, 0x30, 0x5e, 0x69, 0x7b, 0x2e, 0x7b, 0xba, 0x0a, 0x1f, 0xbd, 0x9f,
	0x32, 0xce, 0x4a, 0x9d, 0xd4, 0x68, 0x27, 0xe8, 0xb9, 0xad, 0xfc, 0x13, 0x8b, 0xf0, 0xb1, 0xfb,
	0x29, 0xe3, 0x41, 0xb9, 0x65, 0xb0, 0xa5, 0xbd, 0xc5, 0x1a, 0xfb, 0x0e, 0x6d, 0x30, 0x11, 0x69,
	0xfd, 0xf4, 0xfd, 0x94, 0x71, 0x59, 0xe6, 0x05, 0x49, 0xe2, 0x6d, 0xea, 0xec, 0xc1, 0xcf, 0x1c,
	0xef, 0x70, 0x79, 0x11, 0x7e, 0xf6, 0x7e, 0xca, 0x00, 0x39, 0x0b, 0x94, 0xb0, 0x96, 0x83, 0x9f,
	0xbb, 0x9f, 0x32, 0xce, 0x4b, 0xbd, 0xe3, 0x34, 0xec, 0xfc, 0x2d, 0x7b, 0x09, 0x63, 0x9d, 0x9f,
	0x1f, 0xc6, 0x57, 0x25, 0xfe, 0x2f, 0xee, 0xa7, 0x8c, 0x05, 0xb9, 0xd2, 0x1b, 0x42, 0xf8, 0x5c,
	0xce, 0xbe, 0xb1, 0x52, 0x2a, 0xc0, 0xc7, 0x07, 0xb2, 0x46, 0x84, 0x8a, 0xef, 0x49, 0xe2, 0xbf,
	0xbc, 0x9f, 0x32, 0x2e, 0xc9, 0x25, 0x53, 0xd2, 0xd8, 0xb5, 0xdc, 0x22, 0x26, 0x43, 0x01, 0xfc,
	0xab, 0xd8, 0x3c, 0xa8, 0x43, 0x8f, 0xfa, 0xf6, 0x96, 0x17, 0x32, 0x4d, 0xfd, 0xd7, 0xf7, 0x53,
	0xc6, 0xbc, 0x34, 0x80, 0xdb, 0x3d, 0x7e, 0xc8, 0xb8, 0x7d, 0xef, 0x26, 0xfc, 0x9b, 0x81, 0x06,
	0x71, 0x1a, 0xf6, 0xbd, 0x5c, 0x0e, 0xfe, 0xed, 0x40, 0x60, 0x3d, 0x44, 0x3e, 0xb7, 0x18, 0xc0,
	0xbf, 0x1b, 0x08, 0x2c, 0x27, 0xb2, 0x9c, 0x93, 0x33, 0xf9, 0xf7, 0x83, 0x4e, 0x36, 0x2a, 0xb4,
	0x89, 0x31, 0x10, 0xfc, 0xc2, 0xf0, 0xec, 0x6a, 0x45, 0xc9, 0xfc, 0x8b, 0xc3, 0xbd, 0xdc, 0x5a,
	0x92, 0x84, 0x5f, 0xba, 0x9f, 0x32, 0xae, 0x90, 0x05, 0xb1, 0xff, 0xa9, 0xbb, 0x1f, 0x55, 0x98,
	0xec, 0x75, 0xdf, 0xfb, 0x11, 0x06, 0xbf, 0x7c, 0x3f, 0x65, 0xbc, 0x94, 0x5c, 0x15, 0x1d, 0xba,
	0x4d, 0xd6, 0x65, 0x6e, 0x13, 0x33, 0xf4, 0x35, 0xda, 0x8f, 0x67, 0xb4, 0xbf, 0x32, 0x50, 0x0f,
	0xe6, 0x11, 0xf6, 0x26, 0xda, 0xb3, 0xca, 0xdd, 0x3e, 0xf1, 0xec, 0xa4, 0x71, 0x95, 0x5c, 0x10,
	0xfb, 0x78, 0xb3, 0xbc, 0x65, 0xdf, 0xe1, 0x8d, 0xfd, 0x5d, 0x3a, 0xa0, 0x7f, 0xf2, 0xd9, 0xc9,
	0xec, 0x07, 0x53, 0xe4, 0x54, 0x11, 0x53, 0x6a, 0x91, 0x5e, 0xaf, 0x47, 0x75, 0x37, 0xcc, 0x4b,
	0xd7, 0x55, 0xfa, 0x2e, 0xeb, 0x67, 0xc5, 0x75, 0xdb, 0x62, 0x8e, 0x42, 0x44, 0x6d, 0xa4, 0xb8,
	0x6e, 0x6f, 0x72, 0x97, 0x29, 0x68, 0x42, 0x41, 0xdb, 0x95, 0xca, 0xb6, 0x82, 0xa6, 0x44, 0xd6,
	0xb6, 0x6e, 0xaf, 0x73, 0x9f, 0xed, 0xd2, 0x40, 0x73, 0x82, 0xc8, 0x89, 0xd6, 0xed, 0x92, 0xe7,
	0xb5, 0x1c, 0x0d, 0x5e, 0x13, 0x25, 0x83, 0x75, 0x3b, 0xdf, 0x68, 0x78, 0x3d, 0x37, 0x54, 0xe8,
	0x0f, 0x65, 0x7f, 0x94, 0x90, 0x4d, 0x2f, 0xac, 0x70, 0xd6, 0x60, 0xa2, 0xc0, 0x91, 0xde, 0xac,
	0xd8, 0x05, 0x4c, 0xf9, 0x3f, 0xfa, 0xec, 0x93, 0xb8, 0x08, 0xea, 0x53, 0x30, 0xc0, 0xc7, 0x9e,
	0x7d, 0xd2, 0xc8, 0x90, 0xd3, 0x9b, 0x15, 0x7b, 0xdb, 0x17, 0x99, 0xdd, 0x5b, 0x9e, 0x7b, 0x12,
	0x6d, 0x39, 0x02, 0x24, 0xdb, 0x5b, 0x9f, 0x7b, 0xd2, 0x98, 0x25, 0x53, 0x9b, 0x15, 0xbb, 0xe4,
	0x33, 0xe6, 0xc2, 0x97, 0x9e, 0x7b, 0x12, 0x2d, 0x45, 0x7f, 0x4b, 0xa6, 0x2f, 0x3f, 0xf7, 0x64,
	0xf6, 0xe3, 0x59, 0x32, 0x6b, 0xf9, 0xd4, 0x0d, 0xf6, 0x98, 0x5f, 0xf3, 0x7a, 0x7e, 0x83, 0x89,
	0xc2, 0xd9, 0xa0, 0xa6, 0x39, 0x4d, 0xd2, 0x56, 0xcd, 0x2e, 0x53, 0xae, 0xaa, 0x93, 0x56, 0xcd,
	0xb6, 0x68, 0xb0, 0x0f, 0x63, 0xea, 0x03, 0xcf, 0x29, 0x18, 0x37, 0x08, 0x99, 0xb4, 0x6a, 0xf6,
	0xdd, 0x80, 0xc9, 0xea, 0x22, 0x76, 0x20, 0x4a, 0x5f, 0xb2, 0x2c, 0x66, 0xd5, 0x64, 0xc5, 0xe6,
	0x6e, 0x17, 0x26, 0x51, 0xd3, 0x48, 0x3e, 0x6a, 0x38, 0xbd, 0x00, 0x53, 0xd0, 0xb4, 0xea, 0x49,
	0x64, 0x89, 0x53, 0x6a, 0xf8, 0x7c, 0xb3, 0xc3, 0x5d, 0x38, 0xad, 0x48, 0x66, 0x9b, 0x86, 0x40,
	0x50, 0xa9, 0x56, 0x2d, 0x59, 0xd2, 0x9a, 0x56, 0xdd, 0x6d, 0x7a, 0xa1, 0x42, 0x66, 0x70, 0x95,
	0x50, 0xb0, 0x41, 0x51, 0xeb, 0x8c, 0x1e, 0x81, 0xef, 0x85, 0x30, 0xab, 0x3e, 0x36, 0xf9, 0x3e,
	0x83, 0x8c, 0x92, 0xce, 0xf4, 0xdc, 0xa0, 0xd7, 0x61, 0x00, 0xea, 0x7b, 0xdd, 0xe7, 0xcc, 0x6d,
	0x06, 0x30, 0xa7, 0x67, 0xd9, 0xf6, 0xba, 0x60, 0xe0, 0x62, 0x2b, 0x41, 0x63, 0x47, 0xd7, 0xbc,
	0x12, 0xd9, 0x5c, 0xbb, 0xc3, 0xfa, 0x70, 0x56, 0xf5, 0x50, 0xa1, 0xfd, 0x32, 0x73, 0x43, 0x38,
	0x87, 0x89, 0xbe, 0xec, 0x31, 0x08, 0x2b, 0xb4, 0x0f, 0xe7, 0x55, 0x97, 0xb8, 0xfe, 0xb0, 0xa0,
	0xa8, 0x65, 0xaf, 0x29, 0x4b, 0x32, 0x17, 0x14, 0x20, 0xaa, 0x3c, 0x6b, 0xb4, 0x0f, 0x17, 0x95,
	0x6a, 0x4b, 0x21, 0x87, 0x4b, 0x8a, 0x18, 0x55, 0xae, 0x1e, 0x54, 0xc0, 0xdd, 0x80, 0xf9, 0x62,
	0x89, 0x2e, 0xeb, 0xc9, 0x8b, 0x0c, 0x5f, 0x40, 0x57, 0x94, 0xda, 0x90, 0xa7, 0xca, 0x5a, 0x3c,
	0x08, 0xfd, 0x3e, 0x5c, 0x55, 0x32, 0x5b, 0x3e, 0x6d, 0x32, 0x78, 0x68, 0x20, 0xb3, 0xe9, 0xf3,
	0x10, 0xae, 0x0d, 0xbe, 0x85, 0xca, 0x1e, 0xd6, 0x6b, 0xa8, 0x2a, 0x8f, 0x8f, 0x18, 0x57, 0xc8,
	0x45, 0x29, 0x47, 0x6c, 0xa7, 0xda, 0x79, 0xb7, 0xe9, 0x7b, 0xbc, 0x09, 0x2f, 0x31, 0x0c, 0x32,
	0x2b, 0xd8, 0x5b, 0xdc, 0x55, 0x4b, 0xf0, 0x52, 0x35, 0x0d, 0x8b, 0x1e, 0xc1, 0xcb, 0xf4, 0x1a,
	0xb7, 0x50, 0x41, 0x2f, 0x57, 0xfa, 0x58, 0xef, 0xb9, 0x4d, 0xb8, 0xae, 0x96, 0x13, 0x3f, 0xc4,
	0x39, 0x0a, 0xaf, 0x50, 0x63, 0xab, 0x7a, 0x16, 0x3c, 0xaa, 0xf5, 0xc9, 0x82, 0x90, 0x1d, 0x50,
	0x07, 0xb2, 0xc6, 0x45, 0x72, 0x6e, 0xc8, 0x2c, 0x64, 0x0c, 0x05, 0xaf, 0x54, 0xda, 0x88, 0x15,
	0x07, 0x5e, 0x35, 0x0c, 0x2d, 0xc3, 0xdf, 0x52, 0x63, 0x8a, 0xf1, 0xc4, 0x7c, 0x1f, 0x53, 0x0b,
	0xad, 0xc7, 0x90, 0x33, 0x81, 0xc7, 0x8d, 0x0b, 0xe4, 0x6c, 0x1c, 0x8e, 0xaa, 0x34, 0x8b, 0x4a,
	0x21, 0xc7, 0x28, 0x76, 0x89, 0x72, 0x17, 0x72, 0x4a, 0x21, 0x62, 0xc2, 0x4a, 0xe7, 0x4b, 0x6a,
	0x54, 0xf1, 0x25, 0xd4, 0xb2, 0x6c, 0x9c, 0x27, 0x46, 0x92, 0x4b, 0xe0, 0x2b, 0xaa, 0x75, 0xad,
	0xeb, 0xd0, 0xa0, 0x6d, 0x9b, 0x5e, 0x10, 0xc2, 0x2a, 0xfa, 0x92, 0x01, 0xa6, 0x94, 0x7c, 0x43,
	0x09, 0x28, 0x3f, 0x2b, 0x9e, 0xe7, 0xe0, 0xce, 0x41, 0x2f, 0x71, 0x53, 0x19, 0x41, 0xc5, 0xf7,
	0xba, 0x51, 0x51, 0xe8, 0x09, 0xa5, 0x5a, 0x5d, 0xdb, 0xb8, 0xa5, 0xbe, 0x77, 0x18, 0xdb, 0xc7,
	0x20, 0xe9, 0xfb, 0x94, 0xae, 0x4c, 0xaf, 0xd3, 0x65, 0x6e, 0x40, 0x43, 0x06, 0xdf, 0xaf, 0xa4,
	0xce, 0x3b, 0x8e, 0x77, 0x48, 0xdd, 0x06, 0x83, 0xbf, 0xad, 0x24, 0x91, 0xd7, 0x1b, 0x55, 0xd6,
	0xf2, 0x59, 0x10, 0xc0, 0x93, 0x5a, 0x83, 0xb4, 0xc1, 0x76, 0x3d, 0x6f, 0x5f, 0x09, 0xf8, 0x03,
	0x6a, 0xad, 0x74, 0x35, 0x0d, 0xc3, 0x16, 0xa7, 0x2f, 0x6a, 0x75, 0x3f, 0xa8, 0xdc, 0x86, 0x84,
	0xe0, 0x87, 0xd4, 0x54, 0xf4, 0x3e, 0xc8, 0x45, 0xd6, 0x95, 0x1f, 0xa2, 0x2c, 0x45, 0x94, 0xc2,
	0x10, 0x65, 0x39, 0xa2, 0x98, 0x43, 0x94, 0x95, 0x88, 0xb2, 0x36, 0x44, 0x59, 0x8d, 0x28, 0x45,
	0xad, 0x62, 0x45, 0x09, 0x84, 0xa7, 0x5b, 0x57, 0x3a, 0x29, 0x07, 0x18, 0x9f, 0x0b, 0xa8, 0xa4,
	0x18, 0x25, 0x84, 0xe1, 0x3c, 0xee, 0xdb, 0xdb, 0x4a, 0x03, 0x03, 0x14, 0xd5, 0x0a, 0x1b, 0xc6,
	0x25, 0x72, 0x3e, 0x01, 0x63, 0x44, 0x22, 0x8a, 0x7b, 0xf0, 0x94, 0x32, 0x80, 0x01, 0x4d, 0xe2,
	0x77, 0xd4, 0xe2, 0x49, 0xbc, 0xca, 0xf0, 0x1f, 0xd8, 0x54, 0x56, 0x51, 0xf2, 0xa9, 0xab, 0x5d,
	0x5f, 0x59, 0xaf, 0x45, 0xbb, 0x1f, 0xf0, 0x06, 0x75, 0x4a, 0x9e, 0xd7, 0x0c, 0x60, 0x2b, 0x6e,
	0xdf, 0xb5, 0x2e, 0x77, 0x61, 0x5b, 0xf1, 0x99, 0x6d, 0xde, 0xad, 0xb2, 0xae, 0xc3, 0x5c, 0x1e,
	0xb4, 0xa1, 0x32, 0x34, 0xe1, 0x9c, 0xbd, 0xb1, 0x5d, 0x83, 0x57, 0x0f, 0xa1, 0x4b, 0x02, 0xad,
	0x0e, 0xa1, 0xcb, 0x02, 0xad, 0x0d, 0xa1, 0x2b, 0x02, 0xb5, 0x86, 0xd0, 0x55, 0x81, 0xde, 0x55,
	0xa6, 0x30, 0xe4, 0x43, 0x90, 0x54, 0x57, 0x0d, 0xe4, 0x8e, 0xde, 0x61, 0xce, 0x1e, 0xf5, 0x19,
	0xec, 0xa8, 0x06, 0x1b, 0xee, 0x9e, 0xd7, 0x11, 0x97, 0x48, 0x68, 0x97, 0x0e, 0x0b, 0x19, 0x3c,
	0xad, 0x1a, 0xec, 0xd0, 0x90, 0xf9, 0x9b, 0xb4, 0xd3, 0xdd, 0xc1, 0xf9, 0xdc, 0x53, 0x4b, 0x6b,
	0xf9, 0x8c, 0x06, 0x3d, 0x9f, 0xd9, 0x95, 0x9e, 0xdf, 0x68, 0xd3, 0x80, 0xc1, 0x6b, 0x8c, 0x05,
	0x32, 0x1f, 0xa7, 0xec, 0x70, 0xd7, 0xe5, 0x6e, 0x0b, 0x7e, 0x58, 0xad, 0x40, 0x44, 0xa8, 0xb2,
	0x0e, 0x6e, 0xe0, 0xbf, 0xa3, 0x06, 0x28, 0x3a, 0xac, 0xdb, 0xa6, 0x6e, 0x58, 0xe1, 0xad, 0x56,
	0x1f, 0x5e, 0xab, 0xd0, 0x4d, 0xde, 0xe1, 0x21, 0x9e, 0x05, 0xc2, 0x79, 0xfc, 0x5d, 0xb5, 0xf0,
	0xba, 0x04, 0xae, 0xd6, 0xc6, 0xd6, 0x3b, 0xd0, 0xdb, 0x5f, 0xc3, 0x00, 0x5e, 0xf0, 0xfe, 0x3d,
	0xe5, 0x37, 0x44, 0xa8, 0x2f, 0x1a, 0xf8, 0x8c, 0x86, 0x9e, 0xaf, 0xda, 0x50, 0x25, 0x8e, 0x38,
	0x70, 0x2c, 0x7a, 0xa4, 0xc5, 0xd9, 0xd5, 0x87, 0x5e, 0xaf, 0xb1, 0x2f, 0x57, 0xb4, 0xa1, 0x94,
	0x23, 0x73, 0x06, 0x71, 0xef, 0x26, 0x8c, 0xf3, 0x6e, 0x17, 0x9a, 0x49, 0xf7, 0x51, 0xa5, 0xee,
	0x3e, 0x30, 0xd5, 0xb1, 0xc2, 0xf4, 0x74, 0x61, 0x6f, 0x08, 0x3f, 0xe4, 0x41, 0x58, 0x6c, 0xb5,
	0xa0, 0x95, 0xec, 0x43, 0x98, 0x7d, 0x5b, 0x1f, 0x5d, 0xdc, 0xe5, 0xe2, 0xa6, 0x8e, 0x2b, 0xa0,
	0xc4, 0x0f, 0x58, 0x81, 0x36, 0xf6, 0xe1, 0xef, 0x2b, 0xfd, 0x08, 0xa7, 0x10, 0xda, 0x96, 0x67,
	0x17, 0x58, 0x08, 0xfb, 0x6a, 0x8c, 0x35, 0x4e, 0x3b, 0x9e, 0xdb, 0x8c, 0x8e, 0x5e, 0x47, 0xe9,
	0x6d, 0xdb, 0x6f, 0x32, 0x7f, 0xd0, 0x49, 0x47, 0xfb, 0x49, 0x76, 0x44, 0x03, 0xbb, 0xe6, 0xb6,
	0xc0, 0x35, 0x2e, 0x93, 0x0b, 0x31, 0x4d, 0x0a, 0xbb, 0x8e, 0xa6, 0xe0, 0xa9, 0x0d, 0x26, 0x35,
	0x91, 0xa4, 0x75, 0xf5, 0xfe, 0xf0, 0xbd, 0x6e, 0x14, 0x8c, 0xc2, 0xeb, 0xd4, 0x08, 0x02, 0xad,
	0x51, 0x87, 0x81, 0x6f, 0x5c, 0x25, 0x97, 0x70, 0x7f, 0xa0, 0x1e, 0x45, 0x91, 0x35, 0xd9, 0x4f,
	0xa0, 0x96, 0x4d, 0x4b, 0x50, 0xe8, 0xed, 0xed, 0x61, 0x4c, 0xdb, 0x91, 0x69, 0x59, 0xa8, 0x4f,
	0x03, 0xaf, 0xe7, 0x8f, 0x68, 0xdd, 0x1b, 0xb1, 0x56, 0x6a, 0xc1, 0x0f, 0x94, 0xc9, 0xe6, 0xb9,
	0x5f, 0x71, 0xa8, 0xcb, 0x06, 0x2b, 0x73, 0xa8, 0xfc, 0x4e, 0xc1, 0xf7, 0xf6, 0x99, 0x2b, 0x8c,
	0xe7, 0x48, 0xdb, 0xb7, 0xd0, 0xcc, 0x53, 0x15, 0xdb, 0xa2, 0xbb, 0x0e, 0x5b, 0x67, 0x0c, 0xfa,
	0x6a, 0x9e, 0x11, 0x45, 0x9c, 0x42, 0x3f, 0xa2, 0x8f, 0xe5, 0x41, 0x5e, 0x08, 0x3f, 0xaa, 0x35,
	0xa2, 0xd2, 0x4a, 0x79, 0x63, 0xfb, 0x0f, 0xd4, 0xfe, 0xa8, 0xf3, 0xae, 0x5d, 0xf2, 0x6a, 0xa1,
	0x4f, 0x79, 0xab, 0x1d, 0x5a, 0x1e, 0xfc, 0x43, 0xc5, 0x2e, 0x53, 0x5c, 0x1d, 0x0e, 0xfc, 0x23,
	0xa5, 0x72, 0x29, 0x72, 0x72, 0xb2, 0xff, 0xd8, 0x78, 0x39, 0x79, 0xd8, 0xaa, 0x89, 0xbb, 0x5c,
	0xcc, 0x5d, 0x8a, 0xae, 0xd7, 0x6b, 0xb5, 0xd1, 0x16, 0x6a, 0xbd, 0xdd, 0x81, 0xed, 0xbc, 0x3e,
	0x65, 0x5c, 0x10, 0x43, 0x16, 0x9e, 0xda, 0x4c, 0xaa, 0xe4, 0x0d, 0x29, 0xe3, 0x61, 0x72, 0x39,
	0x41, 0x89, 0xed, 0x4e, 0xc1, 0xf2, 0x46, 0x4c, 0x3f, 0xd0, 0xa4, 0x0a, 0xf7, 0x92, 0x6d, 0x9f,
	0x49, 0x19, 0xd7, 0xc8, 0x83, 0x71, 0xc2, 0x70, 0xd3, 0x37, 0x61, 0x5e, 0x76, 0x7e, 0xe8, 0xd0,
	0xad, 0xa2, 0xa3, 0xea, 0x31, 0x78, 0x16, 0x93, 0xa6, 0xb9, 0x84, 0xd2, 0xed, 0xa5, 0x1b, 0xb7,
	0xe0, 0xb9, 0x11, 0xf8, 0xad, 0x5b, 0xb7, 0xe0, 0xcd, 0x91, 0x1c, 0x09, 0xfe, 0x5b, 0xf0, 0x96,
	0xe4, 0x28, 0x5b, 0xec, 0x90, 0xf9, 0xd1, 0x28, 0xef, 0x4a, 0x12, 0x6b, 0x6d, 0xea, 0x0f, 0x44,
	0x78, 0x77, 0xca, 0xb8, 0x2a, 0x6c, 0x49, 0x12, 0x55, 0x36, 0x5f, 0xe7, 0xec, 0x50, 0xec, 0x10,
	0x78, 0xbf, 0x1e, 0x52, 0xd2, 0x31, 0xa6, 0x94, 0xb1, 0xfa, 0x07, 0x52, 0xc6, 0xac, 0x38, 0x4f,
	0xe5, 0xbd, 0x0e, 0xfc, 0x78, 0xca, 0xb8, 0x28, 0x0f, 0xba, 0x2e, 0xed, 0x9b, 0x34, 0x68, 0xab,
	0x8b, 0x19, 0xee, 0xc2, 0xff, 0xca, 0x18, 0x57, 0xc4, 0x86, 0x4a, 0x90, 0xa2, 0xed, 0xf1, 0xeb,
	0x19, 0xe3, 0x21, 0xb1, 0x1b, 0x12, 0xf7, 0x60, 0xb1, 0x93, 0xfb, 0x53, 0x19, 0xa5, 0x8e, 0xdb,
	0xbc, 0xd9, 0x64, 0x2e, 0x2e, 0x6c, 0xc0, 0x9b, 0x7d, 0xf8, 0x8d, 0x8c, 0x1a, 0xf2, 0xf8, 0x4d,
	0xd9, 0x6f, 0x66, 0x0c, 0x90, 0xbe, 0x42, 0x79, 0x36, 0xf8, 0xad, 0x4c, 0x4c, 0xbe, 0x44, 0xb2,
	0x08, 0xbf, 0x9d, 0x51, 0xb6, 0x11, 0x91, 0x76, 0xd8, 0xae, 0xf0, 0x0d, 0xbf, 0x73, 0xac, 0x91,
	0x70, 0x1e, 0x18, 0x65, 0xff, 0xae, 0x1e, 0xa1, 0x46, 0xf7, 0x18, 0x9e, 0xa5, 0xf0, 0x7b, 0x19,
	0xe3, 0x25, 0xe4, 0x2a, 0xce, 0xa3, 0xcd, 0xfd, 0x66, 0x85, 0xfa, 0x4d, 0x31, 0x78, 0x94, 0x93,
	0x8a, 0x1b, 0xf1, 0xdf, 0xcf, 0x18, 0x97, 0xc9, 0x02, 0x9a, 0xfe, 0x56, 0x32, 0x63, 0x15, 0xd4,
	0x4f, 0x67, 0x8c, 0x4b, 0x62, 0xeb, 0x6e, 0x79, 0x07, 0xbc, 0xc1, 0x12, 0x97, 0x98, 0x7f, 0x90,
	0x51, 0x76, 0xaa, 0x68, 0xeb, 0xdc, 0x0f, 0x42, 0xcc, 0x94, 0x06, 0x51, 0xe2, 0x1f, 0x6a, 0x09,
	0x8e, 0xb1, 0xc4, 0x2e, 0xf1, 0xfe, 0x28, 0x63, 0xbc, 0x8c, 0x5c, 0x1b, 0xc5, 0x94, 0xb8, 0xd0,
	0xfb, 0x63, 0x2d, 0xa8, 0x16, 0x05, 0x43, 0x83, 0x6d, 0xf1, 0xbe, 0xc2, 0xef, 0xc3, 0x9f, 0x64,
	0x94, 0x4d, 0xc5, 0xa9, 0xb5, 0x2e, 0x6b, 0x70, 0xea, 0xc0, 0x67, 0xf4, 0x7a, 0x29, 0x62, 0x95,
	0xd5, 0x42, 0xea, 0x87, 0xf0, 0xa7, 0x19, 0xc3, 0x10, 0x3e, 0xa6, 0xbe, 0x51, 0xd1, 0x66, 0xf3,
	0xd9, 0x8c, 0xb2, 0x2f, 0xc4, 0x30, 0x80, 0xd1, 0x1b, 0xe7, 0x73, 0x7a, 0x84, 0x28, 0xd2, 0x8d,
	0xcd, 0xe1, 0xf3, 0x19, 0xe3, 0xac, 0x38, 0xec, 0x64, 0x1a, 0x62, 0x17, 0x3c, 0xb7, 0x17, 0xc0,
	0xff, 0xd6, 0x76, 0x86, 0xb6, 0xda, 0xe8, 0xdb, 0x6b, 0xfc, 0x80, 0x37, 0x99, 0xdb, 0x54, 0xe4,
	0xff, 0xa3, 0x27, 0x3e, 0xe8, 0xc8, 0xc6, 0x43, 0x75, 0xbb, 0x17, 0xc6, 0x23, 0xd0, 0xff, 0x9b,
	0x31, 0xce, 0xc9, 0x70, 0x42, 0xf6, 0xbd, 0xc6, 0x9a, 0xbd, 0x46, 0x08, 0x2f, 0xe8, 0x21, 0x75,
	0x9e, 0x65, 0x17, 0x8f, 0x42, 0xf8, 0x82, 0x66, 0x8e, 0x62, 0x7b, 0x01, 0x7f, 0x51, 0x2f, 0x44,
	0x24, 0xfc, 0x88, 0x81, 0xbe, 0xa4, 0x99, 0x86, 0x6a, 0x13, 0x76, 0x81, 0x06, 0x91, 0xff, 0xf8,
	0x72, 0xc6, 0x78, 0x84, 0x5c, 0x19, 0xc1, 0x54, 0x3c, 0x0a, 0x35, 0xcf, 0x57, 0x12, 0x42, 0xe0,
	0x71, 0x2d, 0x12, 0xe8, 0xaf, 0x6a, 0xe3, 0x8d, 0x24, 0x8e, 0x0c, 0xe5, 0x6b, 0x5a, 0x53, 0x89,
	0x16, 0xf6, 0xb6, 0x2b, 0xf3, 0x90, 0xaf, 0x6b, 0x53, 0x4b, 0x92, 0xe3, 0x37, 0xb8, 0x7f, 0x96,
	0x51, 0x7e, 0x63, 0x98, 0x45, 0x8d, 0xf0, 0xe7, 0xa3, 0x47, 0x40, 0xff, 0x61, 0x31, 0x07, 0xfe,
	0x62, 0x74, 0x73, 0x24, 0x0b, 0x63, 0xff, 0xcb, 0x8c, 0x72, 0xac, 0x49, 0x7a, 0xcc, 0x04, 0xfe,
	0x6a, 0x74, 0x0f, 0xa5, 0x8d, 0x75, 0xcb, 0xdc, 0x5e, 0x2b, 0xc2, 0x5f, 0x6b, 0xc5, 0x25, 0xe9,
	0x62, 0x6f, 0x56, 0x19, 0x75, 0xca, 0xd4, 0x85, 0xbf, 0xd1, 0x36, 0x7e, 0x5c, 0x8a, 0x52, 0x05,
	0xbe, 0xa1, 0xfd, 0xd2, 0xf0, 0x14, 0x6b, 0x2c, 0xdc, 0xc2, 0xdc, 0xfe, 0x9b, 0xa3, 0xd5, 0x74,
	0xb7, 0xdb, 0x42, 0x2f, 0x5f, 0xdf, 0xa8, 0xe4, 0xe0, 0x5b, 0xff, 0x3f, 0x96, 0x25, 0xf8, 0xf6,
	0x68, 0x41, 0xcd, 0x36, 0x77, 0x9a, 0x8a, 0x0f, 0xbe, 0x33, 0x5a, 0x9b, 0x6b, 0xb4, 0x2f, 0x8a,
	0xd2, 0xdf, 0x1d, 0x3d, 0xca, 0x1a, 0xed, 0x47, 0xeb, 0xf1, 0x3d, 0xbd, 0x9d, 0x70, 0x8f, 0x45,
	0x56, 0xb9, 0xe1, 0x1e, 0xf0, 0x90, 0xc1, 0x1b, 0x40, 0x59, 0x0a, 0x3a, 0xac, 0x64, 0xec, 0xf2,
	0x46, 0x50, 0x1e, 0x29, 0xd1, 0x0e, 0x0d, 0x30, 0x07, 0xcf, 0x9c, 0x48, 0x5b, 0x82, 0x37, 0x9d,
	0x48, 0x5b, 0x86, 0x67, 0x4f, 0xa4, 0xad, 0xc0, 0x73, 0x27, 0xd2, 0x56, 0xe1, 0xcd, 0x27, 0xd2,
	0x6e, 0xc0, 0x5b, 0x40, 0x99, 0x43, 0x99, 0xbb, 0x22, 0xa9, 0x19, 0x6c, 0x3d, 0xdc, 0x4e, 0xf0,
	0x56, 0x50, 0x8b, 0x79, 0x9c, 0x5e, 0x3c, 0x0a, 0x7d, 0x0a, 0x6f, 0x03, 0x63, 0x5e, 0xe6, 0x3b,
	0xa2, 0xa4, 0x26, 0xab, 0x27, 0x6f, 0x07, 0x65, 0x20, 0x89, 0x93, 0x4b, 0x1e, 0x85, 0x39, 0x78,
	0xc7, 0x8b, 0x50, 0x97, 0xe0, 0x9d, 0x2f, 0x42, 0x5d, 0x86, 0x1f, 0x7b, 0x11, 0xea, 0x0a, 0xbc,
	0x0b, 0xd4, 0x89, 0x84, 0x5e, 0xb1, 0xc0, 0xfd, 0xb0, 0xdd, 0x54, 0x95, 0x92, 0x77, 0x43, 0xcc,
	0x5f, 0xaa, 0xf8, 0x68, 0xdd, 0x67, 0x0c, 0xde, 0x33, 0x82, 0x20, 0xdc, 0xc0, 0x7b, 0x41, 0x19,
	0x87, 0xec, 0x5c, 0xd8, 0x95, 0x3e, 0x2c, 0x65, 0x31, 0x12, 0x9e, 0x87, 0x44, 0x10, 0x10, 0x67,
	0xa9, 0xf3, 0x6e, 0x0e, 0xde, 0xf7, 0xa2, 0xf4, 0x65, 0x78, 0x3f, 0x28, 0xdf, 0xb8, 0xc5, 0x0e,
	0x07, 0x45, 0x8e, 0x5f, 0xd0, 0x93, 0x88, 0xa3, 0xc2, 0x3d, 0xfe, 0xa2, 0xd6, 0x35, 0x2e, 0x24,
	0x73, 0x9b, 0x82, 0xfd, 0x97, 0xf4, 0x04, 0x62, 0xa0, 0xe0, 0xfe, 0x65, 0x6d, 0x9d, 0x43, 0xbb,
	0x94, 0x85, 0xf0, 0x2b, 0x7a, 0x55, 0xcd, 0x36, 0x75, 0x5d, 0xe6, 0x94, 0x79, 0xcb, 0x17, 0x99,
	0x9b, 0x76, 0x8d, 0xbf, 0xaa, 0xdb, 0x96, 0xa9, 0x1b, 0x6d, 0x06, 0xec, 0x39, 0x07, 0x3f, 0x31,
	0xa7, 0xf6, 0xd4, 0x31, 0x92, 0x18, 0xf5, 0x83, 0x73, 0x27, 0xb4, 0x5c, 0x82, 0x9f, 0x3c, 0xa9,
	0xe5, 0x92, 0x68, 0xf9, 0x53, 0x27, 0xb5, 0x5c, 0x86, 0x0f, 0x9d, 0xd4, 0x72, 0x59, 0xb4, 0xfc,
	0xf0, 0x5c, 0xf6, 0xd3, 0x29, 0x32, 0x73, 0xdb, 0x73, 0x5b, 0x05, 0xea, 0x15, 0x7d, 0xdf, 0xf3,
	0x8d, 0x59, 0x42, 0x6e, 0x17, 0xec, 0x5a, 0xaf, 0xd1, 0x60, 0x41, 0x00, 0x0f, 0x60, 0x94, 0x7e,
	0xbb, 0xa0, 0xdf, 0x16, 0xe6, 0xfd, 0x16, 0xa4, 0x30, 0x64, 0x8e, 0x41, 0x1d, 0xaf, 0xe7, 0x86,
	0x30, 0x86, 0xb1, 0xf8, 0x00, 0x55, 0x45, 0xd4, 0x73, 0x64, 0xee, 0x76, 0xc1, 0x2e, 0xf4, 0x02,
	0xee, 0xb2, 0x20, 0x30, 0x1d, 0x2f, 0x10, 0x55, 0xe7, 0x0c, 0x99, 0xbe, 0x5d, 0xc0, 0xe0, 0xb9,
	0xe0, 0xf5, 0xdc, 0x26, 0x9c, 0xc2, 0xb8, 0x1f, 0x07, 0x65, 0x6e, 0x53, 0xc9, 0xb2, 0x4e, 0xb9,
	0xc3, 0x9a, 0x30, 0x89, 0x99, 0xc5, 0xed, 0x82, 0xbd, 0xf3, 0xb4, 0xaa, 0x31, 0xaf, 0x89, 0xf7,
	0x9c, 0x5e, 0x2f, 0x80, 0xb4, 0xf1, 0x30, 0xb9, 0x72, 0xbb, 0x80, 0x9e, 0x83, 0xb1, 0x26, 0x77,
	0x5b, 0x56, 0x9b, 0xad, 0xfb, 0xec, 0x75, 0x3d, 0x3c, 0x8a, 0x45, 0x02, 0x0b, 0x53, 0xd9, 0xef,
	0x27, 0x99, 0x5a, 0xdb, 0x3b, 0x2c, 0xb3, 0x20, 0xa0, 0x2d, 0xf9, 0x32, 0xf3, 0x0c, 0x39, 0x5d,
	0x2b, 0x5b, 0xf1, 0xc7, 0xaa, 0xf8, 0x69, 0xf1, 0x6e, 0x20, 0xcb, 0xc1, 0xf8, 0x85, 0xd1, 0xd5,
	0x58, 0xb6, 0x4e, 0x26, 0xb7, 0x6b, 0xa2, 0x4d, 0x86, 0x4c, 0x6f, 0xd7, 0xe2, 0xcf, 0x39, 0x15,
	0xa0, 0x2b, 0x2b, 0xa2, 0xa1, 0xe0, 0xd8, 0xae, 0xc9, 0x3a, 0xbb, 0xfa, 0x90, 0x21, 0x26, 0x4c,
	0x18, 0x44, 0xf4, 0x65, 0x57, 0x4c, 0x98, 0xca, 0xfe, 0x30, 0x99, 0x7e, 0xaa, 0xd7, 0xe9, 0x96,
	0x83, 0x96, 0xee, 0xfc, 0xa9, 0xb2, 0x95, 0x7c, 0xbd, 0x89, 0x80, 0x7a, 0x93, 0xaa, 0xbe, 0xb6,
	0xd8, 0x61, 0x00, 0x63, 0x98, 0xd8, 0xe1, 0x57, 0x94, 0xf8, 0x8f, 0xe3, 0x7c, 0x10, 0xc1, 0x83,
	0xb4, 0x01, 0x13, 0xd9, 0x8f, 0xa4, 0xc8, 0xb4, 0xd9, 0xa6, 0x61, 0xac, 0x77, 0x73, 0xb8, 0x77,
	0x04, 0xc4, 0xdd, 0x54, 0x4a, 0x7f, 0x6d, 0xd2, 0x02, 0x95, 0x0f, 0x1b, 0x4d, 0x3d, 0xf2, 0x38,
	0xa6, 0x4c, 0xf8, 0xa5, 0x1f, 0xcc, 0xe9, 0x27, 0xbd, 0x13, 0x98, 0xee, 0x26, 0x08, 0x18, 0x6b,
	0xf8, 0x70, 0x0a, 0x95, 0x80, 0x78, 0xad, 0x1f, 0xc0, 0xa4, 0xf1, 0x20, 0x59, 0x10, 0x03, 0x77,
	0x3a, 0xac, 0xc9, 0x69, 0xc8, 0x1c, 0xcc, 0x0c, 0xfd, 0xd7, 0xf5, 0x18, 0x83, 0x74, 0xb6, 0x49,
	0x66, 0xf4, 0x14, 0xb4, 0x94, 0x15, 0x73, 0xf8, 0x2d, 0xb0, 0x69, 0xd9, 0x65, 0xcf, 0x65, 0x7d,
	0xf9, 0x2a, 0x12, 0x3f, 0xd5, 0x23, 0xa6, 0x31, 0xcd, 0xaf, 0x32, 0x6e, 0xf9, 0xba, 0x14, 0x81,
	0xf8, 0xd3, 0xbd, 0x89, 0xec, 0x01, 0x99, 0xa9, 0xf3, 0x6e, 0x55, 0xa4, 0x7a, 0x6a, 0x94, 0x7a,
	0x35, 0x3e, 0xca, 0x39, 0x32, 0x87, 0x40, 0xa1, 0xd7, 0x17, 0x3e, 0xd9, 0x6c, 0x4b, 0x2b, 0x38,
	0x4f, 0x0c, 0x84, 0x71, 0xd7, 0xc7, 0xf0, 0x31, 0xb4, 0x7b, 0x89, 0x1f, 0xf9, 0x22, 0x46, 0xe3,
	0x1e, 0xda, 0x38, 0x90, 0x19, 0x44, 0xd1, 0x29, 0x76, 0x31, 0xa6, 0x9e, 0xc8, 0xae, 0x91, 0x19,
	0xad, 0x1b, 0x35, 0x2e, 0xc9, 0x5b, 0x51, 0xfd, 0xfc, 0x05, 0xf1, 0x04, 0x2b, 0x6f, 0x0d, 0x0a,
	0xe8, 0x5f, 0x48, 0x1b, 0x73, 0x64, 0x26, 0x6f, 0x0d, 0x2a, 0x73, 0xf0, 0xc5, 0x74, 0xb6, 0x48,
	0xe6, 0xf4, 0x8e, 0x15, 0x52, 0x88, 0xae, 0x0c, 0x32, 0x5b, 0x2d, 0x5a, 0xf2, 0x19, 0x9b, 0x48,
	0xe6, 0xe5, 0x1a, 0x22, 0xb6, 0x89, 0xe9, 0xd3, 0x18, 0xaa, 0x0a, 0xbf, 0xf4, 0x03, 0xdf, 0xec,
	0x32, 0x39, 0x53, 0xe7, 0x5d, 0x79, 0xfd, 0x2c, 0xba, 0x00, 0x32, 0x5d, 0xaf, 0x61, 0x17, 0xdd,
	0x3b, 0x8c, 0x75, 0x31, 0x1b, 0x52, 0x08, 0xe6, 0x5f, 0x65, 0x7a, 0x04, 0x9f, 0xca, 0x64, 0x17,
	0xc8, 0x54, 0x9d, 0x77, 0xeb, 0xa8, 0x26, 0x5c, 0xd5, 0x7a, 0xdd, 0x16, 0x52, 0x5d, 0xcd, 0x5e,
	0x27, 0xa4, 0xca, 0x1c, 0xce, 0xf6, 0xf4, 0x5e, 0xaa, 0x5a, 0x83, 0xa7, 0xde, 0x84, 0x4c, 0x56,
	0x45, 0xc7, 0x30, 0x96, 0x7d, 0x8c, 0xcc, 0x98, 0x76, 0x8d, 0xf9, 0x18, 0x90, 0x6f, 0x77, 0x03,
	0xe3, 0x2a, 0xb9, 0x64, 0x8a, 0x87, 0xc6, 0xaf, 0x13, 0xa5, 0xd6, 0x06, 0x92, 0x98, 0x9f, 0x6f,
	0x36, 0x45, 0x75, 0xf5, 0x4c, 0xf6, 0x49, 0xb4, 0x08, 0xf5, 0xd4, 0x1b, 0xf9, 0xa7, 0x49, 0x7a,
	0xb0, 0x4e, 0x53, 0x64, 0xa2, 0xd2, 0x0b, 0x70, 0xae, 0x69, 0x32, 0x5e, 0xe9, 0xed, 0xca, 0x67,
	0xcc, 0x05, 0xdf, 0xa3, 0xcd, 0x06, 0x0d, 0x42, 0x18, 0xcf, 0xda, 0x64, 0xa6, 0x28, 0x52, 0x25,
	0x9c, 0x68, 0x2f, 0x10, 0x6f, 0x11, 0xb7, 0x6b, 0xc9, 0x07, 0xd8, 0xa2, 0x14, 0xc5, 0x94, 0xd5,
	0xaf, 0x73, 0x17, 0xc7, 0x6a, 0xc2, 0x98, 0x71, 0x9a, 0x9c, 0x12, 0xae, 0x4f, 0xbd, 0xe5, 0x3d,
	0xea, 0x72, 0x5f, 0x78, 0xa9, 0x69, 0x92, 0xae, 0x30, 0x17, 0x5d, 0x0b, 0x9c, 0xca, 0x36, 0xc9,
	0x42, 0x11, 0x8f, 0xcd, 0x46, 0x2c, 0x67, 0x51, 0x63, 0xcd, 0x12, 0x62, 0x16, 0x63, 0x43, 0xc9,
	0xef, 0xc1, 0x68, 0x67, 0xc8, 0x69, 0xb3, 0x68, 0xd7, 0x99, 0xcf, 0xf7, 0xfa, 0xf2, 0x96, 0xc9,
	0x2c, 0xda, 0x15, 0x1a, 0x04, 0x72, 0xf7, 0x9a, 0x45, 0xbb, 0xca, 0xf6, 0x7a, 0x01, 0x83, 0x89,
	0xec, 0xf3, 0x29, 0x32, 0x55, 0x54, 0x67, 0x8b, 0x7a, 0x1c, 0x3d, 0xe8, 0x37, 0x4d, 0xc6, 0x37,
	0xbc, 0x40, 0x2a, 0xa1, 0xec, 0x39, 0x30, 0x86, 0x0a, 0x97, 0xd1, 0x83, 0xbc, 0xaf, 0x52, 0x77,
	0x84, 0x13, 0xa8, 0xaf, 0xed, 0x4a, 0x65, 0x1b, 0x4e, 0xe1, 0x5f, 0x78, 0xe0, 0xc3, 0x24, 0x0e,
	0xab, 0xb7, 0x4b, 0x1a, 0xe1, 0x3a, 0x3f, 0xf0, 0x60, 0x0a, 0xff, 0x32, 0xbd, 0x26, 0x85, 0xd3,
	0xd8, 0x41, 0xdd, 0x6d, 0xa2, 0x3d, 0x12, 0xe1, 0x15, 0x55, 0x06, 0x0a, 0xd3, 0xd9, 0x67, 0x52,
	0x64, 0x46, 0x5e, 0xb4, 0x0c, 0x5e, 0xee, 0x57, 0x87, 0x7c, 0x4a, 0xd5, 0xb2, 0x4b, 0x3d, 0x16,
	0x84, 0x90, 0x42, 0xdd, 0xe3, 0x7e, 0x50, 0x85, 0x72, 0x39, 0xe3, 0xaa, 0x25, 0xee, 0x1d, 0xa5,
	0x8a, 0xab, 0x96, 0xb8, 0x71, 0x94, 0x2a, 0x16, 0x16, 0x73, 0xe0, 0xc9, 0x37, 0xcb, 0xd8, 0x8b,
	0x9c, 0xd0, 0xa4, 0x1a, 0x44, 0xf9, 0x7d, 0x48, 0x67, 0x19, 0x99, 0xd1, 0x8a, 0xc7, 0x90, 0x51,
	0xbe, 0x26, 0x8e, 0x09, 0x21, 0x1e, 0x6d, 0x0e, 0x8a, 0x70, 0x6d, 0xde, 0x85, 0x94, 0x7c, 0x24,
	0x1a, 0x81, 0xd1, 0x23, 0xde, 0x31, 0x45, 0x88, 0xf9, 0x0b, 0xd9, 0x62, 0x3c, 0xfb, 0xf3, 0x93,
	0x83, 0xdd, 0x5b, 0x74, 0x7b, 0x1d, 0x1c, 0x27, 0x1f, 0x5f, 0xde, 0xb3, 0x04, 0xf2, 0xc5, 0xa1,
	0x52, 0x6e, 0x0a, 0x37, 0x66, 0xbe, 0xa8, 0xca, 0x89, 0xa2, 0x6a, 0x2b, 0xfd, 0x45, 0xbe, 0x38,
	0x54, 0xc3, 0x1d, 0x57, 0x68, 0xb2, 0xf0, 0x3a, 0xa1, 0x46, 0xd1, 0x77, 0x42, 0xe2, 0x17, 0x0c,
	0xf9, 0xe2, 0xa0, 0x5e, 0x27, 0x7f, 0xc1, 0x90, 0x2f, 0x62, 0xb4, 0x05, 0x69, 0x45, 0x15, 0xee,
	0x42, 0xdc, 0x32, 0x4d, 0xa9, 0xf6, 0xfa, 0xbe, 0xeb, 0x34, 0x2a, 0x33, 0x5f, 0xb4, 0x2d, 0xaf,
	0xbb, 0xc3, 0x5d, 0x20, 0xaa, 0xc1, 0xa0, 0xbc, 0x3a, 0xad, 0xc4, 0x48, 0xd6, 0xb6, 0x66, 0x70,
	0xed, 0xb0, 0x99, 0x2e, 0x93, 0x9e, 0x41, 0xad, 0x62, 0xbf, 0xcc, 0xe7, 0x5e, 0x93, 0x37, 0xc4,
	0xb1, 0x3e, 0x8b, 0x7e, 0x13, 0xb9, 0xda, 0xdc, 0x0f, 0xfb, 0xd1, 0x45, 0x02, 0x06, 0xfc, 0x0b,
	0xc8, 0x2b, 0x2b, 0x6f, 0xc9, 0x9e, 0x31, 0x2c, 0x3a, 0x87, 0xe3, 0xf5, 0x3a, 0x9d, 0x7e, 0x92,
	0x84, 0x21, 0xca, 0xc5, 0xf8, 0x5c, 0x93, 0x64, 0xc3, 0xb8, 0x4c, 0x2e, 0xe4, 0x8b, 0x51, 0xed,
	0x31, 0x49, 0x9d, 0xc7, 0x85, 0xcc, 0x17, 0xa3, 0xfa, 0x62, 0x44, 0x38, 0x8b, 0xa7, 0x70, 0xbe,
	0x18, 0x2f, 0x2f, 0x9e, 0x53, 0x8b, 0x14, 0x2f, 0x17, 0x9e, 0x57, 0xed, 0x8f, 0x15, 0x06, 0x17,
	0xe2, 0x0a, 0x8a, 0x0a, 0x83, 0x17, 0xd4, 0x34, 0xc4, 0x58, 0x49, 0x49, 0x2e, 0x2a, 0x55, 0x15,
	0x9e, 0xda, 0x1c, 0x14, 0x39, 0x2f, 0xa9, 0x75, 0xa8, 0xbb, 0x42, 0x45, 0x0f, 0xaa, 0x4e, 0x45,
	0x09, 0x24, 0x4a, 0x95, 0x2e, 0xe3, 0x81, 0x23, 0x4c, 0x2c, 0x91, 0x71, 0xcb, 0x7b, 0x4e, 0x34,
	0xa0, 0x58, 0xf6, 0x01, 0x57, 0x31, 0x56, 0xc2, 0xb5, 0x77, 0xbc, 0x30, 0x40, 0x7d, 0x44, 0x94,
	0x87, 0x54, 0xe7, 0xe2, 0x6c, 0x88, 0xd0, 0x6b, 0x0a, 0x15, 0xe7, 0x41, 0x84, 0x3e, 0xac, 0xa6,
	0x5d, 0xe6, 0xcd, 0xe4, 0xeb, 0xec, 0x47, 0xd4, 0x98, 0x5b, 0xec, 0xb0, 0x78, 0xc0, 0x7c, 0x19,
	0x58, 0xbf, 0x42, 0x09, 0xa8, 0x02, 0xe5, 0x88, 0xf9, 0xd1, 0xec, 0xab, 0xc9, 0xdc, 0x1a, 0x86,
	0x5e, 0xd4, 0xd9, 0x17, 0x3f, 0xf1, 0x11, 0x1b, 0x66, 0x8e, 0x9c, 0x59, 0xb3, 0xaa, 0xa2, 0xc0,
	0x94, 0x77, 0xa8, 0xdf, 0x81, 0x94, 0x86, 0xee, 0xf0, 0xc6, 0xbe, 0x84, 0xc6, 0xb0, 0x4b, 0x84,
	0xd6, 0xe9, 0x3e, 0xcb, 0x77, 0xbb, 0x0e, 0x93, 0xf8, 0x78, 0x36, 0x47, 0x40, 0xd7, 0xb3, 0x42,
	0x57, 0xf9, 0x9b, 0x0c, 0x99, 0xb6, 0x2a, 0x96, 0xbd, 0xc6, 0xf6, 0x68, 0xcf, 0x09, 0xa5, 0xc3,
	0x41, 0x40, 0x78, 0x91, 0x54, 0xf6, 0xe3, 0x29, 0x32, 0x23, 0xd3, 0x1a, 0xbf, 0xa9, 0xf9, 0x6b,
	0xe6, 0x50, 0xbc, 0x86, 0x80, 0x7a, 0xc2, 0xa7, 0x02, 0x3d, 0x04, 0xb6, 0x2a, 0xd2, 0x3f, 0x89,
	0x8f, 0x72, 0x4d, 0xfe, 0xd0, 0x07, 0x3f, 0x5e, 0x83, 0x6e, 0x5f, 0x6c, 0x4b, 0xfc, 0x2a, 0x51,
	0xf1, 0x33, 0x20, 0xe1, 0xa3, 0x04, 0x6b, 0xc3, 0xe3, 0xae, 0x74, 0xaa, 0xf8, 0x59, 0x2e, 0x99,
	0xf2, 0xd2, 0x1f, 0x3f, 0xf2, 0x5b, 0x15, 0x98, 0x1a, 0x0c, 0x50, 0x86, 0xd3, 0xba, 0xcf, 0x12,
	0x0d, 0x19, 0x90, 0xec, 0x45, 0x32, 0x85, 0xd1, 0x9c, 0x3e, 0x41, 0xb7, 0x30, 0x34, 0xf0, 0x31,
	0x32, 0x78, 0x20, 0xbb, 0x43, 0xa6, 0x50, 0x47, 0xda, 0xc9, 0xde, 0x89, 0xcf, 0x61, 0x8e, 0x9c,
	0xb9, 0x63, 0xd9, 0x55, 0xd6, 0x75, 0x68, 0x83, 0xe5, 0x4d, 0x53, 0x1e, 0xb8, 0x77, 0xe4, 0x8f,
	0x9a, 0x44, 0x48, 0x74, 0xc7, 0xb2, 0x45, 0x88, 0x9d, 0x6f, 0x34, 0xa4, 0xa3, 0xbd, 0xa3, 0x62,
	0xb9, 0x89, 0xac, 0x4d, 0x32, 0x82, 0x24, 0x8f, 0x5d, 0xd1, 0xff, 0xbc, 0x86, 0xe2, 0x83, 0x00,
	0x99, 0xd1, 0xa0, 0x8a, 0x3f, 0xcf, 0x12, 0xd0, 0x88, 0xe9, 0x71, 0xb7, 0x46, 0xf7, 0x98, 0x1c,
	0x4d, 0xa3, 0x38, 0xfc, 0x78, 0xf6, 0x35, 0x64, 0x76, 0xbb, 0xcb, 0xdc, 0x58, 0xff, 0x86, 0x42,
	0x86, 0xe3, 0x66, 0x89, 0xa9, 0xde, 0xe7, 0x49, 0x46, 0x01, 0xb1, 0xce, 0x67, 0x09, 0x51, 0xa0,
	0xec, 0xbb, 0x4a, 0xce, 0x6b, 0x8f, 0x8c, 0x67, 0xbe, 0x2f, 0x0e, 0x7d, 0xbd, 0xd0, 0xf9, 0xc4,
	0x6f, 0xc8, 0x70, 0x87, 0x0b, 0x40, 0x37, 0x90, 0x63, 0x20, 0x76, 0x9b, 0x3a, 0x8e, 0x8e, 0x40,
	0xc7, 0xb2, 0x3f, 0x48, 0xa0, 0xe8, 0xa2, 0xae, 0x63, 0xbf, 0x62, 0x33, 0xc8, 0x6c, 0xd1, 0x15,
	0x46, 0xaa, 0x63, 0x9a, 0x07, 0xc4, 0x39, 0xa1, 0xb0, 0x8a, 0x8f, 0xfe, 0x36, 0x14, 0x4f, 0x37,
	0x52, 0x59, 0x87, 0x4c, 0x8b, 0xdf, 0x5f, 0xb1, 0x50, 0xff, 0x8e, 0xac, 0x84, 0x19, 0x81, 0xe3,
	0xe8, 0xdf, 0x5f, 0x59, 0x62, 0x8f, 0xca, 0xf3, 0x1f, 0xbf, 0x2a, 0xde, 0xbe, 0x38, 0x15, 0xd4,
	0xa7, 0x8c, 0xde, 0x44, 0xf8, 0x18, 0x51, 0xd7, 0xee, 0x58, 0x30, 0x81, 0x62, 0x44, 0x48, 0xa5,
	0x70, 0xfb, 0xde, 0xd3, 0x70, 0x2a, 0xfb, 0x28, 0x21, 0x3b, 0xd4, 0x67, 0x66, 0x53, 0x0f, 0xb6,
	0x83, 0xe1, 0x2f, 0x55, 0xb1, 0x31, 0x7e, 0xd4, 0x58, 0x03, 0xcf, 0xf6, 0xb1, 0x6c, 0x0e, 0x43,
	0xb4, 0x43, 0xbd, 0x15, 0x4e, 0x93, 0x53, 0xeb, 0xfc, 0x48, 0xc4, 0x21, 0x53, 0x64, 0xa2, 0x4a,
	0x91, 0x45, 0x1c, 0xad, 0x14, 0xcf, 0x43, 0x51, 0x72, 0x19, 0xcf, 0x5e, 0x27, 0xa7, 0xc5, 0x5c,
	0xc2, 0xbe, 0xc3, 0xd4, 0x0f, 0xc4, 0x22, 0x05, 0xc8, 0x1f, 0x88, 0x95, 0xb9, 0xcb, 0x21, 0x95,
	0x5d, 0x96, 0x93, 0xb6, 0xe8, 0x91, 0xe8, 0x7c, 0x8e, 0x9c, 0x29, 0x59, 0x96, 0xbc, 0xa6, 0xb1,
	0xd7, 0x19, 0x93, 0x3b, 0x5d, 0x42, 0x47, 0x76, 0x15, 0x33, 0x63, 0x18, 0xcb, 0xbe, 0x8a, 0x40,
	0x95, 0x39, 0xf2, 0x82, 0x93, 0x3a, 0x32, 0x08, 0x4d, 0x93, 0xf1, 0x2d, 0x2f, 0x94, 0x41, 0x4d,
	0xde, 0x45, 0xe9, 0x26, 0xc9, 0xd8, 0xb6, 0x0f, 0x63, 0xd9, 0x4f, 0xa4, 0xc8, 0x7c, 0x85, 0xf9,
	0x01, 0xf7, 0x5c, 0xf1, 0xe3, 0x22, 0x6f, 0xb0, 0xa7, 0x2b, 0xc3, 0x41, 0x07, 0x02, 0xca, 0x90,
	0xce, 0x13, 0x03, 0xbf, 0x2a, 0xb4, 0x9f, 0x77, 0x07, 0x45, 0x65, 0xa1, 0x6d, 0xc4, 0xe5, 0x13,
	0x85, 0x71, 0xdd, 0x8b, 0xfe, 0x8d, 0xca, 0x04, 0xfa, 0x73, 0x49, 0x57, 0x3f, 0x95, 0x89, 0x9a,
	0x9e, 0xc2, 0x75, 0x10, 0xbc, 0x83, 0xdf, 0x96, 0x4c, 0xe2, 0x51, 0x25, 0xd8, 0xe3, 0x15, 0xf7,
	0xa8, 0x49, 0x3a, 0xdb, 0x26, 0xf3, 0x91, 0xf3, 0x42, 0xd2, 0x0e, 0x75, 0x1c, 0x16, 0x8a, 0xf7,
	0x20, 0x95, 0xd2, 0x8e, 0xbd, 0x56, 0x92, 0x12, 0x89, 0x8f, 0x5a, 0xf1, 0xe9, 0x7b, 0xd2, 0xdf,
	0x88, 0xcf, 0x52, 0x65, 0x43, 0xfe, 0x7e, 0x4c, 0x7c, 0x99, 0xaf, 0xbe, 0x25, 0x13, 0x2a, 0xf1,
	0x55, 0x29, 0xc1, 0x64, 0x44, 0xda, 0x34, 0x4b, 0x90, 0xce, 0x72, 0x32, 0x23, 0x0f, 0x95, 0x41,
	0xc0, 0x5b, 0xaf, 0xd5, 0x92, 0x5b, 0x0d, 0x01, 0x93, 0xca, 0xa3, 0x47, 0x6c, 0x03, 0x04, 0xf2,
	0x8e, 0xcf, 0x68, 0xb3, 0x2f, 0x40, 0x91, 0x4f, 0x22, 0x58, 0xe6, 0x41, 0xa0, 0x52, 0x76, 0x85,
	0xec, 0x50, 0x1e, 0x0a, 0x64, 0x22, 0xdb, 0x26, 0x20, 0x87, 0xc2, 0x84, 0x48, 0x0d, 0x27, 0xb8,
	0xac, 0x5a, 0x32, 0x2c, 0x12, 0xc8, 0xb6, 0xcb, 0xca, 0x3d, 0x27, 0xe4, 0x5d, 0x47, 0x79, 0x0f,
	0x81, 0x5a, 0x87, 0x5e, 0x84, 0x0a, 0xdf, 0x2f, 0xd1, 0xb6, 0xcf, 0x06, 0xdc, 0xe3, 0xd9, 0xef,
	0x23, 0x33, 0xa6, 0xd7, 0xe9, 0x78, 0x6e, 0x2c, 0xb2, 0x8e, 0x8f, 0x81, 0x31, 0xae, 0x98, 0x92,
	0x34, 0x7b, 0x33, 0x9a, 0x0d, 0x8c, 0x65, 0x37, 0xc8, 0x7c, 0xa2, 0x5e, 0x33, 0xe8, 0x22, 0x21,
	0xa6, 0x7a, 0x1d, 0x15, 0x69, 0x45, 0xbd, 0x63, 0x89, 0x2b, 0x25, 0x6b, 0x11, 0x23, 0x5e, 0x2f,
	0x19, 0x68, 0xb8, 0x5c, 0x1d, 0x4a, 0x29, 0x10, 0x90, 0xe2, 0x28, 0x6a, 0x24, 0x8f, 0x06, 0x50,
	0xb3, 0x78, 0x94, 0x8c, 0x67, 0xeb, 0x64, 0x2e, 0x21, 0xa0, 0x76, 0xf2, 0xd6, 0x90, 0x51, 0xe3,
	0xee, 0xf1, 0x9a, 0x62, 0x6b, 0xe3, 0xb9, 0x87, 0x81, 0xf3, 0x1e, 0x0b, 0x79, 0x87, 0xc9, 0x1a,
	0x8b, 0x25, 0x6a, 0x01, 0x55, 0x2e, 0xc3, 0x71, 0x18, 0xcf, 0xbe, 0x6b, 0x92, 0x64, 0x12, 0x1d,
	0x6f, 0x34, 0xb1, 0xe1, 0xda, 0x90, 0x5f, 0x17, 0x80, 0x2e, 0xb8, 0xbf, 0x90, 0x36, 0xce, 0x92,
	0x0c, 0x22, 0xf1, 0x1a, 0xfb, 0x17, 0xd2, 0x9a, 0x4f, 0x17, 0x7a, 0xbf, 0x18, 0xf1, 0xc5, 0x6b,
	0xbb, 0x5f, 0x4a, 0x1b, 0xe7, 0xc9, 0x9c, 0x6c, 0x2d, 0x21, 0xf9, 0x6e, 0xec, 0xcb, 0x69, 0xe3,
	0x02, 0x99, 0x8f, 0xe3, 0xb2, 0x38, 0x94, 0x83, 0xaf, 0x9c, 0x40, 0x59, 0x82, 0xaf, 0x9e, 0x40,
	0x59, 0x86, 0xaf, 0x9d, 0x40, 0x59, 0x81, 0xaf, 0x8b, 0x7c, 0x39, 0x4e, 0x51, 0x59, 0x2c, 0x42,
	0xba, 0xe2, 0xff, 0xa9, 0x8c, 0x66, 0x8a, 0x8a, 0xfc, 0xbf, 0x91, 0x31, 0xe6, 0xc9, 0x2c, 0x42,
	0xb1, 0xba, 0xfe, 0x6f, 0x46, 0x7c, 0x51, 0x29, 0xff, 0xb7, 0xc4, 0xfd, 0x06, 0x42, 0x89, 0xea,
	0xfd, 0x6f, 0x67, 0x30, 0x93, 0xd7, 0x3d, 0x96, 0x2a, 0xf0, 0x3b, 0xe2, 0x7e, 0x49, 0xca, 0xa1,
	0x6b, 0xf4, 0xbf, 0x9b, 0xd1, 0x1a, 0x8b, 0x97, 0xe5, 0x7f, 0x6f, 0x04, 0xba, 0x04, 0xbf, 0x1f,
	0x8d, 0x93, 0x28, 0xbe, 0x7f, 0x5a, 0x5c, 0x51, 0x1d, 0x53, 0x6f, 0x0e, 0xfe, 0x60, 0x34, 0x61,
	0x09, 0xfe, 0x70, 0x34, 0x61, 0x19, 0xfe, 0x28, 0x22, 0x14, 0x68, 0x87, 0x15, 0x58, 0xa8, 0x17,
	0xe4, 0x8f, 0x47, 0x13, 0x96, 0xe0, 0x4f, 0x46, 0x13, 0x96, 0xe1, 0x33, 0xd1, 0x64, 0x71, 0xf6,
	0xe2, 0xb9, 0xac, 0x7a, 0xfa, 0xaf, 0x31, 0xcc, 0x16, 0x85, 0x9e, 0x3f, 0xb1, 0xa0, 0xed, 0x23,
	0x19, 0xe8, 0x7e, 0x32, 0xc2, 0x4b, 0xf1, 0xbe, 0xe1, 0x3f, 0x26, 0xf9, 0xf5, 0xe2, 0xc0, 0x7f,
	0x5a, 0xd0, 0xb2, 0x94, 0xbd, 0x26, 0xdf, 0xeb, 0x6f, 0xf1, 0xc6, 0xfe, 0x16, 0xba, 0xfb, 0x5f,
	0x15, 0xbf, 0x2d, 0x50, 0x16, 0xce, 0x43, 0xc6, 0x0a, 0xac, 0xe1, 0x75, 0x98, 0xa8, 0x1d, 0xff,
	0xe7, 0x85, 0x6c, 0x83, 0x40, 0x7d, 0xa3, 0x12, 0xab, 0x49, 0xcb, 0x1d, 0x51, 0xdf, 0x4c, 0xd6,
	0x7e, 0x00, 0x81, 0x84, 0xe6, 0x5f, 0x48, 0x6b, 0x58, 0x21, 0xf2, 0x09, 0xa3, 0xdc, 0x17, 0x08,
	0x0f, 0xf6, 0x45, 0xf6, 0xd7, 0x52, 0xe4, 0x74, 0xd9, 0x6b, 0x32, 0x47, 0x9f, 0xc8, 0x65, 0xcb,
	0x2e, 0xf4, 0xee, 0xf5, 0xa4, 0xd3, 0x2b, 0x2b, 0xdb, 0x29, 0x3a, 0xac, 0x11, 0xfa, 0x1e, 0xba,
	0xda, 0x79, 0x92, 0x29, 0x0f, 0x59, 0x94, 0xf8, 0x35, 0x6f, 0xd9, 0xb2, 0xb7, 0xf7, 0xf6, 0x78,
	0x83, 0x53, 0x07, 0x93, 0xef, 0x09, 0xc5, 0x88, 0xda, 0x2c, 0xba, 0xa1, 0x2f, 0xde, 0xa4, 0x9d,
	0x52, 0x03, 0x94, 0xa9, 0xe3, 0xc0, 0xa4, 0x6a, 0x95, 0x6f, 0x1e, 0x30, 0x3f, 0xe4, 0xc2, 0xbd,
	0xa4, 0xf1, 0x58, 0x29, 0x63, 0xd0, 0xd0, 0xbd, 0xdb, 0x0d, 0x64, 0x3e, 0x28, 0xf8, 0x65, 0xbc,
	0x73, 0x5a, 0xb8, 0x23, 0x4b, 0x1c, 0xe3, 0xe2, 0xc0, 0x24, 0x8a, 0x41, 0x9e, 0x56, 0x45, 0x98,
	0xce, 0xde, 0x23, 0x20, 0xaf, 0x4f, 0x93, 0x87, 0xca, 0xd6, 0xf0, 0xa1, 0xb2, 0x35, 0x7c, 0xa8,
	0x6c, 0x1d, 0x3b, 0x54, 0x66, 0x09, 0x41, 0xf0, 0xae, 0x64, 0x1a, 0xcf, 0x2e, 0x93, 0xd9, 0x41,
	0xd7, 0xaa, 0x06, 0x35, 0xb3, 0x85, 0xee, 0x48, 0x5f, 0xef, 0xa6, 0x64, 0xcf, 0x56, 0x74, 0xa5,
	0x3b, 0x96, 0xfd, 0xfc, 0x18, 0x99, 0x93, 0xad, 0x4a, 0x3d, 0xde, 0x64, 0x45, 0x0c, 0xbd, 0x02,
	0x3c, 0x39, 0xb6, 0x4a, 0x45, 0x7b, 0xcd, 0x3b, 0x74, 0x1d, 0x8f, 0x36, 0xd7, 0x97, 0x44, 0x72,
	0x9c, 0x32, 0x5e, 0x4a, 0xae, 0x21, 0x2e, 0x1b, 0xe4, 0x1b, 0xa1, 0x2c, 0x35, 0x6f, 0xb8, 0xb1,
	0x1e, 0x60, 0xcc, 0x78, 0x88, 0x3c, 0x88, 0x5c, 0xa6, 0x83, 0x86, 0xa4, 0x59, 0x45, 0x98, 0xb8,
	0xd1, 0x10, 0xb5, 0xbc, 0xab, 0xe4, 0xd2, 0x10, 0x43, 0xfc, 0x46, 0x5c, 0x44, 0x0b, 0x11, 0x5d,
	0x3f, 0xd6, 0xda, 0x70, 0xf7, 0x3c, 0x38, 0xa5, 0x49, 0x31, 0x7e, 0x75, 0x25, 0x30, 0x89, 0x31,
	0xe4, 0x70, 0xaf, 0xa8, 0x98, 0xf4, 0x08, 0x79, 0xaa, 0x2c, 0xe8, 0xf9, 0x3e, 0x93, 0xb5, 0xc5,
	0x29, 0xa1, 0xde, 0x52, 0xd1, 0x2e, 0xba, 0x21, 0xf3, 0xd5, 0x5c, 0x4f, 0x63, 0x88, 0x25, 0x46,
	0xda, 0xe7, 0x5d, 0x39, 0x31, 0x82, 0x61, 0x49, 0xd4, 0x51, 0xbe, 0x11, 0x26, 0xb7, 0xdd, 0xb4,
	0x71, 0x89, 0x9c, 0x8f, 0x93, 0x31, 0x8f, 0x73, 0x44, 0xb6, 0x04, 0x33, 0xd9, 0x5f, 0x1f, 0x27,
	0x53, 0x65, 0xca, 0x1d, 0x9d, 0x13, 0x94, 0x45, 0x05, 0x4f, 0xb8, 0xfb, 0xb0, 0xe7, 0xbb, 0x91,
	0x39, 0xd7, 0x79, 0x57, 0x26, 0xa2, 0x02, 0x15, 0x67, 0xb8, 0x44, 0x13, 0xd7, 0x45, 0xe3, 0x0a,
	0x8f, 0xce, 0x4e, 0x75, 0x8f, 0x30, 0x61, 0x5c, 0x23, 0x97, 0xcb, 0x49, 0xff, 0xe4, 0xf5, 0xc2,
	0xd8, 0xed, 0xb4, 0xb8, 0x04, 0x28, 0xc7, 0x5d, 0xb3, 0x6e, 0x3b, 0x69, 0x3c, 0x42, 0xae, 0x26,
	0x28, 0xc7, 0x5b, 0xa7, 0x95, 0xe8, 0x89, 0x27, 0x05, 0x53, 0x0a, 0x14, 0xb7, 0x48, 0xfa, 0x01,
	0xca, 0x69, 0xd4, 0x86, 0x06, 0x0b, 0xac, 0xc5, 0x5d, 0x97, 0xe9, 0xe7, 0x69, 0x44, 0xd1, 0x12,
	0xfa, 0x53, 0x33, 0x9e, 0xc6, 0xb3, 0x19, 0x47, 0x68, 0xee, 0xb3, 0x3e, 0xcc, 0xa8, 0x2f, 0xf9,
	0xaa, 0xfb, 0x0c, 0x1a, 0xb4, 0x28, 0x76, 0x63, 0x96, 0x4d, 0xdd, 0x10, 0x66, 0x71, 0x95, 0x90,
	0x7b, 0x20, 0x62, 0x46, 0x49, 0x53, 0x65, 0x07, 0x9c, 0x1d, 0xaa, 0x92, 0x1f, 0xa0, 0x71, 0x24,
	0xe6, 0xa6, 0x6e, 0x3e, 0xe6, 0xd0, 0x16, 0x13, 0x04, 0xd9, 0x4e, 0x4d, 0x1d, 0x0c, 0x34, 0xb8,
	0xa1, 0xb9, 0x49, 0x0e, 0x98, 0xcf, 0x3e, 0x4e, 0x48, 0x5e, 0x98, 0x90, 0x8e, 0x9c, 0x07, 0x6a,
	0xef, 0xca, 0x5f, 0x06, 0x60, 0xb7, 0x6b, 0x3e, 0x3d, 0x74, 0x2c, 0x51, 0xad, 0xdd, 0x22, 0xb3,
	0xa6, 0xd7, 0x64, 0xb2, 0x46, 0xa9, 0x43, 0x7b, 0xb3, 0x6e, 0xd9, 0xc2, 0xcf, 0x23, 0x49, 0xd6,
	0xd2, 0x10, 0xb2, 0x7c, 0xde, 0x6a, 0xc9, 0xd7, 0xd9, 0x82, 0x20, 0x82, 0x48, 0x24, 0x44, 0xc8,
	0x78, 0xf6, 0x95, 0x18, 0xc8, 0x35, 0x99, 0xe9, 0x75, 0xd8, 0xba, 0xef, 0x89, 0x1a, 0x9a, 0x69,
	0xae, 0x0f, 0xfe, 0x6f, 0x8f, 0x69, 0x92, 0xc6, 0x6f, 0x91, 0xb9, 0x66, 0x1f, 0x97, 0x49, 0x45,
	0x10, 0x8b, 0xd8, 0xe2, 0x09, 0x08, 0x90, 0x19, 0xfc, 0x2e, 0x53, 0xee, 0x86, 0x94, 0xbb, 0x90,
	0xfa, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0x38, 0xbe, 0x23, 0xc8, 0x44, 0x00, 0x00,
}
