// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_log.proto

package VK_Proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ELogCategory int32

const (
	ELogCategory_ELC_Invalid                       ELogCategory = 0
	ELogCategory_ELC_Login                         ELogCategory = 1
	ELogCategory_ELC_Transfer                      ELogCategory = 2
	ELogCategory_ELC_Purchase                      ELogCategory = 3
	ELogCategory_ELC_Online                        ELogCategory = 4
	ELogCategory_ELC_OnlineTime                    ELogCategory = 5
	ELogCategory_ELC_Trade                         ELogCategory = 6
	ELogCategory_ELC_Forbidden                     ELogCategory = 7
	ELogCategory_ELC_Register                      ELogCategory = 8
	ELogCategory_ELC_Mail                          ELogCategory = 9
	ELogCategory_ELC_OnlineReward                  ELogCategory = 10
	ELogCategory_ELC_LogLottery                    ELogCategory = 11
	ELogCategory_ELC_LogLotteryOrder               ELogCategory = 12
	ELogCategory_ELC_LoginReward                   ELogCategory = 13
	ELogCategory_ELC_NewYearReward                 ELogCategory = 14
	ELogCategory_ELC_FestivalReward                ELogCategory = 15
	ELogCategory_ELC_RobotTransfer                 ELogCategory = 16
	ELogCategory_ELC_OnlineRewardNewbie            ELogCategory = 17
	ELogCategory_ELC_LogLotteryWinners             ELogCategory = 18
	ELogCategory_ELC_LogSplashWater                ELogCategory = 19
	ELogCategory_ELC_LogRewardPool                 ELogCategory = 20
	ELogCategory_ELC_LogBYDLDJackpotWinners        ELogCategory = 21
	ELogCategory_ELC_LogDummyMatchWinners          ELogCategory = 22
	ELogCategory_ELC_LogFreezeAccount              ELogCategory = 23
	ELogCategory_ELC_LogSupply                     ELogCategory = 24
	ELogCategory_ELC_LogSevenDaysSignReward        ELogCategory = 25
	ELogCategory_ELC_LogUpdatePhysicalGoods        ELogCategory = 26
	ELogCategory_ELC_LogDailySpin                  ELogCategory = 27
	ELogCategory_ELC_LogSilent                     ELogCategory = 28
	ELogCategory_ELC_LogChipReplenish              ELogCategory = 29
	ELogCategory_ELC_LogBlackAccount               ELogCategory = 30
	ELogCategory_ELC_LogApplePay                   ELogCategory = 31
	ELogCategory_ELC_LogOnlineWelfare              ELogCategory = 32
	ELogCategory_ELC_LogWaterLampWish              ELogCategory = 33
	ELogCategory_ELC_LogElephantPiggy              ELogCategory = 34
	ELogCategory_ELC_LogLimitTimeGift              ELogCategory = 35
	ELogCategory_ELC_LogTreasure                   ELogCategory = 36
	ELogCategory_ELC_LogTreasureWinner             ELogCategory = 37
	ELogCategory_ELC_LogLuckySpin                  ELogCategory = 38
	ELogCategory_ELC_LogBuYuScratchCard            ELogCategory = 39
	ELogCategory_ELC_LogMatch                      ELogCategory = 40
	ELogCategory_ELC_LogMatchAdvance               ELogCategory = 41
	ELogCategory_ELC_LogMatchWinner                ELogCategory = 42
	ELogCategory_ELC_LogBrokenGift                 ELogCategory = 43
	ELogCategory_ELC_LogTexasBetLevel              ELogCategory = 44
	ELogCategory_ELC_LogGameMatch                  ELogCategory = 45
	ELogCategory_ELC_LogNewAgentRelation           ELogCategory = 46
	ELogCategory_ELC_LogNewAgentUpdateTopUserId    ELogCategory = 47
	ELogCategory_ELC_LogNewAgentForbidden          ELogCategory = 48
	ELogCategory_ELC_LogNewAgentSetEffective       ELogCategory = 49
	ELogCategory_ELC_LogPublishStatistics          ELogCategory = 50
	ELogCategory_ELC_LogBets                       ELogCategory = 51
	ELogCategory_ELC_PersonalRecord                ELogCategory = 52
	ELogCategory_ELC_LogSpayCashCard               ELogCategory = 53
	ELogCategory_ELC_LogSpaybank                   ELogCategory = 54
	ELogCategory_ELC_LogPaymentRecord              ELogCategory = 55
	ELogCategory_ELC_LogCardExchange               ELogCategory = 56
	ELogCategory_ELC_ThirdPartyGameTransferRecords ELogCategory = 57
	ELogCategory_ELC_ThirdPartyGameBet             ELogCategory = 58
	ELogCategory_ELC_PlayerCard                    ELogCategory = 59
	ELogCategory_ELC_PlayerInfo                    ELogCategory = 60
	ELogCategory_ELC_LogNoviceGuide                ELogCategory = 61
	ELogCategory_ELC_LogRechargeFeedback           ELogCategory = 62
	ELogCategory_ELC_LogPhoneMailCode              ELogCategory = 63
	ELogCategory_ELC_LogChmLocker                  ELogCategory = 101
	ELogCategory_ELC_LogLuckyTurntable             ELogCategory = 102
	ELogCategory_ELC_LogUserAccount                ELogCategory = 103
)

var ELogCategory_name = map[int32]string{
	0:   "ELC_Invalid",
	1:   "ELC_Login",
	2:   "ELC_Transfer",
	3:   "ELC_Purchase",
	4:   "ELC_Online",
	5:   "ELC_OnlineTime",
	6:   "ELC_Trade",
	7:   "ELC_Forbidden",
	8:   "ELC_Register",
	9:   "ELC_Mail",
	10:  "ELC_OnlineReward",
	11:  "ELC_LogLottery",
	12:  "ELC_LogLotteryOrder",
	13:  "ELC_LoginReward",
	14:  "ELC_NewYearReward",
	15:  "ELC_FestivalReward",
	16:  "ELC_RobotTransfer",
	17:  "ELC_OnlineRewardNewbie",
	18:  "ELC_LogLotteryWinners",
	19:  "ELC_LogSplashWater",
	20:  "ELC_LogRewardPool",
	21:  "ELC_LogBYDLDJackpotWinners",
	22:  "ELC_LogDummyMatchWinners",
	23:  "ELC_LogFreezeAccount",
	24:  "ELC_LogSupply",
	25:  "ELC_LogSevenDaysSignReward",
	26:  "ELC_LogUpdatePhysicalGoods",
	27:  "ELC_LogDailySpin",
	28:  "ELC_LogSilent",
	29:  "ELC_LogChipReplenish",
	30:  "ELC_LogBlackAccount",
	31:  "ELC_LogApplePay",
	32:  "ELC_LogOnlineWelfare",
	33:  "ELC_LogWaterLampWish",
	34:  "ELC_LogElephantPiggy",
	35:  "ELC_LogLimitTimeGift",
	36:  "ELC_LogTreasure",
	37:  "ELC_LogTreasureWinner",
	38:  "ELC_LogLuckySpin",
	39:  "ELC_LogBuYuScratchCard",
	40:  "ELC_LogMatch",
	41:  "ELC_LogMatchAdvance",
	42:  "ELC_LogMatchWinner",
	43:  "ELC_LogBrokenGift",
	44:  "ELC_LogTexasBetLevel",
	45:  "ELC_LogGameMatch",
	46:  "ELC_LogNewAgentRelation",
	47:  "ELC_LogNewAgentUpdateTopUserId",
	48:  "ELC_LogNewAgentForbidden",
	49:  "ELC_LogNewAgentSetEffective",
	50:  "ELC_LogPublishStatistics",
	51:  "ELC_LogBets",
	52:  "ELC_PersonalRecord",
	53:  "ELC_LogSpayCashCard",
	54:  "ELC_LogSpaybank",
	55:  "ELC_LogPaymentRecord",
	56:  "ELC_LogCardExchange",
	57:  "ELC_ThirdPartyGameTransferRecords",
	58:  "ELC_ThirdPartyGameBet",
	59:  "ELC_PlayerCard",
	60:  "ELC_PlayerInfo",
	61:  "ELC_LogNoviceGuide",
	62:  "ELC_LogRechargeFeedback",
	63:  "ELC_LogPhoneMailCode",
	101: "ELC_LogChmLocker",
	102: "ELC_LogLuckyTurntable",
	103: "ELC_LogUserAccount",
}
var ELogCategory_value = map[string]int32{
	"ELC_Invalid":                       0,
	"ELC_Login":                         1,
	"ELC_Transfer":                      2,
	"ELC_Purchase":                      3,
	"ELC_Online":                        4,
	"ELC_OnlineTime":                    5,
	"ELC_Trade":                         6,
	"ELC_Forbidden":                     7,
	"ELC_Register":                      8,
	"ELC_Mail":                          9,
	"ELC_OnlineReward":                  10,
	"ELC_LogLottery":                    11,
	"ELC_LogLotteryOrder":               12,
	"ELC_LoginReward":                   13,
	"ELC_NewYearReward":                 14,
	"ELC_FestivalReward":                15,
	"ELC_RobotTransfer":                 16,
	"ELC_OnlineRewardNewbie":            17,
	"ELC_LogLotteryWinners":             18,
	"ELC_LogSplashWater":                19,
	"ELC_LogRewardPool":                 20,
	"ELC_LogBYDLDJackpotWinners":        21,
	"ELC_LogDummyMatchWinners":          22,
	"ELC_LogFreezeAccount":              23,
	"ELC_LogSupply":                     24,
	"ELC_LogSevenDaysSignReward":        25,
	"ELC_LogUpdatePhysicalGoods":        26,
	"ELC_LogDailySpin":                  27,
	"ELC_LogSilent":                     28,
	"ELC_LogChipReplenish":              29,
	"ELC_LogBlackAccount":               30,
	"ELC_LogApplePay":                   31,
	"ELC_LogOnlineWelfare":              32,
	"ELC_LogWaterLampWish":              33,
	"ELC_LogElephantPiggy":              34,
	"ELC_LogLimitTimeGift":              35,
	"ELC_LogTreasure":                   36,
	"ELC_LogTreasureWinner":             37,
	"ELC_LogLuckySpin":                  38,
	"ELC_LogBuYuScratchCard":            39,
	"ELC_LogMatch":                      40,
	"ELC_LogMatchAdvance":               41,
	"ELC_LogMatchWinner":                42,
	"ELC_LogBrokenGift":                 43,
	"ELC_LogTexasBetLevel":              44,
	"ELC_LogGameMatch":                  45,
	"ELC_LogNewAgentRelation":           46,
	"ELC_LogNewAgentUpdateTopUserId":    47,
	"ELC_LogNewAgentForbidden":          48,
	"ELC_LogNewAgentSetEffective":       49,
	"ELC_LogPublishStatistics":          50,
	"ELC_LogBets":                       51,
	"ELC_PersonalRecord":                52,
	"ELC_LogSpayCashCard":               53,
	"ELC_LogSpaybank":                   54,
	"ELC_LogPaymentRecord":              55,
	"ELC_LogCardExchange":               56,
	"ELC_ThirdPartyGameTransferRecords": 57,
	"ELC_ThirdPartyGameBet":             58,
	"ELC_PlayerCard":                    59,
	"ELC_PlayerInfo":                    60,
	"ELC_LogNoviceGuide":                61,
	"ELC_LogRechargeFeedback":           62,
	"ELC_LogPhoneMailCode":              63,
	"ELC_LogChmLocker":                  101,
	"ELC_LogLuckyTurntable":             102,
	"ELC_LogUserAccount":                103,
}

func (x ELogCategory) Enum() *ELogCategory {
	p := new(ELogCategory)
	*p = x
	return p
}
func (x ELogCategory) String() string {
	return proto.EnumName(ELogCategory_name, int32(x))
}
func (x *ELogCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELogCategory_value, data, "ELogCategory")
	if err != nil {
		return err
	}
	*x = ELogCategory(value)
	return nil
}
func (ELogCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

type LogSpayCashCardType int32

const (
	LogSpayCashCardType_LSCT_Invalid LogSpayCashCardType = 0
	LogSpayCashCardType_LSCT_Use     LogSpayCashCardType = 1
	LogSpayCashCardType_LSCT_Get     LogSpayCashCardType = 2
)

var LogSpayCashCardType_name = map[int32]string{
	0: "LSCT_Invalid",
	1: "LSCT_Use",
	2: "LSCT_Get",
}
var LogSpayCashCardType_value = map[string]int32{
	"LSCT_Invalid": 0,
	"LSCT_Use":     1,
	"LSCT_Get":     2,
}

func (x LogSpayCashCardType) Enum() *LogSpayCashCardType {
	p := new(LogSpayCashCardType)
	*p = x
	return p
}
func (x LogSpayCashCardType) String() string {
	return proto.EnumName(LogSpayCashCardType_name, int32(x))
}
func (x *LogSpayCashCardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogSpayCashCardType_value, data, "LogSpayCashCardType")
	if err != nil {
		return err
	}
	*x = LogSpayCashCardType(value)
	return nil
}
func (LogSpayCashCardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

type LogMsg struct {
	Category         *ELogCategory `protobuf:"varint,1,req,name=Category,enum=VK.Proto.ELogCategory" json:"Category,omitempty"`
	Json             *string       `protobuf:"bytes,2,req,name=Json" json:"Json,omitempty"`
	OS               *OSType       `protobuf:"varint,3,req,name=OS,enum=VK.Proto.OSType" json:"OS,omitempty"`
	Time             *string       `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LogMsg) Reset()                    { *m = LogMsg{} }
func (m *LogMsg) String() string            { return proto.CompactTextString(m) }
func (*LogMsg) ProtoMessage()               {}
func (*LogMsg) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *LogMsg) GetCategory() ELogCategory {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ELogCategory_ELC_Invalid
}

func (m *LogMsg) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

func (m *LogMsg) GetOS() OSType {
	if m != nil && m.OS != nil {
		return *m.OS
	}
	return OSType_OST_Invalid
}

func (m *LogMsg) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

type LogMsgs struct {
	Messages         []*LogMsg `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *LogMsgs) Reset()                    { *m = LogMsgs{} }
func (m *LogMsgs) String() string            { return proto.CompactTextString(m) }
func (*LogMsgs) ProtoMessage()               {}
func (*LogMsgs) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *LogMsgs) GetMessages() []*LogMsg {
	if m != nil {
		return m.Messages
	}
	return nil
}

// 登陆日志
type LogLogin struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Ip               *string `protobuf:"bytes,2,req,name=Ip" json:"Ip,omitempty"`
	Imei             *string `protobuf:"bytes,3,req,name=Imei" json:"Imei,omitempty"`
	Time             *string `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	GameId           *int32  `protobuf:"varint,5,req,name=GameId" json:"GameId,omitempty"`
	GroupId          *int32  `protobuf:"varint,6,req,name=GroupId" json:"GroupId,omitempty"`
	System           *OSType `protobuf:"varint,7,req,name=System,enum=VK.Proto.OSType" json:"System,omitempty"`
	Location         *string `protobuf:"bytes,8,req,name=Location" json:"Location,omitempty"`
	Model            *string `protobuf:"bytes,9,req,name=Model" json:"Model,omitempty"`
	BirthTime        *string `protobuf:"bytes,10,req,name=BirthTime" json:"BirthTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogLogin) Reset()                    { *m = LogLogin{} }
func (m *LogLogin) String() string            { return proto.CompactTextString(m) }
func (*LogLogin) ProtoMessage()               {}
func (*LogLogin) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{2} }

func (m *LogLogin) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogLogin) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LogLogin) GetImei() string {
	if m != nil && m.Imei != nil {
		return *m.Imei
	}
	return ""
}

func (m *LogLogin) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogLogin) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogLogin) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogLogin) GetSystem() OSType {
	if m != nil && m.System != nil {
		return *m.System
	}
	return OSType_OST_Invalid
}

func (m *LogLogin) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *LogLogin) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *LogLogin) GetBirthTime() string {
	if m != nil && m.BirthTime != nil {
		return *m.BirthTime
	}
	return ""
}

// 流转日志
type LogTransfer struct {
	PlayerId         *int64          `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	TransferSource   *TransferSource `protobuf:"varint,2,req,name=TransferSource,enum=VK.Proto.TransferSource" json:"TransferSource,omitempty"`
	GameId           *int32          `protobuf:"varint,3,req,name=GameId" json:"GameId,omitempty"`
	Time             *string         `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	Props            []string        `protobuf:"bytes,5,rep,name=Props" json:"Props,omitempty"`
	GroupId          *int32          `protobuf:"varint,6,req,name=GroupId" json:"GroupId,omitempty"`
	VipLevel         *int64          `protobuf:"varint,7,opt,name=VipLevel" json:"VipLevel,omitempty"`
	EventType        *int32          `protobuf:"varint,8,opt,name=EventType" json:"EventType,omitempty"`
	SafeBoxCoin      *int64          `protobuf:"varint,9,opt,name=SafeBoxCoin" json:"SafeBoxCoin,omitempty"`
	EventDetailJson  *string         `protobuf:"bytes,10,opt,name=EventDetailJson" json:"EventDetailJson,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *LogTransfer) Reset()                    { *m = LogTransfer{} }
func (m *LogTransfer) String() string            { return proto.CompactTextString(m) }
func (*LogTransfer) ProtoMessage()               {}
func (*LogTransfer) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{3} }

func (m *LogTransfer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogTransfer) GetTransferSource() TransferSource {
	if m != nil && m.TransferSource != nil {
		return *m.TransferSource
	}
	return TransferSource_TS_Empty
}

func (m *LogTransfer) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogTransfer) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogTransfer) GetProps() []string {
	if m != nil {
		return m.Props
	}
	return nil
}

func (m *LogTransfer) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogTransfer) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogTransfer) GetEventType() int32 {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return 0
}

func (m *LogTransfer) GetSafeBoxCoin() int64 {
	if m != nil && m.SafeBoxCoin != nil {
		return *m.SafeBoxCoin
	}
	return 0
}

func (m *LogTransfer) GetEventDetailJson() string {
	if m != nil && m.EventDetailJson != nil {
		return *m.EventDetailJson
	}
	return ""
}

type BankCard struct {
	CardNumber       *string `protobuf:"bytes,1,req,name=CardNumber" json:"CardNumber,omitempty"`
	BankTime         *int64  `protobuf:"varint,2,req,name=BankTime" json:"BankTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BankCard) Reset()                    { *m = BankCard{} }
func (m *BankCard) String() string            { return proto.CompactTextString(m) }
func (*BankCard) ProtoMessage()               {}
func (*BankCard) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{4} }

func (m *BankCard) GetCardNumber() string {
	if m != nil && m.CardNumber != nil {
		return *m.CardNumber
	}
	return ""
}

func (m *BankCard) GetBankTime() int64 {
	if m != nil && m.BankTime != nil {
		return *m.BankTime
	}
	return 0
}

// 玩家信息
type LogPlayerCard struct {
	PlayerId         *int64      `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Cards            []*BankCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LogPlayerCard) Reset()                    { *m = LogPlayerCard{} }
func (m *LogPlayerCard) String() string            { return proto.CompactTextString(m) }
func (*LogPlayerCard) ProtoMessage()               {}
func (*LogPlayerCard) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{5} }

func (m *LogPlayerCard) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPlayerCard) GetCards() []*BankCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 支付日志
type LogPurchase struct {
	Id              *string             `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	PlayerId        *int64              `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty"`
	WareId          *string             `protobuf:"bytes,3,req,name=WareId" json:"WareId,omitempty"`
	Amount          *int64              `protobuf:"varint,4,req,name=Amount" json:"Amount,omitempty"`
	Channel         *EChannel           `protobuf:"varint,5,req,name=Channel,enum=VK.Proto.EChannel" json:"Channel,omitempty"`
	GameId          *int32              `protobuf:"varint,6,req,name=GameId" json:"GameId,omitempty"`
	Status          *EOrderStatus       `protobuf:"varint,7,req,name=Status,enum=VK.Proto.EOrderStatus" json:"Status,omitempty"`
	ExtData         *string             `protobuf:"bytes,8,req,name=ExtData" json:"ExtData,omitempty"`
	ErrorDetail     *string             `protobuf:"bytes,9,req,name=ErrorDetail" json:"ErrorDetail,omitempty"`
	Time            *string             `protobuf:"bytes,10,req,name=Time" json:"Time,omitempty"`
	Handled         *bool               `protobuf:"varint,11,req,name=Handled" json:"Handled,omitempty"`
	ClientExtraData *string             `protobuf:"bytes,12,req,name=ClientExtraData" json:"ClientExtraData,omitempty"`
	Rewards         []*PropExchangeData `protobuf:"bytes,13,rep,name=Rewards" json:"Rewards,omitempty"`
	ProductId       *string             `protobuf:"bytes,14,opt,name=ProductId" json:"ProductId,omitempty"`
	ExchangeWareId  *string             `protobuf:"bytes,15,opt,name=ExchangeWareId" json:"ExchangeWareId,omitempty"`
	// 新增字段以满足财务统计需求
	Chm              *int64  `protobuf:"varint,20,opt,name=Chm" json:"Chm,omitempty"`
	AdditionalChm    *int64  `protobuf:"varint,21,opt,name=AdditionalChm" json:"AdditionalChm,omitempty"`
	LeftChm          *int64  `protobuf:"varint,22,opt,name=LeftChm" json:"LeftChm,omitempty"`
	Fee              *int64  `protobuf:"varint,23,opt,name=Fee" json:"Fee,omitempty"`
	ExpireTime       *string `protobuf:"bytes,24,opt,name=ExpireTime" json:"ExpireTime,omitempty"`
	OS               *OSType `protobuf:"varint,25,opt,name=OS,enum=VK.Proto.OSType" json:"OS,omitempty"`
	PackageChn       *int32  `protobuf:"varint,26,opt,name=PackageChn" json:"PackageChn,omitempty"`
	IsReplaceOrder   *bool   `protobuf:"varint,27,opt,name=IsReplaceOrder" json:"IsReplaceOrder,omitempty"`
	IMEI             *string `protobuf:"bytes,28,opt,name=IMEI" json:"IMEI,omitempty"`
	SubChannel       *int32  `protobuf:"varint,29,opt,name=SubChannel" json:"SubChannel,omitempty"`
	Remark           *string `protobuf:"bytes,30,opt,name=Remark" json:"Remark,omitempty"`
	IP               *string `protobuf:"bytes,31,opt,name=IP" json:"IP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogPurchase) Reset()                    { *m = LogPurchase{} }
func (m *LogPurchase) String() string            { return proto.CompactTextString(m) }
func (*LogPurchase) ProtoMessage()               {}
func (*LogPurchase) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{6} }

func (m *LogPurchase) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *LogPurchase) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPurchase) GetWareId() string {
	if m != nil && m.WareId != nil {
		return *m.WareId
	}
	return ""
}

func (m *LogPurchase) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogPurchase) GetChannel() EChannel {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return EChannel_EC_Invalid
}

func (m *LogPurchase) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogPurchase) GetStatus() EOrderStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EOrderStatus_EOS_Invalid
}

func (m *LogPurchase) GetExtData() string {
	if m != nil && m.ExtData != nil {
		return *m.ExtData
	}
	return ""
}

func (m *LogPurchase) GetErrorDetail() string {
	if m != nil && m.ErrorDetail != nil {
		return *m.ErrorDetail
	}
	return ""
}

func (m *LogPurchase) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogPurchase) GetHandled() bool {
	if m != nil && m.Handled != nil {
		return *m.Handled
	}
	return false
}

func (m *LogPurchase) GetClientExtraData() string {
	if m != nil && m.ClientExtraData != nil {
		return *m.ClientExtraData
	}
	return ""
}

func (m *LogPurchase) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogPurchase) GetProductId() string {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return ""
}

func (m *LogPurchase) GetExchangeWareId() string {
	if m != nil && m.ExchangeWareId != nil {
		return *m.ExchangeWareId
	}
	return ""
}

func (m *LogPurchase) GetChm() int64 {
	if m != nil && m.Chm != nil {
		return *m.Chm
	}
	return 0
}

func (m *LogPurchase) GetAdditionalChm() int64 {
	if m != nil && m.AdditionalChm != nil {
		return *m.AdditionalChm
	}
	return 0
}

func (m *LogPurchase) GetLeftChm() int64 {
	if m != nil && m.LeftChm != nil {
		return *m.LeftChm
	}
	return 0
}

func (m *LogPurchase) GetFee() int64 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

func (m *LogPurchase) GetExpireTime() string {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return ""
}

func (m *LogPurchase) GetOS() OSType {
	if m != nil && m.OS != nil {
		return *m.OS
	}
	return OSType_OST_Invalid
}

func (m *LogPurchase) GetPackageChn() int32 {
	if m != nil && m.PackageChn != nil {
		return *m.PackageChn
	}
	return 0
}

func (m *LogPurchase) GetIsReplaceOrder() bool {
	if m != nil && m.IsReplaceOrder != nil {
		return *m.IsReplaceOrder
	}
	return false
}

func (m *LogPurchase) GetIMEI() string {
	if m != nil && m.IMEI != nil {
		return *m.IMEI
	}
	return ""
}

func (m *LogPurchase) GetSubChannel() int32 {
	if m != nil && m.SubChannel != nil {
		return *m.SubChannel
	}
	return 0
}

func (m *LogPurchase) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogPurchase) GetIP() string {
	if m != nil && m.IP != nil {
		return *m.IP
	}
	return ""
}

// 在线日志
type LogOnline struct {
	GameId           *int32  `protobuf:"varint,1,req,name=GameId" json:"GameId,omitempty"`
	Count            *int32  `protobuf:"varint,2,req,name=Count" json:"Count,omitempty"`
	Time             *string `protobuf:"bytes,3,req,name=Time" json:"Time,omitempty"`
	GroupId          *int32  `protobuf:"varint,4,req,name=GroupId" json:"GroupId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogOnline) Reset()                    { *m = LogOnline{} }
func (m *LogOnline) String() string            { return proto.CompactTextString(m) }
func (*LogOnline) ProtoMessage()               {}
func (*LogOnline) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{7} }

func (m *LogOnline) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogOnline) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogOnline) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogOnline) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

// 在线时长日志
type LogOnlineTime struct {
	GameId           *int32  `protobuf:"varint,1,req,name=GameId" json:"GameId,omitempty"`
	PlayerId         *int64  `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty"`
	OnlineTime       *string `protobuf:"bytes,3,req,name=OnlineTime" json:"OnlineTime,omitempty"`
	OfflineTime      *string `protobuf:"bytes,4,req,name=OfflineTime" json:"OfflineTime,omitempty"`
	GroupId          *int32  `protobuf:"varint,5,req,name=GroupId" json:"GroupId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogOnlineTime) Reset()                    { *m = LogOnlineTime{} }
func (m *LogOnlineTime) String() string            { return proto.CompactTextString(m) }
func (*LogOnlineTime) ProtoMessage()               {}
func (*LogOnlineTime) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{8} }

func (m *LogOnlineTime) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogOnlineTime) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogOnlineTime) GetOnlineTime() string {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return ""
}

func (m *LogOnlineTime) GetOfflineTime() string {
	if m != nil && m.OfflineTime != nil {
		return *m.OfflineTime
	}
	return ""
}

func (m *LogOnlineTime) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

// 交易日志
type LogTrade struct {
	From             *int64  `protobuf:"varint,1,req,name=From" json:"From,omitempty"`
	To               *int64  `protobuf:"varint,2,req,name=To" json:"To,omitempty"`
	Amount           *int64  `protobuf:"varint,3,req,name=Amount" json:"Amount,omitempty"`
	Time             *string `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	Tax              *int64  `protobuf:"varint,5,req,name=Tax" json:"Tax,omitempty"`
	TradeType        *int32  `protobuf:"varint,6,opt,name=TradeType" json:"TradeType,omitempty"`
	FromVip          *int64  `protobuf:"varint,7,opt,name=FromVip" json:"FromVip,omitempty"`
	ToVip            *int64  `protobuf:"varint,8,opt,name=ToVip" json:"ToVip,omitempty"`
	FromChan         *int32  `protobuf:"varint,9,opt,name=FromChan" json:"FromChan,omitempty"`
	ToChan           *int32  `protobuf:"varint,10,opt,name=ToChan" json:"ToChan,omitempty"`
	AgentRevenue     *int64  `protobuf:"varint,11,opt,name=AgentRevenue" json:"AgentRevenue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogTrade) Reset()                    { *m = LogTrade{} }
func (m *LogTrade) String() string            { return proto.CompactTextString(m) }
func (*LogTrade) ProtoMessage()               {}
func (*LogTrade) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{9} }

func (m *LogTrade) GetFrom() int64 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *LogTrade) GetTo() int64 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

func (m *LogTrade) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogTrade) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogTrade) GetTax() int64 {
	if m != nil && m.Tax != nil {
		return *m.Tax
	}
	return 0
}

func (m *LogTrade) GetTradeType() int32 {
	if m != nil && m.TradeType != nil {
		return *m.TradeType
	}
	return 0
}

func (m *LogTrade) GetFromVip() int64 {
	if m != nil && m.FromVip != nil {
		return *m.FromVip
	}
	return 0
}

func (m *LogTrade) GetToVip() int64 {
	if m != nil && m.ToVip != nil {
		return *m.ToVip
	}
	return 0
}

func (m *LogTrade) GetFromChan() int32 {
	if m != nil && m.FromChan != nil {
		return *m.FromChan
	}
	return 0
}

func (m *LogTrade) GetToChan() int32 {
	if m != nil && m.ToChan != nil {
		return *m.ToChan
	}
	return 0
}

func (m *LogTrade) GetAgentRevenue() int64 {
	if m != nil && m.AgentRevenue != nil {
		return *m.AgentRevenue
	}
	return 0
}

// 封号日志
type LogForbidden struct {
	Id               []string `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
	Why              *string  `protobuf:"bytes,2,req,name=Why" json:"Why,omitempty"`
	Duration         *int32   `protobuf:"varint,3,req,name=Duration" json:"Duration,omitempty"`
	Remark           *string  `protobuf:"bytes,4,req,name=Remark" json:"Remark,omitempty"`
	OpBy             *string  `protobuf:"bytes,5,req,name=OpBy" json:"OpBy,omitempty"`
	StartAt          *string  `protobuf:"bytes,6,req,name=StartAt" json:"StartAt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogForbidden) Reset()                    { *m = LogForbidden{} }
func (m *LogForbidden) String() string            { return proto.CompactTextString(m) }
func (*LogForbidden) ProtoMessage()               {}
func (*LogForbidden) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{10} }

func (m *LogForbidden) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogForbidden) GetWhy() string {
	if m != nil && m.Why != nil {
		return *m.Why
	}
	return ""
}

func (m *LogForbidden) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *LogForbidden) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogForbidden) GetOpBy() string {
	if m != nil && m.OpBy != nil {
		return *m.OpBy
	}
	return ""
}

func (m *LogForbidden) GetStartAt() string {
	if m != nil && m.StartAt != nil {
		return *m.StartAt
	}
	return ""
}

// 注册日志
type LogRegister struct {
	PlayerId         *int64        `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Ip               *string       `protobuf:"bytes,2,req,name=Ip" json:"Ip,omitempty"`
	Imei             *string       `protobuf:"bytes,3,req,name=Imei" json:"Imei,omitempty"`
	Time             *string       `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	Type             *RegisterType `protobuf:"varint,5,req,name=Type,enum=VK.Proto.RegisterType" json:"Type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LogRegister) Reset()                    { *m = LogRegister{} }
func (m *LogRegister) String() string            { return proto.CompactTextString(m) }
func (*LogRegister) ProtoMessage()               {}
func (*LogRegister) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{11} }

func (m *LogRegister) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogRegister) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *LogRegister) GetImei() string {
	if m != nil && m.Imei != nil {
		return *m.Imei
	}
	return ""
}

func (m *LogRegister) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogRegister) GetType() RegisterType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RegisterType_RT_Invalid
}

// 邮件日志
type LogMail struct {
	Id                *string             `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	GMailId           *string             `protobuf:"bytes,2,opt,name=GMailId" json:"GMailId,omitempty"`
	PlayerId          *int64              `protobuf:"varint,3,req,name=PlayerId" json:"PlayerId,omitempty"`
	From              *string             `protobuf:"bytes,4,req,name=From" json:"From,omitempty"`
	Title             *string             `protobuf:"bytes,5,req,name=Title" json:"Title,omitempty"`
	Content           *string             `protobuf:"bytes,6,req,name=Content" json:"Content,omitempty"`
	CreateTime        *string             `protobuf:"bytes,7,req,name=CreateTime" json:"CreateTime,omitempty"`
	ExpireTime        *string             `protobuf:"bytes,8,req,name=ExpireTime" json:"ExpireTime,omitempty"`
	AttachmentsTook   *bool               `protobuf:"varint,9,req,name=AttachmentsTook" json:"AttachmentsTook,omitempty"`
	CreateTimeStamp   *int64              `protobuf:"varint,10,req,name=CreateTimeStamp" json:"CreateTimeStamp,omitempty"`
	Attachments       []*PropExchangeData `protobuf:"bytes,11,rep,name=Attachments" json:"Attachments,omitempty"`
	ExtraData         *string             `protobuf:"bytes,12,opt,name=ExtraData" json:"ExtraData,omitempty"`
	FromPlayerId      *int64              `protobuf:"varint,13,opt,name=FromPlayerId" json:"FromPlayerId,omitempty"`
	AttachmentsSource *TransferSource     `protobuf:"varint,14,opt,name=AttachmentsSource,enum=VK.Proto.TransferSource" json:"AttachmentsSource,omitempty"`
	TookTime          *string             `protobuf:"bytes,15,opt,name=TookTime" json:"TookTime,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *LogMail) Reset()                    { *m = LogMail{} }
func (m *LogMail) String() string            { return proto.CompactTextString(m) }
func (*LogMail) ProtoMessage()               {}
func (*LogMail) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{12} }

func (m *LogMail) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *LogMail) GetGMailId() string {
	if m != nil && m.GMailId != nil {
		return *m.GMailId
	}
	return ""
}

func (m *LogMail) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogMail) GetFrom() string {
	if m != nil && m.From != nil {
		return *m.From
	}
	return ""
}

func (m *LogMail) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *LogMail) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *LogMail) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *LogMail) GetExpireTime() string {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return ""
}

func (m *LogMail) GetAttachmentsTook() bool {
	if m != nil && m.AttachmentsTook != nil {
		return *m.AttachmentsTook
	}
	return false
}

func (m *LogMail) GetCreateTimeStamp() int64 {
	if m != nil && m.CreateTimeStamp != nil {
		return *m.CreateTimeStamp
	}
	return 0
}

func (m *LogMail) GetAttachments() []*PropExchangeData {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *LogMail) GetExtraData() string {
	if m != nil && m.ExtraData != nil {
		return *m.ExtraData
	}
	return ""
}

func (m *LogMail) GetFromPlayerId() int64 {
	if m != nil && m.FromPlayerId != nil {
		return *m.FromPlayerId
	}
	return 0
}

func (m *LogMail) GetAttachmentsSource() TransferSource {
	if m != nil && m.AttachmentsSource != nil {
		return *m.AttachmentsSource
	}
	return TransferSource_TS_Empty
}

func (m *LogMail) GetTookTime() string {
	if m != nil && m.TookTime != nil {
		return *m.TookTime
	}
	return ""
}

// 在线时长奖励日志
type LogOnlineReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	PlayerType       *int32              `protobuf:"varint,5,opt,name=PlayerType" json:"PlayerType,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogOnlineReward) Reset()                    { *m = LogOnlineReward{} }
func (m *LogOnlineReward) String() string            { return proto.CompactTextString(m) }
func (*LogOnlineReward) ProtoMessage()               {}
func (*LogOnlineReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{13} }

func (m *LogOnlineReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogOnlineReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogOnlineReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogOnlineReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *LogOnlineReward) GetPlayerType() int32 {
	if m != nil && m.PlayerType != nil {
		return *m.PlayerType
	}
	return 0
}

// 彩票开奖日志
type LogLottery struct {
	Issue            *string `protobuf:"bytes,1,req,name=Issue" json:"Issue,omitempty"`
	LotteryNumber    *string `protobuf:"bytes,2,req,name=LotteryNumber" json:"LotteryNumber,omitempty"`
	Price            *int64  `protobuf:"varint,3,req,name=Price" json:"Price,omitempty"`
	LotteryState     *int32  `protobuf:"varint,4,req,name=LotteryState" json:"LotteryState,omitempty"`
	PurchaseTime     *int64  `protobuf:"varint,5,req,name=PurchaseTime" json:"PurchaseTime,omitempty"`
	EffectiveTime    *int64  `protobuf:"varint,6,req,name=EffectiveTime" json:"EffectiveTime,omitempty"`
	HitRewardNum     *int64  `protobuf:"varint,7,req,name=HitRewardNum" json:"HitRewardNum,omitempty"`
	PlayerID         *int64  `protobuf:"varint,8,req,name=PlayerID" json:"PlayerID,omitempty"`
	NickName         *string `protobuf:"bytes,9,req,name=NickName" json:"NickName,omitempty"`
	Portrait         *string `protobuf:"bytes,10,req,name=Portrait" json:"Portrait,omitempty"`
	VipLevel         *int32  `protobuf:"varint,11,req,name=VipLevel" json:"VipLevel,omitempty"`
	PurchaseNum      *int32  `protobuf:"varint,12,req,name=PurchaseNum" json:"PurchaseNum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogLottery) Reset()                    { *m = LogLottery{} }
func (m *LogLottery) String() string            { return proto.CompactTextString(m) }
func (*LogLottery) ProtoMessage()               {}
func (*LogLottery) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{14} }

func (m *LogLottery) GetIssue() string {
	if m != nil && m.Issue != nil {
		return *m.Issue
	}
	return ""
}

func (m *LogLottery) GetLotteryNumber() string {
	if m != nil && m.LotteryNumber != nil {
		return *m.LotteryNumber
	}
	return ""
}

func (m *LogLottery) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *LogLottery) GetLotteryState() int32 {
	if m != nil && m.LotteryState != nil {
		return *m.LotteryState
	}
	return 0
}

func (m *LogLottery) GetPurchaseTime() int64 {
	if m != nil && m.PurchaseTime != nil {
		return *m.PurchaseTime
	}
	return 0
}

func (m *LogLottery) GetEffectiveTime() int64 {
	if m != nil && m.EffectiveTime != nil {
		return *m.EffectiveTime
	}
	return 0
}

func (m *LogLottery) GetHitRewardNum() int64 {
	if m != nil && m.HitRewardNum != nil {
		return *m.HitRewardNum
	}
	return 0
}

func (m *LogLottery) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogLottery) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *LogLottery) GetPortrait() string {
	if m != nil && m.Portrait != nil {
		return *m.Portrait
	}
	return ""
}

func (m *LogLottery) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogLottery) GetPurchaseNum() int32 {
	if m != nil && m.PurchaseNum != nil {
		return *m.PurchaseNum
	}
	return 0
}

// bydld 中奖日志
type LogBYDLDJackpotWinners struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	GroupId          *int32 `protobuf:"varint,2,req,name=GroupId" json:"GroupId,omitempty"`
	PoolId           *int32 `protobuf:"varint,3,req,name=PoolId" json:"PoolId,omitempty"`
	Ratio            *int32 `protobuf:"varint,4,req,name=Ratio" json:"Ratio,omitempty"`
	Award            *int64 `protobuf:"varint,5,req,name=Award" json:"Award,omitempty"`
	LoseMoney        *int64 `protobuf:"varint,6,req,name=LoseMoney" json:"LoseMoney,omitempty"`
	PoolMoney        *int64 `protobuf:"varint,7,req,name=PoolMoney" json:"PoolMoney,omitempty"`
	GameId           *int32 `protobuf:"varint,8,req,name=GameId" json:"GameId,omitempty"`
	Type             *int32 `protobuf:"varint,9,req,name=Type" json:"Type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogBYDLDJackpotWinners) Reset()                    { *m = LogBYDLDJackpotWinners{} }
func (m *LogBYDLDJackpotWinners) String() string            { return proto.CompactTextString(m) }
func (*LogBYDLDJackpotWinners) ProtoMessage()               {}
func (*LogBYDLDJackpotWinners) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{15} }

func (m *LogBYDLDJackpotWinners) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetPoolId() int32 {
	if m != nil && m.PoolId != nil {
		return *m.PoolId
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetRatio() int32 {
	if m != nil && m.Ratio != nil {
		return *m.Ratio
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetAward() int64 {
	if m != nil && m.Award != nil {
		return *m.Award
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetLoseMoney() int64 {
	if m != nil && m.LoseMoney != nil {
		return *m.LoseMoney
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetPoolMoney() int64 {
	if m != nil && m.PoolMoney != nil {
		return *m.PoolMoney
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogBYDLDJackpotWinners) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// Dummy 比赛房报名日志
type LogDummyMatchWinners struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	MatchId          *int32 `protobuf:"varint,2,req,name=MatchId" json:"MatchId,omitempty"`
	MatchType        *int32 `protobuf:"varint,3,req,name=MatchType" json:"MatchType,omitempty"`
	BeginTimestamp   *int64 `protobuf:"varint,4,req,name=BeginTimestamp" json:"BeginTimestamp,omitempty"`
	Cost             *int64 `protobuf:"varint,5,req,name=Cost" json:"Cost,omitempty"`
	ChipGet          *int64 `protobuf:"varint,6,req,name=ChipGet" json:"ChipGet,omitempty"`
	DiamondGet       *int64 `protobuf:"varint,7,req,name=DiamondGet" json:"DiamondGet,omitempty"`
	Rank             *int64 `protobuf:"varint,8,req,name=Rank" json:"Rank,omitempty"`
	GiftVoucherGet   *int64 `protobuf:"varint,9,opt,name=GiftVoucherGet" json:"GiftVoucherGet,omitempty"`
	PropId           *int32 `protobuf:"varint,10,opt,name=PropId" json:"PropId,omitempty"`
	Count            *int64 `protobuf:"varint,11,opt,name=Count" json:"Count,omitempty"`
	Type             *int32 `protobuf:"varint,12,opt,name=Type" json:"Type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogDummyMatchWinners) Reset()                    { *m = LogDummyMatchWinners{} }
func (m *LogDummyMatchWinners) String() string            { return proto.CompactTextString(m) }
func (*LogDummyMatchWinners) ProtoMessage()               {}
func (*LogDummyMatchWinners) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{16} }

func (m *LogDummyMatchWinners) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogDummyMatchWinners) GetMatchId() int32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *LogDummyMatchWinners) GetMatchType() int32 {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return 0
}

func (m *LogDummyMatchWinners) GetBeginTimestamp() int64 {
	if m != nil && m.BeginTimestamp != nil {
		return *m.BeginTimestamp
	}
	return 0
}

func (m *LogDummyMatchWinners) GetCost() int64 {
	if m != nil && m.Cost != nil {
		return *m.Cost
	}
	return 0
}

func (m *LogDummyMatchWinners) GetChipGet() int64 {
	if m != nil && m.ChipGet != nil {
		return *m.ChipGet
	}
	return 0
}

func (m *LogDummyMatchWinners) GetDiamondGet() int64 {
	if m != nil && m.DiamondGet != nil {
		return *m.DiamondGet
	}
	return 0
}

func (m *LogDummyMatchWinners) GetRank() int64 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *LogDummyMatchWinners) GetGiftVoucherGet() int64 {
	if m != nil && m.GiftVoucherGet != nil {
		return *m.GiftVoucherGet
	}
	return 0
}

func (m *LogDummyMatchWinners) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogDummyMatchWinners) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogDummyMatchWinners) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

// 限时登录奖励日志
type LogLoginReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogLoginReward) Reset()                    { *m = LogLoginReward{} }
func (m *LogLoginReward) String() string            { return proto.CompactTextString(m) }
func (*LogLoginReward) ProtoMessage()               {}
func (*LogLoginReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{17} }

func (m *LogLoginReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogLoginReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogLoginReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// 元旦活动奖励日志
type LogNewYearReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogNewYearReward) Reset()                    { *m = LogNewYearReward{} }
func (m *LogNewYearReward) String() string            { return proto.CompactTextString(m) }
func (*LogNewYearReward) ProtoMessage()               {}
func (*LogNewYearReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{18} }

func (m *LogNewYearReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogNewYearReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogNewYearReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogNewYearReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

// 春节活动奖励日志
type LogFestivalReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogFestivalReward) Reset()                    { *m = LogFestivalReward{} }
func (m *LogFestivalReward) String() string            { return proto.CompactTextString(m) }
func (*LogFestivalReward) ProtoMessage()               {}
func (*LogFestivalReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{19} }

func (m *LogFestivalReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogFestivalReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogFestivalReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogFestivalReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

// 泼水节活动奖励日志
type LogSplashWaterReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	VipLevel         *int64              `protobuf:"varint,4,opt,name=VipLevel" json:"VipLevel,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogSplashWaterReward) Reset()                    { *m = LogSplashWaterReward{} }
func (m *LogSplashWaterReward) String() string            { return proto.CompactTextString(m) }
func (*LogSplashWaterReward) ProtoMessage()               {}
func (*LogSplashWaterReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{20} }

func (m *LogSplashWaterReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogSplashWaterReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogSplashWaterReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogSplashWaterReward) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 奖池数量变化日志
type LogRewardPool struct {
	GameId           *int32              `protobuf:"varint,1,req,name=GameId" json:"GameId,omitempty"`
	GroupId          *int32              `protobuf:"varint,2,req,name=GroupId" json:"GroupId,omitempty"`
	ServerId         *string             `protobuf:"bytes,3,req,name=ServerId" json:"ServerId,omitempty"`
	TransferSource   *TransferSource     `protobuf:"varint,4,req,name=TransferSource,enum=VK.Proto.TransferSource" json:"TransferSource,omitempty"`
	Time             *string             `protobuf:"bytes,5,req,name=Time" json:"Time,omitempty"`
	Changes          []*PropExchangeData `protobuf:"bytes,6,rep,name=Changes" json:"Changes,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogRewardPool) Reset()                    { *m = LogRewardPool{} }
func (m *LogRewardPool) String() string            { return proto.CompactTextString(m) }
func (*LogRewardPool) ProtoMessage()               {}
func (*LogRewardPool) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{21} }

func (m *LogRewardPool) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogRewardPool) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogRewardPool) GetServerId() string {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return ""
}

func (m *LogRewardPool) GetTransferSource() TransferSource {
	if m != nil && m.TransferSource != nil {
		return *m.TransferSource
	}
	return TransferSource_TS_Empty
}

func (m *LogRewardPool) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogRewardPool) GetChanges() []*PropExchangeData {
	if m != nil {
		return m.Changes
	}
	return nil
}

// 冻结账号日志
type LogFreezeAccount struct {
	Id               []string `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
	Why              *string  `protobuf:"bytes,2,req,name=Why" json:"Why,omitempty"`
	Duration         *int32   `protobuf:"varint,3,req,name=Duration" json:"Duration,omitempty"`
	Remark           *string  `protobuf:"bytes,4,req,name=Remark" json:"Remark,omitempty"`
	OpBy             *string  `protobuf:"bytes,5,req,name=OpBy" json:"OpBy,omitempty"`
	StartAt          *string  `protobuf:"bytes,6,req,name=StartAt" json:"StartAt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogFreezeAccount) Reset()                    { *m = LogFreezeAccount{} }
func (m *LogFreezeAccount) String() string            { return proto.CompactTextString(m) }
func (*LogFreezeAccount) ProtoMessage()               {}
func (*LogFreezeAccount) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{22} }

func (m *LogFreezeAccount) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogFreezeAccount) GetWhy() string {
	if m != nil && m.Why != nil {
		return *m.Why
	}
	return ""
}

func (m *LogFreezeAccount) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *LogFreezeAccount) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogFreezeAccount) GetOpBy() string {
	if m != nil && m.OpBy != nil {
		return *m.OpBy
	}
	return ""
}

func (m *LogFreezeAccount) GetStartAt() string {
	if m != nil && m.StartAt != nil {
		return *m.StartAt
	}
	return ""
}

// 暗补日志
type LogSupply struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	ChipCount        *int64 `protobuf:"varint,2,req,name=ChipCount" json:"ChipCount,omitempty"`
	VipLevel         *int32 `protobuf:"varint,3,req,name=VipLevel" json:"VipLevel,omitempty"`
	ChengtuoCount    *int64 `protobuf:"varint,4,req,name=ChengtuoCount" json:"ChengtuoCount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogSupply) Reset()                    { *m = LogSupply{} }
func (m *LogSupply) String() string            { return proto.CompactTextString(m) }
func (*LogSupply) ProtoMessage()               {}
func (*LogSupply) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{23} }

func (m *LogSupply) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogSupply) GetChipCount() int64 {
	if m != nil && m.ChipCount != nil {
		return *m.ChipCount
	}
	return 0
}

func (m *LogSupply) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogSupply) GetChengtuoCount() int64 {
	if m != nil && m.ChengtuoCount != nil {
		return *m.ChengtuoCount
	}
	return 0
}

// 7日签到奖励日志
type LogSevenDaysSignReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogSevenDaysSignReward) Reset()                    { *m = LogSevenDaysSignReward{} }
func (m *LogSevenDaysSignReward) String() string            { return proto.CompactTextString(m) }
func (*LogSevenDaysSignReward) ProtoMessage()               {}
func (*LogSevenDaysSignReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{24} }

func (m *LogSevenDaysSignReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogSevenDaysSignReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogSevenDaysSignReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogSevenDaysSignReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

// 后台更新实物库存日志
type LogUpdatePhysicalGoods struct {
	Goods            []*PhysicalGoodsChanged `protobuf:"bytes,1,rep,name=Goods" json:"Goods,omitempty"`
	Reason           *string                 `protobuf:"bytes,2,req,name=Reason" json:"Reason,omitempty"`
	Remark           *string                 `protobuf:"bytes,3,req,name=Remark" json:"Remark,omitempty"`
	OpBy             *string                 `protobuf:"bytes,4,opt,name=OpBy" json:"OpBy,omitempty"`
	Time             *string                 `protobuf:"bytes,5,req,name=Time" json:"Time,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LogUpdatePhysicalGoods) Reset()                    { *m = LogUpdatePhysicalGoods{} }
func (m *LogUpdatePhysicalGoods) String() string            { return proto.CompactTextString(m) }
func (*LogUpdatePhysicalGoods) ProtoMessage()               {}
func (*LogUpdatePhysicalGoods) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{25} }

func (m *LogUpdatePhysicalGoods) GetGoods() []*PhysicalGoodsChanged {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *LogUpdatePhysicalGoods) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *LogUpdatePhysicalGoods) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogUpdatePhysicalGoods) GetOpBy() string {
	if m != nil && m.OpBy != nil {
		return *m.OpBy
	}
	return ""
}

func (m *LogUpdatePhysicalGoods) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

// 每日转盘奖励日志
type LogDailySpinReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	RewardType       *int32              `protobuf:"varint,5,req,name=RewardType" json:"RewardType,omitempty"`
	JackpotPer       *int32              `protobuf:"varint,6,opt,name=JackpotPer" json:"JackpotPer,omitempty"`
	CostType         *int32              `protobuf:"varint,7,opt,name=CostType" json:"CostType,omitempty"`
	CostCount        *int64              `protobuf:"varint,8,opt,name=CostCount" json:"CostCount,omitempty"`
	VipLevel         *int64              `protobuf:"varint,9,opt,name=VipLevel" json:"VipLevel,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogDailySpinReward) Reset()                    { *m = LogDailySpinReward{} }
func (m *LogDailySpinReward) String() string            { return proto.CompactTextString(m) }
func (*LogDailySpinReward) ProtoMessage()               {}
func (*LogDailySpinReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{26} }

func (m *LogDailySpinReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogDailySpinReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogDailySpinReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogDailySpinReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *LogDailySpinReward) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *LogDailySpinReward) GetJackpotPer() int32 {
	if m != nil && m.JackpotPer != nil {
		return *m.JackpotPer
	}
	return 0
}

func (m *LogDailySpinReward) GetCostType() int32 {
	if m != nil && m.CostType != nil {
		return *m.CostType
	}
	return 0
}

func (m *LogDailySpinReward) GetCostCount() int64 {
	if m != nil && m.CostCount != nil {
		return *m.CostCount
	}
	return 0
}

func (m *LogDailySpinReward) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 幸运转盘老虎机奖励日志
type LogLuckyTurntableReward struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string             `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	Rewards          []*PropExchangeData `protobuf:"bytes,3,rep,name=Rewards" json:"Rewards,omitempty"`
	RewardId         *int32              `protobuf:"varint,4,req,name=RewardId" json:"RewardId,omitempty"`
	RewardType       *int32              `protobuf:"varint,5,req,name=RewardType" json:"RewardType,omitempty"`
	JackpotPer       *int32              `protobuf:"varint,6,opt,name=JackpotPer" json:"JackpotPer,omitempty"`
	CostType         *int32              `protobuf:"varint,7,opt,name=CostType" json:"CostType,omitempty"`
	CostCount        *int64              `protobuf:"varint,8,opt,name=CostCount" json:"CostCount,omitempty"`
	VipLevel         *int64              `protobuf:"varint,9,opt,name=VipLevel" json:"VipLevel,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogLuckyTurntableReward) Reset()                    { *m = LogLuckyTurntableReward{} }
func (m *LogLuckyTurntableReward) String() string            { return proto.CompactTextString(m) }
func (*LogLuckyTurntableReward) ProtoMessage()               {}
func (*LogLuckyTurntableReward) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{27} }

func (m *LogLuckyTurntableReward) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogLuckyTurntableReward) GetRewards() []*PropExchangeData {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *LogLuckyTurntableReward) GetRewardId() int32 {
	if m != nil && m.RewardId != nil {
		return *m.RewardId
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetRewardType() int32 {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetJackpotPer() int32 {
	if m != nil && m.JackpotPer != nil {
		return *m.JackpotPer
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetCostType() int32 {
	if m != nil && m.CostType != nil {
		return *m.CostType
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetCostCount() int64 {
	if m != nil && m.CostCount != nil {
		return *m.CostCount
	}
	return 0
}

func (m *LogLuckyTurntableReward) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 禁言账号日志
type LogSilentAccount struct {
	Id               []string `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
	Why              *string  `protobuf:"bytes,2,req,name=Why" json:"Why,omitempty"`
	Duration         *int32   `protobuf:"varint,3,req,name=Duration" json:"Duration,omitempty"`
	Remark           *string  `protobuf:"bytes,4,req,name=Remark" json:"Remark,omitempty"`
	OpBy             *string  `protobuf:"bytes,5,req,name=OpBy" json:"OpBy,omitempty"`
	StartAt          *string  `protobuf:"bytes,6,req,name=StartAt" json:"StartAt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogSilentAccount) Reset()                    { *m = LogSilentAccount{} }
func (m *LogSilentAccount) String() string            { return proto.CompactTextString(m) }
func (*LogSilentAccount) ProtoMessage()               {}
func (*LogSilentAccount) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{28} }

func (m *LogSilentAccount) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogSilentAccount) GetWhy() string {
	if m != nil && m.Why != nil {
		return *m.Why
	}
	return ""
}

func (m *LogSilentAccount) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *LogSilentAccount) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogSilentAccount) GetOpBy() string {
	if m != nil && m.OpBy != nil {
		return *m.OpBy
	}
	return ""
}

func (m *LogSilentAccount) GetStartAt() string {
	if m != nil && m.StartAt != nil {
		return *m.StartAt
	}
	return ""
}

// 筹码补齐日志
type LogChipReplenish struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	PropId           *int32  `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	Count            *int64  `protobuf:"varint,4,req,name=Count" json:"Count,omitempty"`
	VipLevel         *int64  `protobuf:"varint,5,req,name=VipLevel" json:"VipLevel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogChipReplenish) Reset()                    { *m = LogChipReplenish{} }
func (m *LogChipReplenish) String() string            { return proto.CompactTextString(m) }
func (*LogChipReplenish) ProtoMessage()               {}
func (*LogChipReplenish) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{29} }

func (m *LogChipReplenish) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogChipReplenish) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogChipReplenish) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogChipReplenish) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogChipReplenish) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 黑名单账号日志
type LogBlackAccount struct {
	Id               []string `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
	Why              *string  `protobuf:"bytes,2,req,name=Why" json:"Why,omitempty"`
	Duration         *int32   `protobuf:"varint,3,req,name=Duration" json:"Duration,omitempty"`
	Remark           *string  `protobuf:"bytes,4,req,name=Remark" json:"Remark,omitempty"`
	OpBy             *string  `protobuf:"bytes,5,req,name=OpBy" json:"OpBy,omitempty"`
	StartAt          *string  `protobuf:"bytes,6,req,name=StartAt" json:"StartAt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LogBlackAccount) Reset()                    { *m = LogBlackAccount{} }
func (m *LogBlackAccount) String() string            { return proto.CompactTextString(m) }
func (*LogBlackAccount) ProtoMessage()               {}
func (*LogBlackAccount) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{30} }

func (m *LogBlackAccount) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogBlackAccount) GetWhy() string {
	if m != nil && m.Why != nil {
		return *m.Why
	}
	return ""
}

func (m *LogBlackAccount) GetDuration() int32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *LogBlackAccount) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogBlackAccount) GetOpBy() string {
	if m != nil && m.OpBy != nil {
		return *m.OpBy
	}
	return ""
}

func (m *LogBlackAccount) GetStartAt() string {
	if m != nil && m.StartAt != nil {
		return *m.StartAt
	}
	return ""
}

// ApplePay 收据日志
type LogReceipt struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	ReceiptData      *string `protobuf:"bytes,2,req,name=ReceiptData" json:"ReceiptData,omitempty"`
	ReceiptHash      *string `protobuf:"bytes,3,req,name=ReceiptHash" json:"ReceiptHash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogReceipt) Reset()                    { *m = LogReceipt{} }
func (m *LogReceipt) String() string            { return proto.CompactTextString(m) }
func (*LogReceipt) ProtoMessage()               {}
func (*LogReceipt) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{31} }

func (m *LogReceipt) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogReceipt) GetReceiptData() string {
	if m != nil && m.ReceiptData != nil {
		return *m.ReceiptData
	}
	return ""
}

func (m *LogReceipt) GetReceiptHash() string {
	if m != nil && m.ReceiptHash != nil {
		return *m.ReceiptHash
	}
	return ""
}

// 在线福利日志
type LogOnlineWelfare struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	PropId           *int32  `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	Count            *int64  `protobuf:"varint,4,req,name=Count" json:"Count,omitempty"`
	VipLevel         *int64  `protobuf:"varint,5,req,name=VipLevel" json:"VipLevel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogOnlineWelfare) Reset()                    { *m = LogOnlineWelfare{} }
func (m *LogOnlineWelfare) String() string            { return proto.CompactTextString(m) }
func (*LogOnlineWelfare) ProtoMessage()               {}
func (*LogOnlineWelfare) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{32} }

func (m *LogOnlineWelfare) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogOnlineWelfare) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogOnlineWelfare) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogOnlineWelfare) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogOnlineWelfare) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

// 水灯节日志
type LogWaterLampWish struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	PropId           *int32  `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	Count            *int64  `protobuf:"varint,4,req,name=Count" json:"Count,omitempty"`
	VipLevel         *int64  `protobuf:"varint,5,req,name=VipLevel" json:"VipLevel,omitempty"`
	Type             *int32  `protobuf:"varint,6,req,name=Type" json:"Type,omitempty"`
	Score            *int64  `protobuf:"varint,7,req,name=Score" json:"Score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogWaterLampWish) Reset()                    { *m = LogWaterLampWish{} }
func (m *LogWaterLampWish) String() string            { return proto.CompactTextString(m) }
func (*LogWaterLampWish) ProtoMessage()               {}
func (*LogWaterLampWish) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{33} }

func (m *LogWaterLampWish) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogWaterLampWish) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogWaterLampWish) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogWaterLampWish) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogWaterLampWish) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogWaterLampWish) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *LogWaterLampWish) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// 大象储金罐日志
type LogElephantPiggy struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	PropId           *int32  `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	Count            *int64  `protobuf:"varint,4,req,name=Count" json:"Count,omitempty"`
	VipLevel         *int64  `protobuf:"varint,5,req,name=VipLevel" json:"VipLevel,omitempty"`
	Type             *int32  `protobuf:"varint,6,req,name=Type" json:"Type,omitempty"`
	BuyType          *int32  `protobuf:"varint,7,opt,name=BuyType" json:"BuyType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogElephantPiggy) Reset()                    { *m = LogElephantPiggy{} }
func (m *LogElephantPiggy) String() string            { return proto.CompactTextString(m) }
func (*LogElephantPiggy) ProtoMessage()               {}
func (*LogElephantPiggy) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{34} }

func (m *LogElephantPiggy) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogElephantPiggy) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogElephantPiggy) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogElephantPiggy) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *LogElephantPiggy) GetVipLevel() int64 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogElephantPiggy) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *LogElephantPiggy) GetBuyType() int32 {
	if m != nil && m.BuyType != nil {
		return *m.BuyType
	}
	return 0
}

// 限时礼包日志
type LogLimitTimeGift struct {
	PlayerID         *int64 `protobuf:"varint,1,req,name=PlayerID" json:"PlayerID,omitempty"`
	GiftID           *int32 `protobuf:"varint,2,req,name=GiftID" json:"GiftID,omitempty"`
	Price            *int64 `protobuf:"varint,3,req,name=Price" json:"Price,omitempty"`
	Time             *int64 `protobuf:"varint,4,req,name=Time" json:"Time,omitempty"`
	DeltaVipLevel    *int32 `protobuf:"varint,5,req,name=DeltaVipLevel" json:"DeltaVipLevel,omitempty"`
	VipLevel         *int32 `protobuf:"varint,6,req,name=VipLevel" json:"VipLevel,omitempty"`
	CritMoney        *int64 `protobuf:"varint,7,req,name=CritMoney" json:"CritMoney,omitempty"`
	Score            *int64 `protobuf:"varint,8,req,name=Score" json:"Score,omitempty"`
	TriggerGameId    *int32 `protobuf:"varint,9,opt,name=TriggerGameId" json:"TriggerGameId,omitempty"`
	PurchaseGameId   *int32 `protobuf:"varint,10,opt,name=PurchaseGameId" json:"PurchaseGameId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogLimitTimeGift) Reset()                    { *m = LogLimitTimeGift{} }
func (m *LogLimitTimeGift) String() string            { return proto.CompactTextString(m) }
func (*LogLimitTimeGift) ProtoMessage()               {}
func (*LogLimitTimeGift) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{35} }

func (m *LogLimitTimeGift) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogLimitTimeGift) GetGiftID() int32 {
	if m != nil && m.GiftID != nil {
		return *m.GiftID
	}
	return 0
}

func (m *LogLimitTimeGift) GetPrice() int64 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *LogLimitTimeGift) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *LogLimitTimeGift) GetDeltaVipLevel() int32 {
	if m != nil && m.DeltaVipLevel != nil {
		return *m.DeltaVipLevel
	}
	return 0
}

func (m *LogLimitTimeGift) GetVipLevel() int32 {
	if m != nil && m.VipLevel != nil {
		return *m.VipLevel
	}
	return 0
}

func (m *LogLimitTimeGift) GetCritMoney() int64 {
	if m != nil && m.CritMoney != nil {
		return *m.CritMoney
	}
	return 0
}

func (m *LogLimitTimeGift) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *LogLimitTimeGift) GetTriggerGameId() int32 {
	if m != nil && m.TriggerGameId != nil {
		return *m.TriggerGameId
	}
	return 0
}

func (m *LogLimitTimeGift) GetPurchaseGameId() int32 {
	if m != nil && m.PurchaseGameId != nil {
		return *m.PurchaseGameId
	}
	return 0
}

// 夺宝购买日志
type LogTreasure struct {
	PlayerID         *int64  `protobuf:"varint,1,req,name=PlayerID" json:"PlayerID,omitempty"`
	Vip              *int32  `protobuf:"varint,2,req,name=Vip" json:"Vip,omitempty"`
	PropId           *int32  `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	PropCount        *int32  `protobuf:"varint,4,req,name=PropCount" json:"PropCount,omitempty"`
	Issue            *int32  `protobuf:"varint,5,req,name=Issue" json:"Issue,omitempty"`
	LuckyCodes       []int32 `protobuf:"varint,6,rep,name=LuckyCodes" json:"LuckyCodes,omitempty"`
	Currency         *int32  `protobuf:"varint,7,req,name=Currency" json:"Currency,omitempty"`
	Price            *int32  `protobuf:"varint,8,req,name=Price" json:"Price,omitempty"`
	CreateTime       *int64  `protobuf:"varint,9,req,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogTreasure) Reset()                    { *m = LogTreasure{} }
func (m *LogTreasure) String() string            { return proto.CompactTextString(m) }
func (*LogTreasure) ProtoMessage()               {}
func (*LogTreasure) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{36} }

func (m *LogTreasure) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogTreasure) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *LogTreasure) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogTreasure) GetPropCount() int32 {
	if m != nil && m.PropCount != nil {
		return *m.PropCount
	}
	return 0
}

func (m *LogTreasure) GetIssue() int32 {
	if m != nil && m.Issue != nil {
		return *m.Issue
	}
	return 0
}

func (m *LogTreasure) GetLuckyCodes() []int32 {
	if m != nil {
		return m.LuckyCodes
	}
	return nil
}

func (m *LogTreasure) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

func (m *LogTreasure) GetPrice() int32 {
	if m != nil && m.Price != nil {
		return *m.Price
	}
	return 0
}

func (m *LogTreasure) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

// 夺宝中奖日志
type LogTreasureWinner struct {
	PlayerID         *int64 `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	Vip              *int32 `protobuf:"varint,2,opt,name=Vip" json:"Vip,omitempty"`
	PropId           *int32 `protobuf:"varint,3,req,name=PropId" json:"PropId,omitempty"`
	PropCount        *int32 `protobuf:"varint,4,req,name=PropCount" json:"PropCount,omitempty"`
	Issue            *int32 `protobuf:"varint,5,req,name=Issue" json:"Issue,omitempty"`
	LuckyCodes       *int32 `protobuf:"varint,6,opt,name=LuckyCodes" json:"LuckyCodes,omitempty"`
	Status           *int32 `protobuf:"varint,7,req,name=Status" json:"Status,omitempty"`
	StartTime        *int64 `protobuf:"varint,8,req,name=StartTime" json:"StartTime,omitempty"`
	EndTime          *int64 `protobuf:"varint,9,req,name=EndTime" json:"EndTime,omitempty"`
	Currency         *int32 `protobuf:"varint,10,req,name=Currency" json:"Currency,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogTreasureWinner) Reset()                    { *m = LogTreasureWinner{} }
func (m *LogTreasureWinner) String() string            { return proto.CompactTextString(m) }
func (*LogTreasureWinner) ProtoMessage()               {}
func (*LogTreasureWinner) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{37} }

func (m *LogTreasureWinner) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogTreasureWinner) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *LogTreasureWinner) GetPropId() int32 {
	if m != nil && m.PropId != nil {
		return *m.PropId
	}
	return 0
}

func (m *LogTreasureWinner) GetPropCount() int32 {
	if m != nil && m.PropCount != nil {
		return *m.PropCount
	}
	return 0
}

func (m *LogTreasureWinner) GetIssue() int32 {
	if m != nil && m.Issue != nil {
		return *m.Issue
	}
	return 0
}

func (m *LogTreasureWinner) GetLuckyCodes() int32 {
	if m != nil && m.LuckyCodes != nil {
		return *m.LuckyCodes
	}
	return 0
}

func (m *LogTreasureWinner) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *LogTreasureWinner) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *LogTreasureWinner) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *LogTreasureWinner) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

// 点卡日志
type LogSpayCashCard struct {
	PlayerID         *int64  `protobuf:"varint,1,req,name=PlayerID" json:"PlayerID,omitempty"`
	LogType          *int32  `protobuf:"varint,2,req,name=LogType" json:"LogType,omitempty"`
	PlatformID       *int32  `protobuf:"varint,3,req,name=PlatformID" json:"PlatformID,omitempty"`
	CardID           *string `protobuf:"bytes,4,req,name=CardID" json:"CardID,omitempty"`
	CardPsd          *string `protobuf:"bytes,5,req,name=CardPsd" json:"CardPsd,omitempty"`
	Amount           *int64  `protobuf:"varint,6,req,name=Amount" json:"Amount,omitempty"`
	Status           *int32  `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
	Remark           *string `protobuf:"bytes,8,opt,name=Remark" json:"Remark,omitempty"`
	CreateTime       *string `protobuf:"bytes,9,opt,name=CreateTime" json:"CreateTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogSpayCashCard) Reset()                    { *m = LogSpayCashCard{} }
func (m *LogSpayCashCard) String() string            { return proto.CompactTextString(m) }
func (*LogSpayCashCard) ProtoMessage()               {}
func (*LogSpayCashCard) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{38} }

func (m *LogSpayCashCard) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogSpayCashCard) GetLogType() int32 {
	if m != nil && m.LogType != nil {
		return *m.LogType
	}
	return 0
}

func (m *LogSpayCashCard) GetPlatformID() int32 {
	if m != nil && m.PlatformID != nil {
		return *m.PlatformID
	}
	return 0
}

func (m *LogSpayCashCard) GetCardID() string {
	if m != nil && m.CardID != nil {
		return *m.CardID
	}
	return ""
}

func (m *LogSpayCashCard) GetCardPsd() string {
	if m != nil && m.CardPsd != nil {
		return *m.CardPsd
	}
	return ""
}

func (m *LogSpayCashCard) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogSpayCashCard) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *LogSpayCashCard) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogSpayCashCard) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

// 银行支付
type LogSpayBank struct {
	PlayerID         *int64  `protobuf:"varint,1,req,name=PlayerID" json:"PlayerID,omitempty"`
	OrderID          *string `protobuf:"bytes,2,req,name=OrderID" json:"OrderID,omitempty"`
	Amount           *int64  `protobuf:"varint,3,req,name=Amount" json:"Amount,omitempty"`
	Rewards          *int64  `protobuf:"varint,4,req,name=Rewards" json:"Rewards,omitempty"`
	CreateTime       *string `protobuf:"bytes,5,req,name=CreateTime" json:"CreateTime,omitempty"`
	OrderJson        *string `protobuf:"bytes,6,req,name=OrderJson" json:"OrderJson,omitempty"`
	Status           *int32  `protobuf:"varint,7,req,name=Status" json:"Status,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogSpayBank) Reset()                    { *m = LogSpayBank{} }
func (m *LogSpayBank) String() string            { return proto.CompactTextString(m) }
func (*LogSpayBank) ProtoMessage()               {}
func (*LogSpayBank) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{39} }

func (m *LogSpayBank) GetPlayerID() int64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *LogSpayBank) GetOrderID() string {
	if m != nil && m.OrderID != nil {
		return *m.OrderID
	}
	return ""
}

func (m *LogSpayBank) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogSpayBank) GetRewards() int64 {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return 0
}

func (m *LogSpayBank) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *LogSpayBank) GetOrderJson() string {
	if m != nil && m.OrderJson != nil {
		return *m.OrderJson
	}
	return ""
}

func (m *LogSpayBank) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

// 捕鱼刮刮卡日志
type LogBuYuScratchCard struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	GameId           *int32  `protobuf:"varint,2,req,name=GameId" json:"GameId,omitempty"`
	GroupId          *int32  `protobuf:"varint,3,req,name=GroupId" json:"GroupId,omitempty"`
	BuyCardCount     *int64  `protobuf:"varint,4,req,name=BuyCardCount" json:"BuyCardCount,omitempty"`
	UseCardCount     *int64  `protobuf:"varint,5,req,name=UseCardCount" json:"UseCardCount,omitempty"`
	TotalCoinGet     *int64  `protobuf:"varint,6,req,name=TotalCoinGet" json:"TotalCoinGet,omitempty"`
	MaxCoinEachCard  *int64  `protobuf:"varint,7,req,name=MaxCoinEachCard" json:"MaxCoinEachCard,omitempty"`
	Time             *string `protobuf:"bytes,8,req,name=Time" json:"Time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogBuYuScratchCard) Reset()                    { *m = LogBuYuScratchCard{} }
func (m *LogBuYuScratchCard) String() string            { return proto.CompactTextString(m) }
func (*LogBuYuScratchCard) ProtoMessage()               {}
func (*LogBuYuScratchCard) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{40} }

func (m *LogBuYuScratchCard) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogBuYuScratchCard) GetGameId() int32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

func (m *LogBuYuScratchCard) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *LogBuYuScratchCard) GetBuyCardCount() int64 {
	if m != nil && m.BuyCardCount != nil {
		return *m.BuyCardCount
	}
	return 0
}

func (m *LogBuYuScratchCard) GetUseCardCount() int64 {
	if m != nil && m.UseCardCount != nil {
		return *m.UseCardCount
	}
	return 0
}

func (m *LogBuYuScratchCard) GetTotalCoinGet() int64 {
	if m != nil && m.TotalCoinGet != nil {
		return *m.TotalCoinGet
	}
	return 0
}

func (m *LogBuYuScratchCard) GetMaxCoinEachCard() int64 {
	if m != nil && m.MaxCoinEachCard != nil {
		return *m.MaxCoinEachCard
	}
	return 0
}

func (m *LogBuYuScratchCard) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

// 个人记录
type PersonalRecordInfo struct {
	Time             *int64  `protobuf:"varint,1,req,name=Time" json:"Time,omitempty"`
	EventID          *int32  `protobuf:"varint,2,req,name=EventID" json:"EventID,omitempty"`
	Content          *string `protobuf:"bytes,3,opt,name=Content" json:"Content,omitempty"`
	SafeMoney        *int64  `protobuf:"varint,4,opt,name=SafeMoney" json:"SafeMoney,omitempty"`
	DeltaMoney       *int64  `protobuf:"varint,5,opt,name=DeltaMoney" json:"DeltaMoney,omitempty"`
	Balance          *int64  `protobuf:"varint,6,opt,name=Balance" json:"Balance,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PersonalRecordInfo) Reset()                    { *m = PersonalRecordInfo{} }
func (m *PersonalRecordInfo) String() string            { return proto.CompactTextString(m) }
func (*PersonalRecordInfo) ProtoMessage()               {}
func (*PersonalRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{41} }

func (m *PersonalRecordInfo) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *PersonalRecordInfo) GetEventID() int32 {
	if m != nil && m.EventID != nil {
		return *m.EventID
	}
	return 0
}

func (m *PersonalRecordInfo) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *PersonalRecordInfo) GetSafeMoney() int64 {
	if m != nil && m.SafeMoney != nil {
		return *m.SafeMoney
	}
	return 0
}

func (m *PersonalRecordInfo) GetDeltaMoney() int64 {
	if m != nil && m.DeltaMoney != nil {
		return *m.DeltaMoney
	}
	return 0
}

func (m *PersonalRecordInfo) GetBalance() int64 {
	if m != nil && m.Balance != nil {
		return *m.Balance
	}
	return 0
}

// 个人记录
type LogPersonalRecord struct {
	PlayerId         *int64              `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Info             *PersonalRecordInfo `protobuf:"bytes,2,req,name=Info" json:"Info,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *LogPersonalRecord) Reset()                    { *m = LogPersonalRecord{} }
func (m *LogPersonalRecord) String() string            { return proto.CompactTextString(m) }
func (*LogPersonalRecord) ProtoMessage()               {}
func (*LogPersonalRecord) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{42} }

func (m *LogPersonalRecord) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPersonalRecord) GetInfo() *PersonalRecordInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 新代理系统日志
type LogNewAgentRelation struct {
	UserId           *int64 `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	SuperUserId      *int64 `protobuf:"varint,2,req,name=SuperUserId" json:"SuperUserId,omitempty"`
	TopUserId        *int64 `protobuf:"varint,3,req,name=TopUserId" json:"TopUserId,omitempty"`
	CreateTime       *int64 `protobuf:"varint,4,req,name=CreateTime" json:"CreateTime,omitempty"`
	BindType         *int32 `protobuf:"varint,5,req,name=BindType" json:"BindType,omitempty"`
	IsEffective      *int32 `protobuf:"varint,6,req,name=IsEffective" json:"IsEffective,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogNewAgentRelation) Reset()                    { *m = LogNewAgentRelation{} }
func (m *LogNewAgentRelation) String() string            { return proto.CompactTextString(m) }
func (*LogNewAgentRelation) ProtoMessage()               {}
func (*LogNewAgentRelation) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{43} }

func (m *LogNewAgentRelation) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *LogNewAgentRelation) GetSuperUserId() int64 {
	if m != nil && m.SuperUserId != nil {
		return *m.SuperUserId
	}
	return 0
}

func (m *LogNewAgentRelation) GetTopUserId() int64 {
	if m != nil && m.TopUserId != nil {
		return *m.TopUserId
	}
	return 0
}

func (m *LogNewAgentRelation) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LogNewAgentRelation) GetBindType() int32 {
	if m != nil && m.BindType != nil {
		return *m.BindType
	}
	return 0
}

func (m *LogNewAgentRelation) GetIsEffective() int32 {
	if m != nil && m.IsEffective != nil {
		return *m.IsEffective
	}
	return 0
}

// 新代理系统设置玩家为有效代理
type LogSetAgentEffective struct {
	UserId           *int64 `protobuf:"varint,1,req,name=UserId" json:"UserId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogSetAgentEffective) Reset()                    { *m = LogSetAgentEffective{} }
func (m *LogSetAgentEffective) String() string            { return proto.CompactTextString(m) }
func (*LogSetAgentEffective) ProtoMessage()               {}
func (*LogSetAgentEffective) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{44} }

func (m *LogSetAgentEffective) GetUserId() int64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

// 新代理系统更新玩家的顶级代理
type LogUpdateNewAgentsTopUserId struct {
	UserIds          []int64 `protobuf:"varint,1,rep,name=UserIds" json:"UserIds,omitempty"`
	TopUserId        *int64  `protobuf:"varint,2,req,name=TopUserId" json:"TopUserId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogUpdateNewAgentsTopUserId) Reset()                    { *m = LogUpdateNewAgentsTopUserId{} }
func (m *LogUpdateNewAgentsTopUserId) String() string            { return proto.CompactTextString(m) }
func (*LogUpdateNewAgentsTopUserId) ProtoMessage()               {}
func (*LogUpdateNewAgentsTopUserId) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{45} }

func (m *LogUpdateNewAgentsTopUserId) GetUserIds() []int64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *LogUpdateNewAgentsTopUserId) GetTopUserId() int64 {
	if m != nil && m.TopUserId != nil {
		return *m.TopUserId
	}
	return 0
}

// 新代理系统封号
type LogForbiddenNewAgent struct {
	UserIds          []int64 `protobuf:"varint,1,rep,name=UserIds" json:"UserIds,omitempty"`
	CreateTime       *int64  `protobuf:"varint,2,req,name=CreateTime" json:"CreateTime,omitempty"`
	Type             *int64  `protobuf:"varint,3,req,name=Type" json:"Type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogForbiddenNewAgent) Reset()                    { *m = LogForbiddenNewAgent{} }
func (m *LogForbiddenNewAgent) String() string            { return proto.CompactTextString(m) }
func (*LogForbiddenNewAgent) ProtoMessage()               {}
func (*LogForbiddenNewAgent) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{46} }

func (m *LogForbiddenNewAgent) GetUserIds() []int64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *LogForbiddenNewAgent) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LogForbiddenNewAgent) GetType() int64 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type LogPaymentRecord struct {
	OrderId          *string       `protobuf:"bytes,1,req,name=OrderId" json:"OrderId,omitempty"`
	PlayerId         *int64        `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty"`
	Channel          *EChannel     `protobuf:"varint,3,opt,name=Channel,enum=VK.Proto.EChannel" json:"Channel,omitempty"`
	CommodityType    *int32        `protobuf:"varint,4,opt,name=CommodityType" json:"CommodityType,omitempty"`
	Fee              *int64        `protobuf:"varint,5,opt,name=Fee" json:"Fee,omitempty"`
	CreateTime       *int64        `protobuf:"varint,6,opt,name=CreateTime" json:"CreateTime,omitempty"`
	FinishTime       *int64        `protobuf:"varint,7,opt,name=FinishTime" json:"FinishTime,omitempty"`
	Discount         *string       `protobuf:"bytes,8,opt,name=Discount" json:"Discount,omitempty"`
	Remark           *string       `protobuf:"bytes,9,opt,name=Remark" json:"Remark,omitempty"`
	Rewards          *string       `protobuf:"bytes,10,opt,name=Rewards" json:"Rewards,omitempty"`
	Status           *EOrderStatus `protobuf:"varint,11,opt,name=Status,enum=VK.Proto.EOrderStatus" json:"Status,omitempty"`
	Amount           *int64        `protobuf:"varint,12,opt,name=Amount" json:"Amount,omitempty"`
	WareId           *string       `protobuf:"bytes,13,opt,name=WareId" json:"WareId,omitempty"`
	RewardChouma     *int64        `protobuf:"varint,14,opt,name=RewardChouma" json:"RewardChouma,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LogPaymentRecord) Reset()                    { *m = LogPaymentRecord{} }
func (m *LogPaymentRecord) String() string            { return proto.CompactTextString(m) }
func (*LogPaymentRecord) ProtoMessage()               {}
func (*LogPaymentRecord) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{47} }

func (m *LogPaymentRecord) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *LogPaymentRecord) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPaymentRecord) GetChannel() EChannel {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return EChannel_EC_Invalid
}

func (m *LogPaymentRecord) GetCommodityType() int32 {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return 0
}

func (m *LogPaymentRecord) GetFee() int64 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

func (m *LogPaymentRecord) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LogPaymentRecord) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *LogPaymentRecord) GetDiscount() string {
	if m != nil && m.Discount != nil {
		return *m.Discount
	}
	return ""
}

func (m *LogPaymentRecord) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *LogPaymentRecord) GetRewards() string {
	if m != nil && m.Rewards != nil {
		return *m.Rewards
	}
	return ""
}

func (m *LogPaymentRecord) GetStatus() EOrderStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EOrderStatus_EOS_Invalid
}

func (m *LogPaymentRecord) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogPaymentRecord) GetWareId() string {
	if m != nil && m.WareId != nil {
		return *m.WareId
	}
	return ""
}

func (m *LogPaymentRecord) GetRewardChouma() int64 {
	if m != nil && m.RewardChouma != nil {
		return *m.RewardChouma
	}
	return 0
}

// 点卡兑换记录
type LogCardExchange struct {
	Guid             *string       `protobuf:"bytes,1,req,name=Guid" json:"Guid,omitempty"`
	PlayerId         *int64        `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty"`
	Status           *EOrderStatus `protobuf:"varint,3,req,name=Status,enum=VK.Proto.EOrderStatus" json:"Status,omitempty"`
	CommodityType    *int32        `protobuf:"varint,4,req,name=CommodityType" json:"CommodityType,omitempty"`
	CreateTime       *int64        `protobuf:"varint,5,req,name=CreateTime" json:"CreateTime,omitempty"`
	CardSerial       *string       `protobuf:"bytes,6,opt,name=CardSerial" json:"CardSerial,omitempty"`
	CardCode         *string       `protobuf:"bytes,7,opt,name=CardCode" json:"CardCode,omitempty"`
	CardType         *int32        `protobuf:"varint,8,opt,name=CardType" json:"CardType,omitempty"`
	Amount           *int64        `protobuf:"varint,9,opt,name=Amount" json:"Amount,omitempty"`
	Msg              *string       `protobuf:"bytes,10,opt,name=Msg" json:"Msg,omitempty"`
	FinishTime       *int64        `protobuf:"varint,11,opt,name=FinishTime" json:"FinishTime,omitempty"`
	Cost             *int64        `protobuf:"varint,12,opt,name=Cost" json:"Cost,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LogCardExchange) Reset()                    { *m = LogCardExchange{} }
func (m *LogCardExchange) String() string            { return proto.CompactTextString(m) }
func (*LogCardExchange) ProtoMessage()               {}
func (*LogCardExchange) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{48} }

func (m *LogCardExchange) GetGuid() string {
	if m != nil && m.Guid != nil {
		return *m.Guid
	}
	return ""
}

func (m *LogCardExchange) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogCardExchange) GetStatus() EOrderStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EOrderStatus_EOS_Invalid
}

func (m *LogCardExchange) GetCommodityType() int32 {
	if m != nil && m.CommodityType != nil {
		return *m.CommodityType
	}
	return 0
}

func (m *LogCardExchange) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *LogCardExchange) GetCardSerial() string {
	if m != nil && m.CardSerial != nil {
		return *m.CardSerial
	}
	return ""
}

func (m *LogCardExchange) GetCardCode() string {
	if m != nil && m.CardCode != nil {
		return *m.CardCode
	}
	return ""
}

func (m *LogCardExchange) GetCardType() int32 {
	if m != nil && m.CardType != nil {
		return *m.CardType
	}
	return 0
}

func (m *LogCardExchange) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogCardExchange) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *LogCardExchange) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *LogCardExchange) GetCost() int64 {
	if m != nil && m.Cost != nil {
		return *m.Cost
	}
	return 0
}

// 第三方游戏转账记录
type ThirdPartyGameTransferRecords struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	OrderId          *string `protobuf:"bytes,2,req,name=OrderId" json:"OrderId,omitempty"`
	CreateTime       *int64  `protobuf:"varint,3,req,name=CreateTime" json:"CreateTime,omitempty"`
	Money            *int64  `protobuf:"varint,4,req,name=Money" json:"Money,omitempty"`
	OutputWallet     *int64  `protobuf:"varint,5,req,name=OutputWallet" json:"OutputWallet,omitempty"`
	InputWallet      *int64  `protobuf:"varint,6,req,name=inputWallet" json:"inputWallet,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ThirdPartyGameTransferRecords) Reset()                    { *m = ThirdPartyGameTransferRecords{} }
func (m *ThirdPartyGameTransferRecords) String() string            { return proto.CompactTextString(m) }
func (*ThirdPartyGameTransferRecords) ProtoMessage()               {}
func (*ThirdPartyGameTransferRecords) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{49} }

func (m *ThirdPartyGameTransferRecords) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *ThirdPartyGameTransferRecords) GetOrderId() string {
	if m != nil && m.OrderId != nil {
		return *m.OrderId
	}
	return ""
}

func (m *ThirdPartyGameTransferRecords) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ThirdPartyGameTransferRecords) GetMoney() int64 {
	if m != nil && m.Money != nil {
		return *m.Money
	}
	return 0
}

func (m *ThirdPartyGameTransferRecords) GetOutputWallet() int64 {
	if m != nil && m.OutputWallet != nil {
		return *m.OutputWallet
	}
	return 0
}

func (m *ThirdPartyGameTransferRecords) GetInputWallet() int64 {
	if m != nil && m.InputWallet != nil {
		return *m.InputWallet
	}
	return 0
}

// 第三方游戏注单详情
type ThirdPartyGameBet struct {
	UserID    *int64  `protobuf:"varint,1,req,name=UserID" json:"UserID,omitempty"`
	GameID    *int64  `protobuf:"varint,2,opt,name=GameID" json:"GameID,omitempty"`
	Factory   *string `protobuf:"bytes,3,req,name=Factory" json:"Factory,omitempty"`
	Roundid   *string `protobuf:"bytes,4,req,name=Roundid" json:"Roundid,omitempty"`
	Allbet    *string `protobuf:"bytes,5,req,name=Allbet" json:"Allbet,omitempty"`
	Realbet   *string `protobuf:"bytes,6,opt,name=Realbet" json:"Realbet,omitempty"`
	Profit    *string `protobuf:"bytes,7,req,name=Profit" json:"Profit,omitempty"`
	Revenue   *string `protobuf:"bytes,8,opt,name=Revenue" json:"Revenue,omitempty"`
	Stime     *string `protobuf:"bytes,9,req,name=Stime" json:"Stime,omitempty"`
	Etime     *string `protobuf:"bytes,10,req,name=Etime" json:"Etime,omitempty"`
	Factoryid *string `protobuf:"bytes,11,req,name=Factoryid" json:"Factoryid,omitempty"`
	Kindid    *string `protobuf:"bytes,12,opt,name=Kindid" json:"Kindid,omitempty"`
	Kind      *string `protobuf:"bytes,13,opt,name=Kind" json:"Kind,omitempty"`
	Gametype  *int64  `protobuf:"varint,14,req,name=Gametype" json:"Gametype,omitempty"`
	// 体育
	Issettled        *string `protobuf:"bytes,15,opt,name=Issettled" json:"Issettled,omitempty"`
	Oddstype         *string `protobuf:"bytes,16,opt,name=Oddstype" json:"Oddstype,omitempty"`
	Market           *string `protobuf:"bytes,17,opt,name=Market" json:"Market,omitempty"`
	Cname            *string `protobuf:"bytes,18,opt,name=Cname" json:"Cname,omitempty"`
	Eventid          *string `protobuf:"bytes,19,opt,name=Eventid" json:"Eventid,omitempty"`
	Betcontent       *string `protobuf:"bytes,20,opt,name=Betcontent" json:"Betcontent,omitempty"`
	Bettype          *string `protobuf:"bytes,21,opt,name=Bettype" json:"Bettype,omitempty"`
	Odds             *string `protobuf:"bytes,22,opt,name=Odds" json:"Odds,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ThirdPartyGameBet) Reset()                    { *m = ThirdPartyGameBet{} }
func (m *ThirdPartyGameBet) String() string            { return proto.CompactTextString(m) }
func (*ThirdPartyGameBet) ProtoMessage()               {}
func (*ThirdPartyGameBet) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{50} }

func (m *ThirdPartyGameBet) GetUserID() int64 {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return 0
}

func (m *ThirdPartyGameBet) GetGameID() int64 {
	if m != nil && m.GameID != nil {
		return *m.GameID
	}
	return 0
}

func (m *ThirdPartyGameBet) GetFactory() string {
	if m != nil && m.Factory != nil {
		return *m.Factory
	}
	return ""
}

func (m *ThirdPartyGameBet) GetRoundid() string {
	if m != nil && m.Roundid != nil {
		return *m.Roundid
	}
	return ""
}

func (m *ThirdPartyGameBet) GetAllbet() string {
	if m != nil && m.Allbet != nil {
		return *m.Allbet
	}
	return ""
}

func (m *ThirdPartyGameBet) GetRealbet() string {
	if m != nil && m.Realbet != nil {
		return *m.Realbet
	}
	return ""
}

func (m *ThirdPartyGameBet) GetProfit() string {
	if m != nil && m.Profit != nil {
		return *m.Profit
	}
	return ""
}

func (m *ThirdPartyGameBet) GetRevenue() string {
	if m != nil && m.Revenue != nil {
		return *m.Revenue
	}
	return ""
}

func (m *ThirdPartyGameBet) GetStime() string {
	if m != nil && m.Stime != nil {
		return *m.Stime
	}
	return ""
}

func (m *ThirdPartyGameBet) GetEtime() string {
	if m != nil && m.Etime != nil {
		return *m.Etime
	}
	return ""
}

func (m *ThirdPartyGameBet) GetFactoryid() string {
	if m != nil && m.Factoryid != nil {
		return *m.Factoryid
	}
	return ""
}

func (m *ThirdPartyGameBet) GetKindid() string {
	if m != nil && m.Kindid != nil {
		return *m.Kindid
	}
	return ""
}

func (m *ThirdPartyGameBet) GetKind() string {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ""
}

func (m *ThirdPartyGameBet) GetGametype() int64 {
	if m != nil && m.Gametype != nil {
		return *m.Gametype
	}
	return 0
}

func (m *ThirdPartyGameBet) GetIssettled() string {
	if m != nil && m.Issettled != nil {
		return *m.Issettled
	}
	return ""
}

func (m *ThirdPartyGameBet) GetOddstype() string {
	if m != nil && m.Oddstype != nil {
		return *m.Oddstype
	}
	return ""
}

func (m *ThirdPartyGameBet) GetMarket() string {
	if m != nil && m.Market != nil {
		return *m.Market
	}
	return ""
}

func (m *ThirdPartyGameBet) GetCname() string {
	if m != nil && m.Cname != nil {
		return *m.Cname
	}
	return ""
}

func (m *ThirdPartyGameBet) GetEventid() string {
	if m != nil && m.Eventid != nil {
		return *m.Eventid
	}
	return ""
}

func (m *ThirdPartyGameBet) GetBetcontent() string {
	if m != nil && m.Betcontent != nil {
		return *m.Betcontent
	}
	return ""
}

func (m *ThirdPartyGameBet) GetBettype() string {
	if m != nil && m.Bettype != nil {
		return *m.Bettype
	}
	return ""
}

func (m *ThirdPartyGameBet) GetOdds() string {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return ""
}

// 第三方游戏注单批量
type ThirdPartyGameBetList struct {
	Bets             []*ThirdPartyGameBet `protobuf:"bytes,1,rep,name=Bets" json:"Bets,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ThirdPartyGameBetList) Reset()                    { *m = ThirdPartyGameBetList{} }
func (m *ThirdPartyGameBetList) String() string            { return proto.CompactTextString(m) }
func (*ThirdPartyGameBetList) ProtoMessage()               {}
func (*ThirdPartyGameBetList) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{51} }

func (m *ThirdPartyGameBetList) GetBets() []*ThirdPartyGameBet {
	if m != nil {
		return m.Bets
	}
	return nil
}

// 玩家信息
type LogPlayerInfo struct {
	PlayerId         *int64 `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	ChangePasswdTime *int64 `protobuf:"varint,2,opt,name=ChangePasswdTime" json:"ChangePasswdTime,omitempty"`
	PerfectInfoTime  *int64 `protobuf:"varint,3,opt,name=PerfectInfoTime" json:"PerfectInfoTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogPlayerInfo) Reset()                    { *m = LogPlayerInfo{} }
func (m *LogPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*LogPlayerInfo) ProtoMessage()               {}
func (*LogPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{52} }

func (m *LogPlayerInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPlayerInfo) GetChangePasswdTime() int64 {
	if m != nil && m.ChangePasswdTime != nil {
		return *m.ChangePasswdTime
	}
	return 0
}

func (m *LogPlayerInfo) GetPerfectInfoTime() int64 {
	if m != nil && m.PerfectInfoTime != nil {
		return *m.PerfectInfoTime
	}
	return 0
}

type LogNoviceGuide struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	EventId          *int32  `protobuf:"varint,2,req,name=EventId" json:"EventId,omitempty"`
	IMEI             *string `protobuf:"bytes,3,opt,name=IMEI" json:"IMEI,omitempty"`
	Time             *string `protobuf:"bytes,4,req,name=Time" json:"Time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogNoviceGuide) Reset()                    { *m = LogNoviceGuide{} }
func (m *LogNoviceGuide) String() string            { return proto.CompactTextString(m) }
func (*LogNoviceGuide) ProtoMessage()               {}
func (*LogNoviceGuide) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{53} }

func (m *LogNoviceGuide) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogNoviceGuide) GetEventId() int32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *LogNoviceGuide) GetIMEI() string {
	if m != nil && m.IMEI != nil {
		return *m.IMEI
	}
	return ""
}

func (m *LogNoviceGuide) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

type LogRechargeFeedback struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Content          *string `protobuf:"bytes,2,req,name=Content" json:"Content,omitempty"`
	Time             *string `protobuf:"bytes,3,opt,name=Time" json:"Time,omitempty"`
	ProblemId        *int32  `protobuf:"varint,4,opt,name=ProblemId" json:"ProblemId,omitempty"`
	Phone            *string `protobuf:"bytes,5,opt,name=Phone" json:"Phone,omitempty"`
	Remark           *string `protobuf:"bytes,6,opt,name=Remark" json:"Remark,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogRechargeFeedback) Reset()                    { *m = LogRechargeFeedback{} }
func (m *LogRechargeFeedback) String() string            { return proto.CompactTextString(m) }
func (*LogRechargeFeedback) ProtoMessage()               {}
func (*LogRechargeFeedback) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{54} }

func (m *LogRechargeFeedback) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogRechargeFeedback) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *LogRechargeFeedback) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogRechargeFeedback) GetProblemId() int32 {
	if m != nil && m.ProblemId != nil {
		return *m.ProblemId
	}
	return 0
}

func (m *LogRechargeFeedback) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *LogRechargeFeedback) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

type LogPhoneMailCode struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Time             *string `protobuf:"bytes,2,req,name=Time" json:"Time,omitempty"`
	VerifyType       *int32  `protobuf:"varint,3,req,name=VerifyType" json:"VerifyType,omitempty"`
	ComeFrom         *int32  `protobuf:"varint,4,req,name=ComeFrom" json:"ComeFrom,omitempty"`
	VerifyContent    *string `protobuf:"bytes,5,req,name=VerifyContent" json:"VerifyContent,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogPhoneMailCode) Reset()                    { *m = LogPhoneMailCode{} }
func (m *LogPhoneMailCode) String() string            { return proto.CompactTextString(m) }
func (*LogPhoneMailCode) ProtoMessage()               {}
func (*LogPhoneMailCode) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{55} }

func (m *LogPhoneMailCode) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogPhoneMailCode) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogPhoneMailCode) GetVerifyType() int32 {
	if m != nil && m.VerifyType != nil {
		return *m.VerifyType
	}
	return 0
}

func (m *LogPhoneMailCode) GetComeFrom() int32 {
	if m != nil && m.ComeFrom != nil {
		return *m.ComeFrom
	}
	return 0
}

func (m *LogPhoneMailCode) GetVerifyContent() string {
	if m != nil && m.VerifyContent != nil {
		return *m.VerifyContent
	}
	return ""
}

// 流水锁日志
type LogChmLocker struct {
	PlayerId          *int64          `protobuf:"varint,1,req,name=PlayerId" json:"PlayerId,omitempty"`
	Channel           *int64          `protobuf:"varint,2,req,name=Channel" json:"Channel,omitempty"`
	Time              *string         `protobuf:"bytes,3,req,name=Time" json:"Time,omitempty"`
	LockState         *int32          `protobuf:"varint,4,req,name=LockState" json:"LockState,omitempty"`
	Reason            *int32          `protobuf:"varint,5,req,name=Reason" json:"Reason,omitempty"`
	Amount            *int64          `protobuf:"varint,6,req,name=Amount" json:"Amount,omitempty"`
	LockMulti         *int32          `protobuf:"varint,7,req,name=LockMulti" json:"LockMulti,omitempty"`
	TotalLose         *int64          `protobuf:"varint,8,req,name=TotalLose" json:"TotalLose,omitempty"`
	TotalWin          *int64          `protobuf:"varint,9,req,name=TotalWin" json:"TotalWin,omitempty"`
	OtherLose         *int64          `protobuf:"varint,10,req,name=OtherLose" json:"OtherLose,omitempty"`
	OtherWin          *int64          `protobuf:"varint,11,req,name=OtherWin" json:"OtherWin,omitempty"`
	TotalWithDraw     *int64          `protobuf:"varint,12,req,name=TotalWithDraw" json:"TotalWithDraw,omitempty"`
	TotalCardExchange *int64          `protobuf:"varint,13,req,name=TotalCardExchange" json:"TotalCardExchange,omitempty"`
	CanWithDrawValue  *int64          `protobuf:"varint,14,req,name=CanWithDrawValue" json:"CanWithDrawValue,omitempty"`
	TempUnlockValue   *int64          `protobuf:"varint,15,req,name=TempUnlockValue" json:"TempUnlockValue,omitempty"`
	Version           *int32          `protobuf:"varint,16,req,name=Version" json:"Version,omitempty"`
	PlayerChip        *int64          `protobuf:"varint,17,req,name=PlayerChip" json:"PlayerChip,omitempty"`
	SafeboxChip       *int64          `protobuf:"varint,18,req,name=SafeboxChip" json:"SafeboxChip,omitempty"`
	GameChip          *int64          `protobuf:"varint,19,req,name=GameChip" json:"GameChip,omitempty"`
	Guid              *string         `protobuf:"bytes,20,req,name=Guid" json:"Guid,omitempty"`
	Source            *TransferSource `protobuf:"varint,21,req,name=Source,enum=VK.Proto.TransferSource" json:"Source,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *LogChmLocker) Reset()                    { *m = LogChmLocker{} }
func (m *LogChmLocker) String() string            { return proto.CompactTextString(m) }
func (*LogChmLocker) ProtoMessage()               {}
func (*LogChmLocker) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{56} }

func (m *LogChmLocker) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogChmLocker) GetChannel() int64 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *LogChmLocker) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *LogChmLocker) GetLockState() int32 {
	if m != nil && m.LockState != nil {
		return *m.LockState
	}
	return 0
}

func (m *LogChmLocker) GetReason() int32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *LogChmLocker) GetAmount() int64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *LogChmLocker) GetLockMulti() int32 {
	if m != nil && m.LockMulti != nil {
		return *m.LockMulti
	}
	return 0
}

func (m *LogChmLocker) GetTotalLose() int64 {
	if m != nil && m.TotalLose != nil {
		return *m.TotalLose
	}
	return 0
}

func (m *LogChmLocker) GetTotalWin() int64 {
	if m != nil && m.TotalWin != nil {
		return *m.TotalWin
	}
	return 0
}

func (m *LogChmLocker) GetOtherLose() int64 {
	if m != nil && m.OtherLose != nil {
		return *m.OtherLose
	}
	return 0
}

func (m *LogChmLocker) GetOtherWin() int64 {
	if m != nil && m.OtherWin != nil {
		return *m.OtherWin
	}
	return 0
}

func (m *LogChmLocker) GetTotalWithDraw() int64 {
	if m != nil && m.TotalWithDraw != nil {
		return *m.TotalWithDraw
	}
	return 0
}

func (m *LogChmLocker) GetTotalCardExchange() int64 {
	if m != nil && m.TotalCardExchange != nil {
		return *m.TotalCardExchange
	}
	return 0
}

func (m *LogChmLocker) GetCanWithDrawValue() int64 {
	if m != nil && m.CanWithDrawValue != nil {
		return *m.CanWithDrawValue
	}
	return 0
}

func (m *LogChmLocker) GetTempUnlockValue() int64 {
	if m != nil && m.TempUnlockValue != nil {
		return *m.TempUnlockValue
	}
	return 0
}

func (m *LogChmLocker) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *LogChmLocker) GetPlayerChip() int64 {
	if m != nil && m.PlayerChip != nil {
		return *m.PlayerChip
	}
	return 0
}

func (m *LogChmLocker) GetSafeboxChip() int64 {
	if m != nil && m.SafeboxChip != nil {
		return *m.SafeboxChip
	}
	return 0
}

func (m *LogChmLocker) GetGameChip() int64 {
	if m != nil && m.GameChip != nil {
		return *m.GameChip
	}
	return 0
}

func (m *LogChmLocker) GetGuid() string {
	if m != nil && m.Guid != nil {
		return *m.Guid
	}
	return ""
}

func (m *LogChmLocker) GetSource() TransferSource {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return TransferSource_TS_Empty
}

// 用户账户信息日志
type LogUserAccount struct {
	Account          *string `protobuf:"bytes,1,req,name=Account" json:"Account,omitempty"`
	PlayerId         *int32  `protobuf:"varint,2,req,name=PlayerId" json:"PlayerId,omitempty"`
	RegTime          *string `protobuf:"bytes,3,req,name=RegTime" json:"RegTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogUserAccount) Reset()                    { *m = LogUserAccount{} }
func (m *LogUserAccount) String() string            { return proto.CompactTextString(m) }
func (*LogUserAccount) ProtoMessage()               {}
func (*LogUserAccount) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{57} }

func (m *LogUserAccount) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *LogUserAccount) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *LogUserAccount) GetRegTime() string {
	if m != nil && m.RegTime != nil {
		return *m.RegTime
	}
	return ""
}

func init() {
	proto.RegisterType((*LogMsg)(nil), "VK.Proto.LogMsg")
	proto.RegisterType((*LogMsgs)(nil), "VK.Proto.LogMsgs")
	proto.RegisterType((*LogLogin)(nil), "VK.Proto.LogLogin")
	proto.RegisterType((*LogTransfer)(nil), "VK.Proto.LogTransfer")
	proto.RegisterType((*BankCard)(nil), "VK.Proto.BankCard")
	proto.RegisterType((*LogPlayerCard)(nil), "VK.Proto.LogPlayerCard")
	proto.RegisterType((*LogPurchase)(nil), "VK.Proto.LogPurchase")
	proto.RegisterType((*LogOnline)(nil), "VK.Proto.LogOnline")
	proto.RegisterType((*LogOnlineTime)(nil), "VK.Proto.LogOnlineTime")
	proto.RegisterType((*LogTrade)(nil), "VK.Proto.LogTrade")
	proto.RegisterType((*LogForbidden)(nil), "VK.Proto.LogForbidden")
	proto.RegisterType((*LogRegister)(nil), "VK.Proto.LogRegister")
	proto.RegisterType((*LogMail)(nil), "VK.Proto.LogMail")
	proto.RegisterType((*LogOnlineReward)(nil), "VK.Proto.LogOnlineReward")
	proto.RegisterType((*LogLottery)(nil), "VK.Proto.LogLottery")
	proto.RegisterType((*LogBYDLDJackpotWinners)(nil), "VK.Proto.LogBYDLDJackpotWinners")
	proto.RegisterType((*LogDummyMatchWinners)(nil), "VK.Proto.LogDummyMatchWinners")
	proto.RegisterType((*LogLoginReward)(nil), "VK.Proto.LogLoginReward")
	proto.RegisterType((*LogNewYearReward)(nil), "VK.Proto.LogNewYearReward")
	proto.RegisterType((*LogFestivalReward)(nil), "VK.Proto.LogFestivalReward")
	proto.RegisterType((*LogSplashWaterReward)(nil), "VK.Proto.LogSplashWaterReward")
	proto.RegisterType((*LogRewardPool)(nil), "VK.Proto.LogRewardPool")
	proto.RegisterType((*LogFreezeAccount)(nil), "VK.Proto.LogFreezeAccount")
	proto.RegisterType((*LogSupply)(nil), "VK.Proto.LogSupply")
	proto.RegisterType((*LogSevenDaysSignReward)(nil), "VK.Proto.LogSevenDaysSignReward")
	proto.RegisterType((*LogUpdatePhysicalGoods)(nil), "VK.Proto.LogUpdatePhysicalGoods")
	proto.RegisterType((*LogDailySpinReward)(nil), "VK.Proto.LogDailySpinReward")
	proto.RegisterType((*LogLuckyTurntableReward)(nil), "VK.Proto.LogLuckyTurntableReward")
	proto.RegisterType((*LogSilentAccount)(nil), "VK.Proto.LogSilentAccount")
	proto.RegisterType((*LogChipReplenish)(nil), "VK.Proto.LogChipReplenish")
	proto.RegisterType((*LogBlackAccount)(nil), "VK.Proto.LogBlackAccount")
	proto.RegisterType((*LogReceipt)(nil), "VK.Proto.LogReceipt")
	proto.RegisterType((*LogOnlineWelfare)(nil), "VK.Proto.LogOnlineWelfare")
	proto.RegisterType((*LogWaterLampWish)(nil), "VK.Proto.LogWaterLampWish")
	proto.RegisterType((*LogElephantPiggy)(nil), "VK.Proto.LogElephantPiggy")
	proto.RegisterType((*LogLimitTimeGift)(nil), "VK.Proto.LogLimitTimeGift")
	proto.RegisterType((*LogTreasure)(nil), "VK.Proto.LogTreasure")
	proto.RegisterType((*LogTreasureWinner)(nil), "VK.Proto.LogTreasureWinner")
	proto.RegisterType((*LogSpayCashCard)(nil), "VK.Proto.LogSpayCashCard")
	proto.RegisterType((*LogSpayBank)(nil), "VK.Proto.LogSpayBank")
	proto.RegisterType((*LogBuYuScratchCard)(nil), "VK.Proto.LogBuYuScratchCard")
	proto.RegisterType((*PersonalRecordInfo)(nil), "VK.Proto.PersonalRecordInfo")
	proto.RegisterType((*LogPersonalRecord)(nil), "VK.Proto.LogPersonalRecord")
	proto.RegisterType((*LogNewAgentRelation)(nil), "VK.Proto.LogNewAgentRelation")
	proto.RegisterType((*LogSetAgentEffective)(nil), "VK.Proto.LogSetAgentEffective")
	proto.RegisterType((*LogUpdateNewAgentsTopUserId)(nil), "VK.Proto.LogUpdateNewAgentsTopUserId")
	proto.RegisterType((*LogForbiddenNewAgent)(nil), "VK.Proto.LogForbiddenNewAgent")
	proto.RegisterType((*LogPaymentRecord)(nil), "VK.Proto.LogPaymentRecord")
	proto.RegisterType((*LogCardExchange)(nil), "VK.Proto.LogCardExchange")
	proto.RegisterType((*ThirdPartyGameTransferRecords)(nil), "VK.Proto.ThirdPartyGameTransferRecords")
	proto.RegisterType((*ThirdPartyGameBet)(nil), "VK.Proto.ThirdPartyGameBet")
	proto.RegisterType((*ThirdPartyGameBetList)(nil), "VK.Proto.ThirdPartyGameBetList")
	proto.RegisterType((*LogPlayerInfo)(nil), "VK.Proto.LogPlayerInfo")
	proto.RegisterType((*LogNoviceGuide)(nil), "VK.Proto.LogNoviceGuide")
	proto.RegisterType((*LogRechargeFeedback)(nil), "VK.Proto.LogRechargeFeedback")
	proto.RegisterType((*LogPhoneMailCode)(nil), "VK.Proto.LogPhoneMailCode")
	proto.RegisterType((*LogChmLocker)(nil), "VK.Proto.LogChmLocker")
	proto.RegisterType((*LogUserAccount)(nil), "VK.Proto.LogUserAccount")
	proto.RegisterEnum("VK.Proto.ELogCategory", ELogCategory_name, ELogCategory_value)
	proto.RegisterEnum("VK.Proto.LogSpayCashCardType", LogSpayCashCardType_name, LogSpayCashCardType_value)
}

func init() { proto.RegisterFile("server_log.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 4473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x6f, 0x24, 0x49,
	0x56, 0xa7, 0x2a, 0x5d, 0x76, 0x55, 0xf8, 0xa3, 0xb3, 0xb3, 0xbb, 0x3d, 0x39, 0xee, 0x1e, 0x8f,
	0x37, 0x99, 0x5d, 0xcc, 0x30, 0xf4, 0x0e, 0xc3, 0xc0, 0xf2, 0xb1, 0x7c, 0xb4, 0xcb, 0x76, 0x8f,
	0x77, 0xcb, 0xdd, 0x56, 0x96, 0xbb, 0x5b, 0x73, 0x1a, 0xc2, 0x99, 0xe1, 0xaa, 0x94, 0xb3, 0x32,
	0x4a, 0x99, 0x51, 0x9e, 0x2e, 0x6e, 0xcb, 0x01, 0x24, 0x58, 0x2e, 0x2b, 0x16, 0x01, 0x17, 0x38,
	0x20, 0x2e, 0x70, 0x41, 0xac, 0x90, 0x40, 0x42, 0xe2, 0x8e, 0x38, 0x70, 0xe1, 0xc8, 0x9d, 0x03,
	0x7f, 0x00, 0x9c, 0xd0, 0x7b, 0x2f, 0x22, 0x33, 0x32, 0xcb, 0x1f, 0x33, 0x1c, 0x66, 0xfb, 0xc0,
	0xc9, 0xf9, 0x7e, 0x11, 0x15, 0xf1, 0xe2, 0xbd, 0x17, 0xef, 0x23, 0x22, 0xcc, 0xdc, 0x42, 0xe4,
	0x97, 0x22, 0xff, 0x2c, 0x95, 0xa3, 0xc7, 0xd3, 0x5c, 0x2a, 0xe9, 0x75, 0x5f, 0x7e, 0xf7, 0xf1,
	0x09, 0x7c, 0x6d, 0x79, 0xc5, 0x98, 0xe7, 0x22, 0xfe, 0x4c, 0x64, 0xb3, 0x49, 0x41, 0xad, 0x5b,
	0xf7, 0x34, 0x16, 0xc9, 0xc9, 0x44, 0x66, 0x04, 0x06, 0xbf, 0xdb, 0x62, 0xcb, 0x03, 0x39, 0x3a,
	0x2e, 0x46, 0xde, 0x47, 0xac, 0xdb, 0xe7, 0x4a, 0x8c, 0x64, 0x3e, 0xf7, 0x5b, 0x3b, 0xed, 0xdd,
	0x8d, 0x8f, 0x36, 0x1f, 0x9b, 0x01, 0x1f, 0x1f, 0x0c, 0xe4, 0xc8, 0xb4, 0x86, 0x65, 0x3f, 0xcf,
	0x63, 0x4b, 0xdf, 0x29, 0x64, 0xe6, 0xb7, 0x77, 0xda, 0xbb, 0xbd, 0x10, 0xbf, 0xbd, 0x1d, 0xd6,
	0x7e, 0x3e, 0xf4, 0x1d, 0x1c, 0xc1, 0xad, 0x46, 0x78, 0x3e, 0x3c, 0x9d, 0x4f, 0x45, 0xd8, 0x7e,
	0x3e, 0x84, 0x5f, 0x9d, 0x26, 0x13, 0xe1, 0x2f, 0xd1, 0xaf, 0xe0, 0x3b, 0xf8, 0x16, 0x5b, 0x21,
	0x3e, 0x0a, 0xef, 0x03, 0xd6, 0x3d, 0x16, 0x45, 0xc1, 0x47, 0xa2, 0xf0, 0x5b, 0x3b, 0xce, 0xee,
	0xaa, 0x3d, 0x0c, 0x75, 0x0a, 0xcb, 0x1e, 0xc1, 0xef, 0xb7, 0x59, 0x77, 0x20, 0x47, 0x03, 0x39,
	0x4a, 0x32, 0x6f, 0x8b, 0x75, 0x4f, 0x52, 0x3e, 0x17, 0xf9, 0x51, 0x8c, 0x6b, 0x70, 0xc2, 0x92,
	0xf6, 0x36, 0x58, 0xfb, 0x68, 0xaa, 0x39, 0x6d, 0x1f, 0x4d, 0x81, 0x8b, 0xa3, 0x89, 0x48, 0x90,
	0xd3, 0x5e, 0x88, 0xdf, 0x57, 0x71, 0xe6, 0x6d, 0xb2, 0xe5, 0xa7, 0x7c, 0x22, 0x8e, 0x62, 0xbf,
	0xb3, 0xd3, 0xde, 0xed, 0x84, 0x9a, 0xf2, 0x7c, 0xb6, 0xf2, 0x34, 0x97, 0xb3, 0xe9, 0x51, 0xec,
	0x2f, 0x63, 0x83, 0x21, 0xbd, 0x5d, 0xb6, 0x3c, 0x9c, 0x17, 0x4a, 0x4c, 0xfc, 0x95, 0x6b, 0xa4,
	0xa0, 0xdb, 0x81, 0xdf, 0x81, 0x8c, 0xb8, 0x4a, 0x64, 0xe6, 0x77, 0x71, 0xce, 0x92, 0xf6, 0xee,
	0xb3, 0xce, 0xb1, 0x8c, 0x45, 0xea, 0xf7, 0xb0, 0x81, 0x08, 0xef, 0x11, 0xeb, 0xed, 0x25, 0xb9,
	0x1a, 0x23, 0x9b, 0x0c, 0x5b, 0x2a, 0x20, 0xf8, 0xd7, 0x36, 0x5b, 0x1d, 0xc8, 0xd1, 0x69, 0xce,
	0xb3, 0xe2, 0x5c, 0xe4, 0x37, 0xca, 0xe3, 0x37, 0xd9, 0x86, 0xe9, 0x37, 0x94, 0xb3, 0x3c, 0x12,
	0x28, 0x9b, 0x8d, 0x8f, 0xfc, 0x8a, 0xdb, 0x7a, 0x7b, 0xd8, 0xe8, 0x6f, 0x49, 0xc6, 0xa9, 0x49,
	0xe6, 0x2a, 0x29, 0xde, 0x67, 0x9d, 0x93, 0x5c, 0x4e, 0x0b, 0xbf, 0xb3, 0xe3, 0xc0, 0x6a, 0x90,
	0xb8, 0x41, 0x86, 0x5b, 0xac, 0xfb, 0x32, 0x99, 0x0e, 0xc4, 0xa5, 0x48, 0xfd, 0x95, 0x9d, 0x16,
	0x70, 0x6e, 0x68, 0x90, 0xc1, 0xc1, 0xa5, 0xc8, 0x14, 0x88, 0xd2, 0xef, 0xee, 0xb4, 0x76, 0x3b,
	0x61, 0x05, 0x78, 0x3b, 0x6c, 0x75, 0xc8, 0xcf, 0xc5, 0x9e, 0x7c, 0xdd, 0x97, 0x49, 0xe6, 0xf7,
	0xf0, 0xc7, 0x36, 0xe4, 0xed, 0xb2, 0x3b, 0xd8, 0x7d, 0x5f, 0x28, 0x9e, 0xa4, 0x68, 0xc0, 0x6c,
	0xa7, 0xb5, 0xdb, 0x0b, 0x9b, 0x70, 0x70, 0xc8, 0xba, 0x7b, 0x3c, 0xbb, 0xe8, 0xf3, 0x3c, 0xf6,
	0xb6, 0x19, 0x83, 0xbf, 0xcf, 0x66, 0x93, 0x33, 0x91, 0xa3, 0x34, 0x7b, 0xa1, 0x85, 0x00, 0xc7,
	0xd0, 0x17, 0x57, 0xde, 0x26, 0x59, 0x1b, 0x3a, 0x78, 0xc1, 0xd6, 0x07, 0x72, 0x44, 0xa2, 0xc7,
	0xc1, 0x6e, 0x52, 0xcc, 0x2e, 0xeb, 0x40, 0x9f, 0xc2, 0x6f, 0xa3, 0xf1, 0x7b, 0x95, 0x3e, 0x0c,
	0x2f, 0x21, 0x75, 0x08, 0xfe, 0x61, 0x19, 0xd5, 0x7d, 0x32, 0xcb, 0xa3, 0x31, 0x2f, 0x04, 0x9a,
	0x78, 0xac, 0x59, 0x6b, 0x1f, 0xd5, 0x67, 0x69, 0x37, 0x66, 0xd9, 0x64, 0xcb, 0xaf, 0x78, 0x6e,
	0x94, 0xd7, 0x0b, 0x35, 0x05, 0xf8, 0x93, 0x89, 0x9c, 0x65, 0x0a, 0xd5, 0xe7, 0x84, 0x9a, 0xf2,
	0x3e, 0x60, 0x2b, 0xfd, 0x31, 0xcf, 0x32, 0x91, 0xe2, 0x3e, 0xd8, 0xb0, 0xf9, 0x3a, 0xd0, 0x2d,
	0xa1, 0xe9, 0x62, 0x99, 0xc6, 0x72, 0xcd, 0x34, 0x1e, 0xb3, 0xe5, 0xa1, 0xe2, 0x6a, 0x56, 0xe8,
	0xad, 0x61, 0xbb, 0x98, 0xe7, 0x79, 0x2c, 0x72, 0x6a, 0x0d, 0x75, 0x2f, 0x30, 0x90, 0x83, 0xd7,
	0x6a, 0x9f, 0x2b, 0xae, 0xf7, 0x87, 0x21, 0x41, 0xcd, 0x07, 0x79, 0x2e, 0x73, 0xd2, 0x96, 0xde,
	0x24, 0x36, 0x54, 0x9a, 0x21, 0xb3, 0xcc, 0xd0, 0x67, 0x2b, 0x9f, 0xf0, 0x2c, 0x4e, 0x45, 0xec,
	0xaf, 0xee, 0xb4, 0x77, 0xbb, 0xa1, 0x21, 0xc1, 0x28, 0xfa, 0x69, 0x22, 0x32, 0x75, 0xf0, 0x5a,
	0xe5, 0x1c, 0x67, 0x5c, 0xc3, 0x1f, 0x36, 0x61, 0xef, 0x63, 0xb6, 0x12, 0x8a, 0xcf, 0x51, 0x43,
	0xeb, 0xa8, 0xa1, 0xad, 0x6a, 0x11, 0x60, 0xd6, 0x07, 0xaf, 0xa3, 0x31, 0xcf, 0x46, 0x02, 0x3a,
	0x87, 0xa6, 0x2b, 0x18, 0xed, 0x49, 0x2e, 0xe3, 0x59, 0xa4, 0x8e, 0x62, 0x7f, 0x03, 0xcd, 0xad,
	0x02, 0xbc, 0x6f, 0xb0, 0x0d, 0xf3, 0x33, 0xad, 0x95, 0x3b, 0xd8, 0xa5, 0x81, 0x7a, 0x2e, 0x73,
	0xfa, 0xe3, 0x89, 0x7f, 0x1f, 0x8d, 0x1a, 0x3e, 0xbd, 0xf7, 0xd8, 0xfa, 0x93, 0x38, 0x4e, 0xc0,
	0x65, 0xf0, 0x14, 0xda, 0x1e, 0x60, 0x5b, 0x1d, 0x84, 0x75, 0x0f, 0xc4, 0xb9, 0x82, 0xf6, 0x4d,
	0x6c, 0x37, 0x24, 0x8c, 0x78, 0x28, 0x84, 0xff, 0x16, 0x8d, 0x78, 0x28, 0x04, 0x18, 0xfa, 0xc1,
	0xeb, 0x69, 0x92, 0x0b, 0x94, 0x9e, 0x8f, 0x7c, 0x58, 0x88, 0x76, 0xf0, 0x6f, 0xef, 0xb4, 0xae,
	0x75, 0xf0, 0xdb, 0x8c, 0x9d, 0xf0, 0xe8, 0x82, 0x8f, 0x44, 0x7f, 0x9c, 0xf9, 0x5b, 0xb8, 0x43,
	0x2d, 0x04, 0x56, 0x7b, 0x54, 0x84, 0x62, 0x9a, 0xf2, 0x48, 0xa0, 0xd6, 0xfd, 0x87, 0x3b, 0xad,
	0xdd, 0x6e, 0xd8, 0x40, 0xd1, 0x45, 0x1f, 0x1f, 0x1c, 0xf9, 0x8f, 0x90, 0x07, 0xfc, 0x86, 0xb1,
	0x87, 0xb3, 0x33, 0x63, 0x8a, 0xef, 0xd0, 0xd8, 0x15, 0x02, 0x96, 0x17, 0x8a, 0x09, 0xcf, 0x2f,
	0xfc, 0x6d, 0xfc, 0x95, 0xa6, 0x70, 0x6f, 0x9c, 0xf8, 0xef, 0x22, 0xd6, 0x3e, 0x3a, 0x09, 0x46,
	0xac, 0x37, 0x90, 0xa3, 0xe7, 0x59, 0x9a, 0x64, 0xb6, 0x27, 0x6b, 0xd5, 0xcc, 0xf5, 0x3e, 0xeb,
	0xf4, 0x71, 0x2f, 0xb4, 0x11, 0x26, 0xa2, 0x34, 0x2c, 0xa7, 0x6e, 0x58, 0xc6, 0x93, 0x2d, 0xd5,
	0x3c, 0x59, 0xf0, 0xe7, 0x2d, 0xdc, 0xfc, 0x34, 0x53, 0x23, 0xa2, 0xd4, 0x67, 0xbb, 0x69, 0xbb,
	0x6e, 0x33, 0x56, 0x8d, 0xa0, 0x67, 0xb6, 0x10, 0xd8, 0x0e, 0xcf, 0xcf, 0xcf, 0xcb, 0x0e, 0xe4,
	0x7a, 0x6d, 0xc8, 0xe6, 0xb0, 0x53, 0xe7, 0xf0, 0x07, 0x14, 0x42, 0x4f, 0x73, 0x1e, 0x0b, 0x58,
	0xdc, 0x61, 0x2e, 0x27, 0xda, 0x2b, 0xe1, 0x37, 0xc8, 0xee, 0x54, 0x6a, 0x96, 0xda, 0xa7, 0xd2,
	0xf2, 0x11, 0x4e, 0xcd, 0x47, 0x5c, 0xe5, 0xf8, 0x5d, 0xe6, 0x9c, 0xf2, 0xd7, 0x38, 0xa5, 0x13,
	0xc2, 0x27, 0xec, 0x04, 0x9c, 0x0a, 0xdd, 0xf7, 0x32, 0xb9, 0xef, 0x12, 0x00, 0x36, 0x61, 0xce,
	0x97, 0xc9, 0x54, 0xfb, 0x7d, 0x43, 0x82, 0x32, 0x4e, 0x25, 0xe0, 0x5d, 0xc4, 0x89, 0x00, 0xa1,
	0x41, 0x07, 0x50, 0x3f, 0xfa, 0xfa, 0x4e, 0x58, 0xd2, 0xc0, 0xe7, 0xa9, 0xc4, 0x16, 0x86, 0x2d,
	0x9a, 0xf2, 0x02, 0xb6, 0xf6, 0x64, 0x24, 0x32, 0x15, 0x8a, 0x4b, 0x91, 0xcd, 0x84, 0xbf, 0x8a,
	0x03, 0xd6, 0xb0, 0xe0, 0x07, 0x2d, 0xb6, 0x36, 0x90, 0xa3, 0x43, 0x99, 0x9f, 0x25, 0x71, 0x2c,
	0xb2, 0xd2, 0xb9, 0x3a, 0xda, 0xb9, 0xba, 0xcc, 0x79, 0x35, 0x9e, 0xeb, 0x84, 0x02, 0x3e, 0x81,
	0x95, 0xfd, 0x59, 0x4e, 0xd1, 0x9c, 0x22, 0x62, 0x49, 0x5b, 0x66, 0x49, 0xc2, 0x31, 0x66, 0xe9,
	0xb1, 0xa5, 0xe7, 0xd3, 0xbd, 0x39, 0xca, 0xa7, 0x17, 0xe2, 0x37, 0x88, 0x60, 0xa8, 0x78, 0xae,
	0x9e, 0x28, 0xf4, 0x9e, 0xbd, 0xd0, 0x90, 0xc1, 0x1f, 0xb6, 0xd0, 0xe1, 0x87, 0x62, 0x94, 0x14,
	0xea, 0x96, 0xf8, 0xfe, 0x7f, 0xcd, 0x77, 0xde, 0x67, 0x4b, 0xa8, 0x99, 0x4e, 0xd3, 0x41, 0x9b,
	0x59, 0x71, 0x9b, 0x63, 0x9f, 0xe0, 0x0f, 0x96, 0x28, 0x6d, 0x03, 0x77, 0xdb, 0x0c, 0x3e, 0x60,
	0x6f, 0xd0, 0x80, 0xc6, 0x0c, 0xbb, 0xce, 0x90, 0x35, 0xae, 0x9d, 0x06, 0xd7, 0xc6, 0xfc, 0x34,
	0x47, 0x68, 0x7e, 0xa0, 0xf8, 0x44, 0xa5, 0x42, 0x0b, 0x89, 0x08, 0x18, 0xbf, 0x2f, 0x33, 0x25,
	0xb2, 0x52, 0x4a, 0x9a, 0xc4, 0x48, 0x9d, 0x0b, 0xae, 0x68, 0x2b, 0xac, 0xe8, 0x48, 0x5d, 0x22,
	0x0d, 0x07, 0x47, 0x71, 0xc5, 0x76, 0x70, 0xbb, 0xec, 0xce, 0x13, 0xa5, 0x78, 0x34, 0x9e, 0x88,
	0x4c, 0x15, 0xa7, 0x52, 0x5e, 0x60, 0x78, 0xe9, 0x86, 0x4d, 0x18, 0x83, 0x46, 0x39, 0xee, 0x50,
	0xf1, 0xc9, 0x14, 0xa3, 0x8d, 0x13, 0x36, 0x61, 0xef, 0xdb, 0x6c, 0xd5, 0xfa, 0xb1, 0xbf, 0x7a,
	0x6b, 0xe0, 0xb0, 0xbb, 0x63, 0xc6, 0x63, 0x85, 0x25, 0x0c, 0x1e, 0x55, 0x40, 0x0a, 0xd8, 0x1a,
	0xc8, 0xa9, 0x94, 0xe9, 0x3a, 0x99, 0xb3, 0x8d, 0x79, 0x87, 0xec, 0xae, 0x35, 0xa0, 0x4e, 0xf8,
	0x36, 0xd0, 0x87, 0x5f, 0x9f, 0xf0, 0x2d, 0xfe, 0x04, 0x74, 0x07, 0x2b, 0x47, 0xc9, 0x51, 0x88,
	0x2a, 0xe9, 0xe0, 0xef, 0x5a, 0xec, 0x4e, 0xe9, 0xe9, 0x28, 0xee, 0xdd, 0x68, 0xa1, 0xc6, 0xfa,
	0xda, 0x96, 0xf5, 0x59, 0xc1, 0xd5, 0xf9, 0xe2, 0xc1, 0x75, 0x8b, 0x75, 0xe9, 0xb3, 0x74, 0xbf,
	0x25, 0x8d, 0xc1, 0x08, 0x67, 0xd4, 0x56, 0x4d, 0xc1, 0xa8, 0x44, 0x82, 0xdf, 0x71, 0x18, 0xc3,
	0x02, 0x42, 0x29, 0x91, 0xcf, 0xc1, 0xd8, 0x8e, 0x8a, 0x62, 0x26, 0xb4, 0x25, 0x13, 0x01, 0x51,
	0x56, 0x77, 0xd0, 0xf9, 0x1f, 0xf1, 0x5c, 0x07, 0x29, 0xc9, 0x4d, 0x22, 0xa1, 0xad, 0x9a, 0x08,
	0x50, 0x8f, 0xee, 0x06, 0x49, 0x8d, 0xd0, 0x0c, 0xd6, 0x30, 0xe8, 0x63, 0xb2, 0x38, 0x14, 0x09,
	0xb9, 0xcb, 0x1a, 0x06, 0x3c, 0x1c, 0x9c, 0x9f, 0x8b, 0x48, 0x25, 0x97, 0xd4, 0x69, 0x19, 0x3b,
	0xd5, 0x41, 0x18, 0xe9, 0x93, 0x44, 0xd1, 0xea, 0x9f, 0xcd, 0xa8, 0x04, 0x71, 0xc2, 0x1a, 0x66,
	0x29, 0x65, 0x1f, 0xcd, 0xbf, 0x52, 0xca, 0x3e, 0xb4, 0x3d, 0x4b, 0xa2, 0x8b, 0x67, 0x7c, 0x22,
	0x74, 0x52, 0x55, 0xd2, 0xf8, 0x3b, 0x99, 0xab, 0x9c, 0x27, 0x4a, 0x67, 0x55, 0x25, 0x5d, 0x4b,
	0xd8, 0x57, 0x49, 0x05, 0x65, 0xc2, 0xbe, 0xc3, 0x56, 0xcd, 0x4a, 0x80, 0xa5, 0x35, 0x6c, 0xb6,
	0xa1, 0xe0, 0x7f, 0x5a, 0x6c, 0x73, 0x20, 0x47, 0x7b, 0x9f, 0xee, 0x0f, 0xf6, 0xbf, 0xc3, 0xa3,
	0x8b, 0xa9, 0x54, 0xaf, 0x92, 0x2c, 0x13, 0x79, 0x71, 0xa3, 0x05, 0x59, 0x31, 0xad, 0x5d, 0xaf,
	0x1f, 0x36, 0xd9, 0xf2, 0x89, 0x94, 0x69, 0x55, 0x9b, 0x10, 0x05, 0x2a, 0x0a, 0xc1, 0x23, 0x6b,
	0x2d, 0x10, 0x01, 0xe8, 0x13, 0x10, 0x8e, 0x96, 0x3b, 0x11, 0xb0, 0xeb, 0x06, 0xb2, 0x10, 0xc7,
	0x32, 0x13, 0x73, 0x2d, 0xec, 0x0a, 0xc0, 0x84, 0x4e, 0xca, 0x94, 0x5a, 0x49, 0xca, 0x15, 0x60,
	0xc5, 0xf8, 0xee, 0x42, 0x6d, 0x04, 0x76, 0xd8, 0x43, 0x94, 0xbc, 0xe8, 0x7f, 0xb4, 0xd9, 0xfd,
	0x81, 0x1c, 0xed, 0xcf, 0x26, 0x93, 0xf9, 0x31, 0x57, 0xd1, 0xf8, 0x0b, 0x2e, 0x1d, 0xfb, 0x56,
	0x4b, 0xd7, 0x24, 0x30, 0x86, 0x9f, 0x38, 0x0f, 0xad, 0xbe, 0x02, 0x20, 0xf7, 0xda, 0x13, 0xa3,
	0x24, 0x03, 0x63, 0x29, 0xd0, 0x63, 0x51, 0x9e, 0xdf, 0x40, 0x81, 0xd1, 0xbe, 0x2c, 0x94, 0x96,
	0x08, 0x7e, 0xa3, 0xcb, 0x1d, 0x27, 0xd3, 0xa7, 0x42, 0x69, 0x71, 0x18, 0x12, 0x36, 0xd9, 0x7e,
	0xc2, 0x27, 0x32, 0x8b, 0xa1, 0x91, 0xa4, 0x61, 0x21, 0x30, 0x5a, 0xc8, 0xb3, 0x0b, 0x6d, 0x6d,
	0xf8, 0x0d, 0x9c, 0x3c, 0x4d, 0xce, 0xd5, 0x4b, 0x39, 0x8b, 0xc6, 0x22, 0x87, 0xdf, 0x51, 0xad,
	0xd6, 0x40, 0x51, 0x95, 0xb9, 0x04, 0x1d, 0xeb, 0x28, 0x4e, 0x54, 0x95, 0x9c, 0x51, 0xf8, 0xb6,
	0x92, 0x33, 0x58, 0xf8, 0x1a, 0xf6, 0x25, 0x01, 0x5f, 0xb2, 0x0d, 0x73, 0x44, 0xf0, 0x55, 0xba,
	0xa5, 0xe0, 0x8f, 0x5a, 0xcc, 0x1d, 0xc8, 0xd1, 0x33, 0xf1, 0xf9, 0xa7, 0x82, 0xe7, 0x6f, 0x8a,
	0x47, 0x0c, 0x7e, 0xd8, 0x62, 0x77, 0x21, 0xb5, 0x11, 0x85, 0x4a, 0x2e, 0x79, 0xfa, 0xc6, 0xf0,
	0xf5, 0x27, 0x2d, 0xdc, 0x07, 0xc3, 0x69, 0xca, 0x8b, 0xf1, 0x2b, 0xae, 0xc4, 0x57, 0x2e, 0xb2,
	0xd2, 0x83, 0x2d, 0xd5, 0x8f, 0x1c, 0x82, 0xff, 0xa4, 0x24, 0x9e, 0xba, 0xc2, 0x2e, 0xbf, 0x36,
	0x89, 0xbf, 0xde, 0x25, 0x6d, 0xb1, 0xee, 0x10, 0x8f, 0xec, 0xca, 0x9a, 0xbb, 0xa4, 0xaf, 0x38,
	0x8c, 0x59, 0xfa, 0x92, 0x87, 0x31, 0x46, 0x0e, 0x9d, 0xba, 0x1c, 0xfa, 0xb8, 0xd0, 0xc2, 0x5f,
	0xbe, 0x5d, 0x0e, 0xba, 0x6b, 0xf0, 0xc7, 0x64, 0xb5, 0x87, 0xb9, 0x10, 0xbf, 0x2d, 0x9e, 0x44,
	0x11, 0x6e, 0xab, 0x37, 0x21, 0xfb, 0xfd, 0xbd, 0x16, 0xd6, 0x6c, 0xc3, 0xd9, 0x74, 0x9a, 0xce,
	0x6f, 0x34, 0x8a, 0x47, 0xac, 0x07, 0x9e, 0xa9, 0xaa, 0xdd, 0x9c, 0xb0, 0x02, 0x6a, 0x8a, 0x76,
	0x1a, 0xa1, 0xea, 0x3d, 0xb6, 0xde, 0x1f, 0x8b, 0x6c, 0xa4, 0x66, 0xb2, 0x6f, 0x9d, 0x82, 0xd4,
	0xc1, 0xe0, 0xcf, 0x28, 0x5c, 0x0d, 0xa1, 0x56, 0xd8, 0xe7, 0xf3, 0x62, 0x98, 0x8c, 0xb2, 0x37,
	0x66, 0x1b, 0xfd, 0x15, 0x31, 0xf7, 0x62, 0x1a, 0x73, 0x25, 0x4e, 0xc6, 0xf3, 0x22, 0x89, 0x78,
	0xfa, 0x54, 0xca, 0xb8, 0xf0, 0x3e, 0x66, 0x1d, 0xfc, 0xd0, 0xe7, 0xaa, 0xdb, 0xd6, 0x54, 0x76,
	0x3f, 0xb2, 0x84, 0x38, 0xa4, 0xce, 0xa4, 0x3d, 0x5e, 0x9d, 0xf3, 0x6a, 0xca, 0xd2, 0xaa, 0x73,
	0xa5, 0x56, 0x97, 0xa8, 0x6c, 0x47, 0xad, 0x5e, 0x61, 0x9e, 0xc1, 0xdf, 0xb4, 0x99, 0x07, 0x71,
	0x8f, 0x27, 0xe9, 0x7c, 0x38, 0x4d, 0xb2, 0x37, 0x29, 0x65, 0xa4, 0xef, 0xb2, 0x10, 0xea, 0x84,
	0x16, 0x02, 0xed, 0x3a, 0x49, 0x39, 0x11, 0xb9, 0x2e, 0x61, 0x2d, 0x04, 0xc6, 0x86, 0x78, 0x89,
	0xbf, 0x5e, 0xa1, 0x9a, 0xd4, 0xd0, 0x68, 0x9a, 0xb2, 0x50, 0x64, 0x5c, 0x54, 0xc9, 0x56, 0x40,
	0xcd, 0x34, 0x7b, 0x0d, 0x1f, 0xf4, 0xb7, 0x6d, 0xf6, 0x16, 0x84, 0xb1, 0x59, 0x74, 0x31, 0x3f,
	0x9d, 0xe5, 0x99, 0xe2, 0x67, 0xa9, 0xf8, 0x7f, 0x99, 0xdd, 0x28, 0x33, 0xed, 0xcb, 0x86, 0x49,
	0x2a, 0x32, 0xf5, 0x26, 0xf9, 0xb2, 0xef, 0x13, 0x63, 0xe0, 0x94, 0x42, 0x31, 0x4d, 0x45, 0x96,
	0x14, 0xe3, 0x2f, 0xad, 0xc5, 0x2a, 0x33, 0x32, 0x49, 0x6e, 0x23, 0x33, 0x22, 0xe7, 0xd5, 0x59,
	0x94, 0x13, 0x65, 0x75, 0x95, 0x9c, 0x7e, 0x48, 0xa5, 0xdb, 0x5e, 0xca, 0xa3, 0x8b, 0x37, 0x49,
	0x4c, 0x29, 0xd6, 0x66, 0xa1, 0x88, 0x44, 0x32, 0x55, 0x37, 0xca, 0x67, 0x87, 0xad, 0xea, 0x6e,
	0x58, 0x24, 0x13, 0x97, 0x36, 0x64, 0xf5, 0xf8, 0x84, 0x17, 0x63, 0xed, 0xb3, 0x6c, 0xc8, 0x28,
	0x85, 0x0a, 0xd8, 0x57, 0x22, 0x3d, 0xe7, 0xb9, 0xf8, 0x31, 0x2a, 0xe5, 0xef, 0x89, 0x1d, 0xcc,
	0x84, 0x06, 0x7c, 0x32, 0x7d, 0xf5, 0x63, 0xb5, 0x91, 0x32, 0xb3, 0x5e, 0xae, 0x4a, 0x17, 0x18,
	0x65, 0x18, 0xc9, 0x5c, 0xe8, 0x94, 0x9f, 0x88, 0xe0, 0x1f, 0x89, 0xf1, 0x83, 0x54, 0x4c, 0xc7,
	0x3c, 0x53, 0x27, 0xc9, 0x68, 0x34, 0x7f, 0xc3, 0x18, 0xf7, 0xd9, 0xca, 0xde, 0x6c, 0x6e, 0x79,
	0x1b, 0x43, 0x06, 0x3f, 0x6a, 0x23, 0xf3, 0x83, 0x64, 0x92, 0x28, 0x60, 0x04, 0xaa, 0x91, 0x5a,
	0xc5, 0xdc, 0x6a, 0x54, 0xcc, 0x90, 0x09, 0x26, 0xe7, 0xea, 0x68, 0x5f, 0x27, 0x7c, 0x9a, 0xba,
	0xe6, 0x34, 0xc0, 0x3e, 0x72, 0x73, 0xf4, 0x52, 0xdf, 0x63, 0xeb, 0xfb, 0x22, 0x55, 0xbc, 0xb6,
	0x82, 0x4e, 0x58, 0x07, 0x6b, 0x4b, 0x5c, 0x6e, 0xa4, 0x2d, 0xe0, 0x21, 0xf3, 0x44, 0xd5, 0x8a,
	0xd1, 0x12, 0xa8, 0xb4, 0xd4, 0xb5, 0xb4, 0x04, 0xb3, 0x9e, 0xe6, 0xc9, 0x68, 0x24, 0x72, 0x9d,
	0xc8, 0xd2, 0xf1, 0x69, 0x1d, 0x84, 0x2a, 0xcd, 0x14, 0xea, 0xba, 0x1b, 0x55, 0x61, 0x0d, 0x34,
	0xf8, 0xef, 0x96, 0xbe, 0x7a, 0x14, 0xbc, 0x98, 0xd5, 0xb6, 0xcd, 0xa2, 0xc4, 0x5c, 0xe6, 0xbc,
	0x4c, 0xa6, 0x5a, 0x5c, 0xf0, 0x79, 0xad, 0xb2, 0xe9, 0xd6, 0x64, 0x5a, 0x29, 0xbc, 0x13, 0x56,
	0x40, 0x75, 0x56, 0x43, 0xf2, 0xd2, 0x67, 0x35, 0xdb, 0x8c, 0x61, 0x8c, 0xec, 0xcb, 0x58, 0x27,
	0xbe, 0x9d, 0xd0, 0x42, 0x30, 0xd2, 0xcc, 0xf2, 0x5c, 0x64, 0x11, 0x89, 0x0a, 0x22, 0x8d, 0xa6,
	0x2b, 0x9d, 0x51, 0xd5, 0xae, 0x75, 0x56, 0x3f, 0x50, 0xec, 0x51, 0x75, 0x5b, 0x21, 0xc1, 0x9f,
	0xb6, 0xb1, 0xa0, 0x32, 0x6b, 0xa7, 0xf2, 0xbd, 0x21, 0x81, 0xd6, 0xd5, 0x12, 0x68, 0x7d, 0x15,
	0x12, 0x68, 0x35, 0x24, 0xb0, 0x59, 0xbb, 0x85, 0xeb, 0x94, 0xb7, 0x6d, 0x8f, 0x58, 0x0f, 0x1d,
	0x6f, 0x79, 0x2e, 0xea, 0x84, 0x15, 0x80, 0x77, 0x71, 0x59, 0x6c, 0x89, 0xc0, 0x90, 0x35, 0x89,
	0xb2, 0xba, 0x44, 0x83, 0xef, 0xb5, 0x31, 0xb2, 0x0c, 0xa7, 0x7c, 0xde, 0xe7, 0xc5, 0xb8, 0x71,
	0xfb, 0xb9, 0x68, 0x1b, 0x3e, 0x9e, 0x28, 0xe3, 0xc6, 0xd4, 0xf5, 0x93, 0x26, 0xf5, 0x41, 0x9e,
	0x3a, 0x97, 0xf9, 0xe4, 0x68, 0x5f, 0x4b, 0xc9, 0x42, 0x60, 0x55, 0x30, 0xfa, 0xd1, 0xbe, 0x89,
	0x38, 0x44, 0xe1, 0xa9, 0x05, 0x54, 0x6d, 0x45, 0xac, 0x83, 0x8e, 0x21, 0xad, 0x7b, 0x8c, 0xe5,
	0xda, 0x3d, 0x86, 0x2d, 0x9f, 0x96, 0x25, 0x9f, 0x2a, 0xa6, 0x75, 0x6b, 0x77, 0x4b, 0x4d, 0xfb,
	0x68, 0xd5, 0x0f, 0x9c, 0x83, 0x7f, 0xa1, 0xbd, 0x01, 0x32, 0xd8, 0xe3, 0xd9, 0xc5, 0x6d, 0xeb,
	0xc7, 0xcb, 0x2f, 0xed, 0x4e, 0x7a, 0xa1, 0x21, 0xaf, 0xbd, 0x75, 0xf1, 0xab, 0x5c, 0x8e, 0x9c,
	0x4a, 0x99, 0xaf, 0xd5, 0xf9, 0xea, 0x2c, 0x1c, 0x84, 0x3f, 0x62, 0x3d, 0x1c, 0x1c, 0xaf, 0xc0,
	0x29, 0xf2, 0x56, 0xc0, 0x75, 0x56, 0x12, 0x7c, 0x9f, 0xd2, 0xf6, 0xbd, 0xd9, 0xa7, 0xb3, 0x61,
	0x94, 0x73, 0x15, 0x8d, 0x6f, 0xbd, 0xd2, 0xae, 0x8a, 0xe5, 0xf6, 0x75, 0xc5, 0xb2, 0x53, 0x2f,
	0x96, 0x03, 0xb6, 0xb6, 0x37, 0x9b, 0xc3, 0xc0, 0xb6, 0xb3, 0xaf, 0x61, 0xd0, 0xe7, 0x45, 0x21,
	0xaa, 0x3e, 0xfa, 0xd0, 0xd4, 0xc6, 0xa0, 0xcf, 0xa9, 0x54, 0x3c, 0xed, 0xcb, 0x24, 0xab, 0xce,
	0xad, 0x6a, 0x98, 0xb7, 0xcb, 0xee, 0x1c, 0x73, 0x7c, 0x1a, 0x70, 0xc0, 0x69, 0x31, 0xda, 0x85,
	0x36, 0xe1, 0xd2, 0x79, 0x77, 0xad, 0x2a, 0xe6, 0x47, 0x2d, 0xe6, 0x9d, 0x88, 0xbc, 0x90, 0x19,
	0x4f, 0x43, 0x11, 0xc9, 0x3c, 0x3e, 0xca, 0xce, 0x65, 0xd9, 0xb5, 0x65, 0xf9, 0x79, 0xd8, 0x41,
	0x97, 0x22, 0xab, 0x42, 0x85, 0x21, 0xed, 0xcb, 0x0c, 0x87, 0x2e, 0x4b, 0xcc, 0x65, 0x06, 0xec,
	0x49, 0x7e, 0xae, 0x0f, 0x21, 0xe9, 0x58, 0xa2, 0x02, 0xf0, 0xdc, 0x0d, 0x82, 0x04, 0x35, 0x77,
	0xb0, 0xd9, 0x42, 0x30, 0xcc, 0xf1, 0x94, 0x67, 0x11, 0xdd, 0xb4, 0x39, 0xa1, 0x21, 0x03, 0x8e,
	0x2e, 0xab, 0xce, 0xf8, 0x8d, 0x3a, 0xfc, 0x90, 0x2d, 0xc1, 0xc2, 0x90, 0xf3, 0xd5, 0x8f, 0x1e,
	0x59, 0xf5, 0xc2, 0xc2, 0xe2, 0x43, 0xec, 0x09, 0x66, 0x7f, 0x8f, 0x8e, 0xbf, 0xf4, 0xcd, 0x5a,
	0x5a, 0xa6, 0x86, 0x2f, 0x0a, 0x6b, 0x0e, 0x4d, 0xe1, 0xcb, 0x8d, 0xd9, 0x54, 0xe4, 0xba, 0x91,
	0xea, 0x76, 0x1b, 0xc2, 0xab, 0x43, 0x39, 0xd5, 0xed, 0xb4, 0x0b, 0x2a, 0xa0, 0x61, 0xee, 0x4b,
	0x4d, 0x37, 0x8d, 0x2f, 0x34, 0x92, 0xcc, 0x2e, 0x50, 0x4a, 0x1a, 0xe6, 0x3e, 0x2a, 0xca, 0x93,
	0x74, 0x1d, 0x5f, 0x6d, 0x28, 0x78, 0x4c, 0x87, 0x53, 0x42, 0xe1, 0x62, 0x4a, 0xfc, 0xba, 0xd5,
	0x04, 0x2f, 0xd8, 0xc3, 0xb2, 0x0a, 0x37, 0x22, 0x28, 0x2a, 0x66, 0x7d, 0xb6, 0x42, 0x5f, 0x54,
	0x8c, 0x3b, 0xa1, 0x21, 0xeb, 0x8b, 0x6c, 0x37, 0x16, 0x19, 0xc4, 0xc8, 0x46, 0x79, 0x2d, 0x69,
	0x46, 0xbe, 0x61, 0xbc, 0xba, 0x58, 0xda, 0x0b, 0x62, 0x31, 0xe9, 0x91, 0xa3, 0x2d, 0x15, 0x92,
	0xa0, 0x7f, 0x76, 0x30, 0x09, 0x3a, 0xe1, 0xf3, 0x09, 0x6a, 0x0e, 0xad, 0xa3, 0x74, 0x4d, 0xe6,
	0x9a, 0xcf, 0x90, 0x37, 0xde, 0x5c, 0x5b, 0x0f, 0x47, 0x1c, 0xbc, 0x6f, 0xba, 0xf1, 0xe1, 0xc8,
	0x7b, 0x6c, 0xbd, 0x2f, 0x27, 0x13, 0x19, 0x27, 0x8a, 0xb2, 0xb3, 0x25, 0x4a, 0x4a, 0x6a, 0xa0,
	0x79, 0xb4, 0xd0, 0xa9, 0x3d, 0x5a, 0xb0, 0x16, 0x49, 0xb6, 0xde, 0xb8, 0xf3, 0x3b, 0x4c, 0xa0,
	0xc8, 0xd2, 0x77, 0x82, 0xd8, 0x5e, 0x21, 0x58, 0xca, 0x24, 0x45, 0x54, 0x56, 0x98, 0xbd, 0xb0,
	0xa4, 0x2d, 0xb7, 0xdf, 0xab, 0xb9, 0x7d, 0xcb, 0xf1, 0xd2, 0xfb, 0xa1, 0xd2, 0xf1, 0x56, 0xcf,
	0x5c, 0x56, 0x71, 0xc9, 0xb7, 0x3d, 0x73, 0xa9, 0x5c, 0xfb, 0x1a, 0x72, 0x66, 0x05, 0x22, 0xfd,
	0x1c, 0x64, 0x9d, 0x66, 0xd6, 0xcf, 0x40, 0x02, 0xb6, 0x46, 0x53, 0xf5, 0xc7, 0x72, 0x36, 0xe1,
	0x78, 0x91, 0xe7, 0x84, 0x35, 0x2c, 0xf8, 0x2f, 0x0a, 0xbc, 0xe0, 0xb7, 0x4c, 0x35, 0x0f, 0xaa,
	0x7e, 0x3a, 0x4b, 0x8c, 0xfa, 0xf0, 0xfb, 0x46, 0xdd, 0x55, 0xeb, 0x70, 0xbe, 0xd0, 0x73, 0x9d,
	0x2b, 0xb4, 0xd7, 0x5e, 0xd4, 0xde, 0x62, 0x58, 0x5a, 0xd0, 0x15, 0x70, 0x3d, 0x14, 0x79, 0xc2,
	0x53, 0xd4, 0xa5, 0x7e, 0x69, 0x45, 0x08, 0xa6, 0x1b, 0xe8, 0xe0, 0x63, 0xd2, 0x64, 0x2f, 0x2c,
	0x69, 0xd3, 0x66, 0x3d, 0x0d, 0x2b, 0x69, 0x4b, 0xca, 0xbd, 0x9a, 0x94, 0x5d, 0xe6, 0x1c, 0x17,
	0x23, 0xad, 0x43, 0xf8, 0x6c, 0x58, 0xcb, 0xea, 0x82, 0xb5, 0x98, 0xcb, 0x11, 0xd2, 0x16, 0x7e,
	0x07, 0xff, 0xd6, 0x62, 0xef, 0x9c, 0x8e, 0x93, 0x3c, 0x3e, 0xe1, 0xb9, 0x9a, 0x43, 0x80, 0x33,
	0x27, 0xb4, 0xb4, 0x7d, 0x6e, 0xbd, 0xce, 0x31, 0x7b, 0xab, 0x5d, 0xdf, 0x5b, 0x75, 0x69, 0x39,
	0x0b, 0xd2, 0xc2, 0x77, 0x82, 0x14, 0x1c, 0x30, 0xb9, 0x27, 0xc7, 0x1f, 0xb0, 0xb5, 0xe7, 0x33,
	0x35, 0x9d, 0xa9, 0x57, 0x3c, 0x4d, 0x45, 0x19, 0x1b, 0x6d, 0x0c, 0x7c, 0x5e, 0x92, 0x55, 0x5d,
	0x28, 0x34, 0xda, 0x50, 0xf0, 0x4f, 0x4b, 0xec, 0x6e, 0x7d, 0x4d, 0x7b, 0x74, 0x21, 0x83, 0xbe,
	0x65, 0xbf, 0xe6, 0xf1, 0xf6, 0xcb, 0x28, 0xbf, 0x8f, 0x79, 0xad, 0xa3, 0xa3, 0x3c, 0x06, 0xb7,
	0x43, 0x1e, 0x29, 0x99, 0xcf, 0x75, 0xd1, 0x6d, 0x48, 0xdc, 0x41, 0x72, 0x96, 0xc5, 0x49, 0xac,
	0x73, 0x36, 0x43, 0xa2, 0xae, 0xd2, 0xf4, 0x4c, 0x73, 0xde, 0x0b, 0x35, 0x45, 0x7b, 0x8e, 0x63,
	0xc3, 0xb2, 0xd9, 0x73, 0x48, 0xea, 0x04, 0xfa, 0x3c, 0x51, 0xfa, 0xc6, 0x5f, 0x53, 0xf4, 0x0b,
	0x7a, 0xe7, 0xd1, 0x35, 0xbf, 0x40, 0x12, 0xcb, 0x22, 0x95, 0x94, 0xf7, 0x9c, 0x44, 0x00, 0x7a,
	0xa0, 0xaa, 0x77, 0x63, 0x44, 0x80, 0x53, 0xd6, 0x4c, 0x27, 0xf4, 0x74, 0xac, 0x17, 0x56, 0x00,
	0xcc, 0xfd, 0xdd, 0x04, 0x97, 0x41, 0x97, 0xf3, 0x9a, 0x02, 0x3b, 0x81, 0x2f, 0xbd, 0x7b, 0xf1,
	0x1b, 0xac, 0x00, 0xe4, 0xa2, 0xc0, 0x42, 0x37, 0xc8, 0x0a, 0x0c, 0x0d, 0xb3, 0x1c, 0x15, 0x85,
	0x50, 0x2a, 0x15, 0xe6, 0x05, 0x58, 0x05, 0xc0, 0x2f, 0x9f, 0xc7, 0x71, 0x81, 0xbf, 0x74, 0xc9,
	0xee, 0x0d, 0x0d, 0x1c, 0x1c, 0xf3, 0xfc, 0x42, 0x28, 0xff, 0x2e, 0x71, 0x40, 0x14, 0x56, 0xcb,
	0x19, 0x9f, 0x08, 0xdf, 0x43, 0x98, 0x88, 0x32, 0x11, 0x49, 0x62, 0xff, 0x1e, 0xc9, 0x44, 0x93,
	0x60, 0x6d, 0x7b, 0x42, 0x45, 0x3a, 0x17, 0xb9, 0x4f, 0x7b, 0xaf, 0x42, 0x30, 0xa1, 0x10, 0x0a,
	0x59, 0x78, 0x40, 0xbf, 0xd4, 0x24, 0x1e, 0xec, 0xc4, 0x71, 0x81, 0xef, 0xcb, 0x7a, 0x21, 0x7e,
	0x07, 0x9f, 0xb0, 0x07, 0x0b, 0xe6, 0x33, 0x48, 0x0a, 0xe5, 0x7d, 0x93, 0x2d, 0xed, 0x09, 0x65,
	0xce, 0xa1, 0x1f, 0x5a, 0xb7, 0x1c, 0xcd, 0xee, 0x21, 0x76, 0x0c, 0xbe, 0xd7, 0xb2, 0x9e, 0x50,
	0x62, 0x82, 0x75, 0xd3, 0x6e, 0x7a, 0x9f, 0xb9, 0x74, 0x86, 0x7d, 0xc2, 0x8b, 0xe2, 0xf3, 0x58,
	0x07, 0x3e, 0xb0, 0xc9, 0x05, 0x1c, 0xb2, 0xbf, 0x13, 0x91, 0x43, 0x34, 0x87, 0x61, 0xf5, 0x26,
	0x83, 0xae, 0x4d, 0x38, 0xc8, 0xf0, 0x1a, 0xf1, 0x99, 0xbc, 0x4c, 0x22, 0x01, 0xae, 0x53, 0xdc,
	0xb6, 0xa3, 0x29, 0xbb, 0x8b, 0xeb, 0xc9, 0x5e, 0x5c, 0x3e, 0x6b, 0x73, 0xac, 0x67, 0x6d, 0x57,
	0xbd, 0x89, 0xfe, 0x6b, 0xca, 0x9f, 0x42, 0x11, 0x8d, 0x79, 0x3e, 0x12, 0x87, 0x42, 0xc4, 0x67,
	0x3c, 0xba, 0xb8, 0x6d, 0x56, 0x93, 0x48, 0xb6, 0xeb, 0xaf, 0x62, 0xaa, 0x57, 0x6b, 0xad, 0xf2,
	0x8c, 0x85, 0x8a, 0xcb, 0xb3, 0x54, 0x4c, 0xf0, 0x44, 0xb7, 0xa5, 0x8b, 0x4b, 0x02, 0xb0, 0x18,
	0x1e, 0xcb, 0x8c, 0xe2, 0x6c, 0x2f, 0x24, 0xc2, 0x8a, 0x86, 0xcb, 0x76, 0x34, 0x0c, 0xfe, 0x92,
	0x0e, 0x7d, 0xb0, 0xd3, 0x31, 0x4f, 0x52, 0xe3, 0x8e, 0xbf, 0xd4, 0xa1, 0xcf, 0x36, 0x63, 0x2f,
	0x45, 0x9e, 0x9c, 0xcf, 0xad, 0xcb, 0x6b, 0x0b, 0xa1, 0x53, 0xe2, 0x89, 0x28, 0x9f, 0x08, 0xe1,
	0x29, 0x31, 0xd1, 0x10, 0x7c, 0xa8, 0xa7, 0x11, 0x00, 0x79, 0x8e, 0x3a, 0x18, 0xfc, 0x45, 0x07,
	0xdf, 0x75, 0xf5, 0xc7, 0x93, 0x81, 0x8c, 0x2e, 0x6e, 0x79, 0x43, 0xe5, 0x57, 0xb9, 0x4b, 0xdb,
	0x5c, 0x78, 0x53, 0x9e, 0x72, 0xd5, 0x1b, 0x40, 0x7c, 0x2f, 0x10, 0x5d, 0xd8, 0xaf, 0x3c, 0x2a,
	0xc0, 0xba, 0x45, 0xd1, 0xef, 0xc8, 0xab, 0x5b, 0x94, 0x2b, 0x8b, 0x50, 0x3d, 0xda, 0xf1, 0x2c,
	0x55, 0x89, 0xae, 0xc0, 0x2a, 0x80, 0x92, 0x44, 0xc5, 0xd3, 0x81, 0x2c, 0xca, 0x52, 0xbd, 0x04,
	0xe8, 0x95, 0x8e, 0xe2, 0xe9, 0x2b, 0x7c, 0x00, 0x8d, 0x6b, 0x32, 0x34, 0x16, 0x7d, 0x6a, 0x2c,
	0x72, 0xfc, 0x25, 0xbd, 0x56, 0xaa, 0x00, 0xf4, 0x31, 0x40, 0xc0, 0x2f, 0x57, 0xe9, 0x97, 0x86,
	0xc6, 0x03, 0x23, 0x1a, 0x45, 0x8d, 0xf7, 0x73, 0xfe, 0x39, 0x3e, 0xe4, 0x70, 0xc2, 0x3a, 0xe8,
	0x7d, 0xc0, 0xee, 0x52, 0x75, 0x65, 0x25, 0x1e, 0xfe, 0x3a, 0xf6, 0x5c, 0x6c, 0xc0, 0x9d, 0xca,
	0x33, 0xf3, 0xe3, 0x97, 0x3c, 0x9d, 0x19, 0xaf, 0xb8, 0x80, 0xc3, 0x4e, 0x3d, 0x15, 0x93, 0xe9,
	0x8b, 0x2c, 0x95, 0xd1, 0x05, 0x75, 0xbd, 0x43, 0x75, 0x5a, 0x03, 0x06, 0xbd, 0xbd, 0x14, 0x79,
	0x91, 0xc8, 0xcc, 0x77, 0x69, 0xef, 0x69, 0xb2, 0x7a, 0x0d, 0xd4, 0x1f, 0x27, 0x53, 0xff, 0x2e,
	0x45, 0xd3, 0x0a, 0x31, 0xaf, 0xc7, 0xcf, 0xe4, 0x6b, 0xec, 0xe0, 0xe9, 0x1a, 0xa4, 0x82, 0x8c,
	0xff, 0xc6, 0xe6, 0x7b, 0x95, 0xff, 0xc6, 0x36, 0x93, 0x5f, 0xdd, 0xb7, 0xf2, 0xab, 0x0f, 0xd9,
	0xb2, 0xbe, 0xd2, 0x7d, 0x70, 0xcb, 0x95, 0xae, 0xee, 0x17, 0xfc, 0x16, 0xfa, 0x19, 0x08, 0xaa,
	0xe6, 0x28, 0xde, 0x67, 0x2b, 0xfa, 0xd3, 0x64, 0xde, 0xa6, 0xa5, 0x99, 0xbd, 0x75, 0xea, 0xd6,
	0x1b, 0x8a, 0x91, 0x65, 0xa6, 0x86, 0x7c, 0xff, 0xdf, 0xd7, 0xd8, 0x9a, 0xfd, 0x2f, 0x1d, 0xde,
	0x1d, 0xb6, 0x7a, 0x30, 0xe8, 0x7f, 0x76, 0x94, 0x5d, 0xf2, 0x34, 0x89, 0xdd, 0x9f, 0xf0, 0xd6,
	0x59, 0x0f, 0x00, 0x7c, 0x33, 0xe1, 0xb6, 0x3c, 0x17, 0xfa, 0xf7, 0x3f, 0x33, 0x0c, 0xbb, 0x6d,
	0x83, 0x98, 0x53, 0x40, 0xd7, 0xf1, 0x36, 0x18, 0x03, 0x84, 0x4e, 0xcf, 0xdd, 0x25, 0xcf, 0x63,
	0x1b, 0x15, 0x0d, 0xd3, 0xba, 0x1d, 0x33, 0x2c, 0x3e, 0xf7, 0x74, 0x97, 0xbd, 0xbb, 0x6c, 0x1d,
	0xc8, 0xb2, 0x9a, 0x71, 0x57, 0xcc, 0xb8, 0xe6, 0xb1, 0xa1, 0xdb, 0xf5, 0xd6, 0x58, 0x17, 0x10,
	0xf0, 0x29, 0x6e, 0xcf, 0xbb, 0xcf, 0xdc, 0x6a, 0x54, 0x4a, 0x78, 0x5d, 0x66, 0xe6, 0xaa, 0xde,
	0x71, 0xb9, 0xab, 0xde, 0x5b, 0xec, 0x5e, 0x1d, 0xc3, 0x8c, 0xca, 0x5d, 0xf3, 0xee, 0xb1, 0x3b,
	0xe5, 0xda, 0xf4, 0x08, 0xeb, 0xde, 0x03, 0x76, 0x17, 0xc0, 0xda, 0x5b, 0x0d, 0x77, 0xc3, 0xdb,
	0x64, 0x1e, 0x72, 0x58, 0x7b, 0x2b, 0xe1, 0xde, 0x31, 0xdd, 0x43, 0x79, 0x26, 0x55, 0x29, 0x15,
	0xd7, 0xdb, 0x62, 0x9b, 0x4d, 0xee, 0x9e, 0x89, 0xcf, 0xcf, 0x12, 0xe1, 0xde, 0xf5, 0xde, 0x66,
	0x0f, 0xea, 0xfc, 0xe8, 0x67, 0x3e, 0xae, 0x67, 0x66, 0xa9, 0x3f, 0x7e, 0x70, 0xef, 0x99, 0x59,
	0x6a, 0x2f, 0x0f, 0xdc, 0xfb, 0xde, 0x36, 0xdb, 0xd2, 0xf0, 0x15, 0x0f, 0xa6, 0xdc, 0x07, 0xde,
	0x23, 0xe6, 0xeb, 0xf6, 0x85, 0x37, 0x45, 0xee, 0xa6, 0xe7, 0xb3, 0xfb, 0xba, 0xb5, 0x76, 0xc5,
	0xef, 0xbe, 0x65, 0xd4, 0x51, 0xde, 0xb1, 0xbb, 0xbe, 0x35, 0xd5, 0x15, 0x97, 0xdd, 0xee, 0xdb,
	0x56, 0xfb, 0x15, 0xf7, 0xcd, 0xee, 0x96, 0x51, 0x97, 0x7d, 0xcd, 0xeb, 0x3e, 0xb4, 0x27, 0xc2,
	0x9b, 0x39, 0xf7, 0x91, 0xc5, 0x55, 0xed, 0x4e, 0xcc, 0x7d, 0xc7, 0xd2, 0xa3, 0x7d, 0x3d, 0xe5,
	0x6e, 0x5b, 0x7a, 0x7c, 0x32, 0x9d, 0xa6, 0xe2, 0x84, 0xcf, 0xdd, 0x77, 0xad, 0x71, 0x6a, 0xd7,
	0x38, 0xee, 0x8e, 0xd5, 0x52, 0xbb, 0x51, 0x71, 0xbf, 0x66, 0xb5, 0xd4, 0xae, 0x2c, 0xdc, 0xc0,
	0x6a, 0xa9, 0xdd, 0x07, 0xb8, 0x3f, 0x69, 0x4d, 0x6e, 0x8e, 0x7d, 0xdd, 0xf7, 0x2c, 0x15, 0xd7,
	0xcf, 0x82, 0xdd, 0xaf, 0x5b, 0x82, 0xc0, 0x83, 0x58, 0x14, 0xc4, 0x37, 0x8c, 0xbd, 0x2c, 0x1e,
	0xa7, 0xb9, 0x3f, 0x65, 0x76, 0x02, 0xbe, 0xaf, 0x55, 0xd1, 0xd8, 0xdd, 0xb5, 0x24, 0x81, 0xc8,
	0x93, 0xf8, 0x92, 0x67, 0x91, 0x70, 0x7f, 0xda, 0xb2, 0x1f, 0x4b, 0xd7, 0xee, 0xfb, 0x96, 0xfd,
	0xec, 0xe5, 0xf2, 0x42, 0x64, 0xc8, 0xfb, 0xcf, 0x58, 0xab, 0x3a, 0x15, 0xaf, 0x79, 0x01, 0x49,
	0x99, 0xb8, 0x14, 0xa9, 0xfb, 0x81, 0xc5, 0x25, 0xf8, 0x34, 0x9a, 0xf7, 0x67, 0xbd, 0x87, 0xec,
	0x2d, 0x8d, 0x36, 0xcf, 0x72, 0xdc, 0xc7, 0x5e, 0xc0, 0xb6, 0x1b, 0x8d, 0x64, 0x09, 0xe5, 0x91,
	0x85, 0xfb, 0x4d, 0xcb, 0x20, 0x4d, 0x9f, 0x6a, 0xcb, 0x7f, 0xe8, 0xbd, 0xcb, 0x1e, 0x36, 0x5a,
	0x87, 0xa2, 0x3a, 0x60, 0x71, 0x7f, 0xce, 0xfa, 0xf9, 0xc9, 0xec, 0x2c, 0x4d, 0x8a, 0x31, 0x44,
	0xd4, 0xa4, 0x50, 0x49, 0x54, 0xb8, 0x1f, 0x19, 0xdf, 0x05, 0x8b, 0x14, 0xaa, 0x70, 0x7f, 0xde,
	0x48, 0xa3, 0x7e, 0x2e, 0xe5, 0x7e, 0x6c, 0x89, 0xcf, 0x3e, 0x8d, 0x76, 0x7f, 0xc1, 0xd2, 0x25,
	0x34, 0x9c, 0xf1, 0xec, 0xc2, 0xfd, 0x45, 0x4b, 0x48, 0xb5, 0x53, 0x10, 0xf7, 0x5b, 0xd6, 0x38,
	0x76, 0x28, 0x73, 0x7f, 0xc9, 0xfb, 0x3a, 0xfb, 0x1a, 0x7a, 0xb7, 0x9b, 0xaa, 0x40, 0xf7, 0x97,
	0x8d, 0x95, 0x2c, 0xa4, 0xba, 0xee, 0xaf, 0x18, 0x3f, 0x56, 0xfd, 0xa7, 0x90, 0xfb, 0xab, 0x75,
	0x0c, 0x92, 0x51, 0xf7, 0xdb, 0x96, 0xc2, 0xad, 0x74, 0xd4, 0xfd, 0x35, 0x4b, 0x53, 0xcd, 0xac,
	0xd1, 0xfd, 0x75, 0x7b, 0x45, 0x76, 0x92, 0xe6, 0xfe, 0x86, 0xa5, 0xf6, 0x32, 0x2f, 0x72, 0x85,
	0xed, 0xb0, 0x6a, 0x6f, 0x0e, 0xdc, 0x73, 0x6b, 0x7e, 0x2b, 0x4c, 0xb9, 0xa3, 0xf7, 0xfb, 0x98,
	0xb1, 0xda, 0xe2, 0xd5, 0xe7, 0x35, 0x6b, 0x83, 0x61, 0xff, 0xd4, 0x8a, 0x2f, 0x6b, 0xac, 0x8b,
	0xc8, 0x8b, 0x42, 0xb8, 0xad, 0x92, 0x7a, 0x2a, 0x94, 0xdb, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x32, 0xb7, 0xa6, 0xda, 0x38, 0x00, 0x00,
}
