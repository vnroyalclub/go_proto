// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_moduleLock.proto

package VK_Proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 模块锁
type Lock struct {
	MType            *int32 `protobuf:"varint,1,req,name=MType" json:"MType,omitempty"`
	IsLock           *bool  `protobuf:"varint,2,req,name=IsLock" json:"IsLock,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Lock) Reset()                    { *m = Lock{} }
func (m *Lock) String() string            { return proto.CompactTextString(m) }
func (*Lock) ProtoMessage()               {}
func (*Lock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Lock) GetMType() int32 {
	if m != nil && m.MType != nil {
		return *m.MType
	}
	return 0
}

func (m *Lock) GetIsLock() bool {
	if m != nil && m.IsLock != nil {
		return *m.IsLock
	}
	return false
}

// 等级模块锁
type MLock struct {
	IsLock           *bool   `protobuf:"varint,1,req,name=IsLock" json:"IsLock,omitempty"`
	Locks            []*Lock `protobuf:"bytes,2,rep,name=Locks" json:"Locks,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MLock) Reset()                    { *m = MLock{} }
func (m *MLock) String() string            { return proto.CompactTextString(m) }
func (*MLock) ProtoMessage()               {}
func (*MLock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *MLock) GetIsLock() bool {
	if m != nil && m.IsLock != nil {
		return *m.IsLock
	}
	return false
}

func (m *MLock) GetLocks() []*Lock {
	if m != nil {
		return m.Locks
	}
	return nil
}

// 全部模块锁
type ModuleLock struct {
	FirstLock        *MLock `protobuf:"bytes,1,req,name=FirstLock" json:"FirstLock,omitempty"`
	SecondLock       *MLock `protobuf:"bytes,2,req,name=SecondLock" json:"SecondLock,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModuleLock) Reset()                    { *m = ModuleLock{} }
func (m *ModuleLock) String() string            { return proto.CompactTextString(m) }
func (*ModuleLock) ProtoMessage()               {}
func (*ModuleLock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *ModuleLock) GetFirstLock() *MLock {
	if m != nil {
		return m.FirstLock
	}
	return nil
}

func (m *ModuleLock) GetSecondLock() *MLock {
	if m != nil {
		return m.SecondLock
	}
	return nil
}

// 请求模块锁
type ReqModuleLock struct {
	Channel          *string `protobuf:"bytes,1,req,name=Channel" json:"Channel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReqModuleLock) Reset()                    { *m = ReqModuleLock{} }
func (m *ReqModuleLock) String() string            { return proto.CompactTextString(m) }
func (*ReqModuleLock) ProtoMessage()               {}
func (*ReqModuleLock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *ReqModuleLock) GetChannel() string {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return ""
}

func init() {
	proto.RegisterType((*Lock)(nil), "VK.Proto.Lock")
	proto.RegisterType((*MLock)(nil), "VK.Proto.MLock")
	proto.RegisterType((*ModuleLock)(nil), "VK.Proto.ModuleLock")
	proto.RegisterType((*ReqModuleLock)(nil), "VK.Proto.ReqModuleLock")
}

func init() { proto.RegisterFile("client_moduleLock.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x89, 0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0xf5, 0xc9, 0x4f, 0xce, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x08, 0xf3, 0xd6, 0x0b, 0x00, 0xb1, 0x94, 0x4c, 0xb8, 0x58, 0x40,
	0xe2, 0x42, 0x22, 0x5c, 0xac, 0xbe, 0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0xac,
	0x41, 0x10, 0x8e, 0x90, 0x18, 0x17, 0x9b, 0x67, 0x31, 0x48, 0x5e, 0x82, 0x49, 0x81, 0x49, 0x83,
	0x23, 0x08, 0xca, 0x53, 0x72, 0xe5, 0x62, 0xf5, 0x05, 0x6b, 0x43, 0x28, 0x60, 0x44, 0x56, 0x20,
	0xa4, 0xc2, 0xc5, 0x0a, 0xa2, 0x8b, 0x25, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0xf8, 0xf4, 0x60,
	0x16, 0xea, 0x81, 0x84, 0x83, 0x20, 0x92, 0x4a, 0x39, 0x5c, 0x5c, 0xbe, 0x70, 0xa7, 0x09, 0xe9,
	0x72, 0x71, 0xba, 0x65, 0x16, 0x15, 0x97, 0xc0, 0x8d, 0xe3, 0x36, 0xe2, 0x47, 0xe8, 0x03, 0xdb,
	0x17, 0x84, 0x50, 0x21, 0xa4, 0xcf, 0xc5, 0x15, 0x9c, 0x9a, 0x9c, 0x9f, 0x97, 0x02, 0x77, 0x1f,
	0x16, 0xf5, 0x48, 0x4a, 0x94, 0x34, 0xb9, 0x78, 0x83, 0x52, 0x0b, 0x91, 0x2c, 0x94, 0xe0, 0x62,
	0x77, 0xce, 0x48, 0xcc, 0xcb, 0x4b, 0xcd, 0x01, 0x5b, 0xc7, 0x19, 0x04, 0xe3, 0x02, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x36, 0xf2, 0x1e, 0xab, 0x39, 0x01, 0x00, 0x00,
}
